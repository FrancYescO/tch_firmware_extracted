#!/bin/sh /etc/rc.common
# Copyright (C) 2007-2012 OpenWrt.org

NAME="dnsmasq"
START=60

SERVICE_USE_PID=1

ADD_LOCAL_DOMAIN=1
ADD_LOCAL_HOSTNAME=1

CONFIGFILE=""

xappend() {
	local value="$1"

	echo "${value#--}" >> $CONFIGFILE
}

dhcp_calc() {
	local ip="$1"
	local res=0

	while [ -n "$ip" ]; do
		part="${ip%%.*}"
		res="$(($res * 256))"
		res="$(($res + $part))"
		[ "${ip%.*}" != "$ip" ] && ip="${ip#*.}" || ip=
	done
	echo "$res"
}

append_bool() {
	local section="$1"
	local option="$2"
	local value="$3"
	local _loctmp
	config_get_bool _loctmp "$section" "$option" 0
	[ $_loctmp -gt 0 ] && xappend "$value"
}

append_parm() {
	local section="$1"
	local option="$2"
	local switch="$3"
	local _loctmp
	config_get _loctmp "$section" "$option"
	[ -z "$_loctmp" ] && return 0
	xappend "$switch=$_loctmp"
}

append_server() {
	xappend "--server=$1"
}

append_address() {
	xappend "--address=$1"
}

append_listen_address() {
	xappend "--listen-address=$1"
}

append_interface() {
	local ifname=$(uci_get_state network "$1" ifname "$1")
	xappend "--interface=$ifname"
}

append_notinterface() {
	local ifname=$(uci_get_state network "$1" ifname "$1")
	xappend "--except-interface=$ifname"
}

append_addnhosts() {
	xappend "--addn-hosts=$1"
}

append_bogusnxdomain() {
	xappend "--bogus-nxdomain=$1"
}

append_pxe_service() {
	xappend "--pxe-service=$1"
}

filter_dnsmasq() {
	local cfg="$1" func="$2" match_cfg="$3" found_cfg

	#use entry when no dnsmasq_cfg entry set, or if it matches
	config_get found_cfg "$cfg" "dnsmasq_config"
	if [ -z "$found_cfg" -o "$found_cfg" = "$match_cfg" ]; then
		$func $cfg
	fi
}

dnsmasq_stop() {
	local cfg="$1" resolvfile

	config_get resolvfile "$cfg" "resolvfile"
	[ -z "$resolvfile" ] && resolvfile="/tmp/resolv-${cfg}.conf"

	SERVICE_PID_FILE="/var/run/${NAME}.${cfg}.pid"
	service_check /usr/sbin/dnsmasq || return 0

	#relink /tmp/resolve.conf only for main instance
	service_stop /usr/sbin/dnsmasq && [ "$resolvfile" = "/tmp/resolv.conf.auto" ] && {
		[ -f /tmp/resolv.conf ] && {
			rm -f /tmp/resolv.conf
			ln -s "$resolvfile" /tmp/resolv.conf
		}
	}
}

dnsmasq_start() {
	local cfg="$1" disabled resolvfile

	config_get_bool disabled "$cfg" disabled 0
	[ "$disabled" -gt 0 ] && return 0

	config_get resolvfile "$cfg" "resolvfile"
	[ -z "$resolvfile" ] && resolvfile="/tmp/resolv-${cfg}.conf"

	# reset list of DOMAINS and DNS servers (for each dnsmasq instance)
	DNS_SERVERS=""
	DOMAIN=""
	CONFIGFILE="/var/etc/dnsmasq-${cfg}.conf"
	SERVICE_PID_FILE="/var/run/${NAME}.${cfg}.pid"

	# before we can call xappend
	mkdir -p $(dirname $CONFIGFILE)

	echo "# auto-generated config file from /etc/config/dhcp" > $CONFIGFILE

	# if we did this last, we could override auto-generated config
	[ -f /etc/dnsmasq.conf ] && {
		xappend "--conf-file=/etc/dnsmasq.conf"
	}

	append_bool "$cfg" authoritative "--dhcp-authoritative"
	append_bool "$cfg" nodaemon "--no-daemon"
	append_bool "$cfg" domainneeded "--domain-needed"
	append_bool "$cfg" filterwin2k "--filterwin2k"
	append_bool "$cfg" nohosts "--no-hosts"
	append_bool "$cfg" nonegcache "--no-negcache"
	append_bool "$cfg" strictorder "--strict-order"
	append_bool "$cfg" logqueries "--log-queries=extra"
	append_bool "$cfg" noresolv "--no-resolv"
	append_bool "$cfg" localise_queries "--localise-queries"
	append_bool "$cfg" readethers "--read-ethers"
	append_bool "$cfg" dbus "--enable-dbus"
	append_bool "$cfg" boguspriv "--bogus-priv"
	append_bool "$cfg" expandhosts "--expand-hosts"
	append_bool "$cfg" enable_tftp "--enable-tftp"
	append_bool "$cfg" nonwildcard "--bind-dynamic"
	append_bool "$cfg" fqdn "--dhcp-fqdn"
	append_bool "$cfg" proxydnssec "--proxy-dnssec"
	append_bool "$cfg" localservice "--local-service"
	append_bool "$cfg" quietdhcp "--quiet-dhcp"
	append_bool "$cfg" bind_dynamic "--bind-dynamic"
	append_bool "$cfg" sticky_servers "--sticky-servers"
	append_bool "$cfg" sequential_ip "--dhcp-sequential-ip"
	append_bool "$cfg" allservers "--all-servers"
	append_bool "$cfg" noping "--no-ping"

	append_parm "$cfg" dhcpscript "--dhcp-script"
	append_parm "$cfg" cachesize "--cache-size"
	append_parm "$cfg" dnsforwardmax "--dns-forward-max"
	append_parm "$cfg" port "--port"
	append_parm "$cfg" ednspacket_max "--edns-packet-max"
	append_parm "$cfg" dhcpleasemax "--dhcp-lease-max"
	append_parm "$cfg" "queryport" "--query-port"
	append_parm "$cfg" "minport" "--min-port"
	append_parm "$cfg" "maxport" "--max-port"
	append_parm "$cfg" "domain" "--domain"
	append_parm "$cfg" "local" "--server"
	config_list_foreach "$cfg" "server" append_server
	config_list_foreach "$cfg" "address" append_address
	config_list_foreach "$cfg" "listen_address" append_listen_address
	config_list_foreach "$cfg" "interface" append_interface
	config_list_foreach "$cfg" "notinterface" append_notinterface
	config_list_foreach "$cfg" "addnhosts" append_addnhosts
	config_list_foreach "$cfg" "bogusnxdomain" append_bogusnxdomain
	append_parm "$cfg" "leasefile" "--dhcp-leasefile"
	append_parm "$cfg" "resolvfile" "--resolv-file"
	append_parm "$cfg" "serversfile" "--servers-file"
	append_parm "$cfg" "tftp_root" "--tftp-root"
	append_parm "$cfg" "dhcp_boot" "--dhcp-boot"
	append_parm "$cfg" "local_ttl" "--local-ttl"

	append_parm "$cfg" "pxe_prompt" "--pxe-prompt"
	config_list_foreach "$cfg" "pxe_service" append_pxe_service
	config_get DOMAIN "$cfg" domain

	config_get_bool ADD_LOCAL_DOMAIN "$cfg" add_local_domain 1
	config_get_bool ADD_LOCAL_HOSTNAME "$cfg" add_local_hostname 1

	config_get_bool readethers "$cfg" readethers
	[ "$readethers" = "1" -a \! -e "/etc/ethers" ] && touch /etc/ethers

	config_get leasefile $cfg leasefile
	[ -n "$leasefile" -a \! -e "$leasefile" ] && touch "$leasefile"
	config_get_bool cachelocal "$cfg" cachelocal 1

	config_get hostsfile "$cfg" dhcphostsfile
	[ -e "$hostsfile" ] && xappend "--dhcp-hostsfile=$hostsfile"

	local rebind
	config_get_bool rebind "$cfg" rebind_protection 1
	[ $rebind -gt 0 ] && {
		logger -t dnsmasq \
			"DNS rebinding protection is active," \
			"will discard upstream RFC1918 responses!"
		xappend "--stop-dns-rebind"

		local rebind_localhost
		config_get_bool rebind_localhost "$cfg" rebind_localhost 0
		[ $rebind_localhost -gt 0 ] && {
			logger -t dnsmasq "Allowing 127.0.0.0/8 responses"
			xappend "--rebind-localhost-ok"
		}

		append_rebind_domain() {
			logger -t dnsmasq "Allowing RFC1918 responses for domain $1"
			xappend "--rebind-domain-ok=$1"
		}

		config_list_foreach "$cfg" rebind_domain append_rebind_domain
	}

	dhcp_option_add "$cfg" "" 0

	mkdir -p /tmp/hosts /tmp/dnsmasq.d
	xappend "--addn-hosts=/tmp/hosts"
	xappend "--conf-dir=/tmp/dnsmasq.d"

	echo >> $CONFIGFILE
	config_foreach filter_dnsmasq host dhcp_host_add $cfg

	echo >> $CONFIGFILE
	config_foreach filter_dnsmasq boot dhcp_boot_add $cfg
	config_foreach filter_dnsmasq tag dhcp_tag_add $cfg
	config_foreach filter_dnsmasq mac dhcp_mac_add $cfg
	config_foreach filter_dnsmasq vendorclass dhcp_vendorclass_add $cfg
	config_foreach filter_dnsmasq userclass dhcp_userclass_add $cfg
	config_foreach filter_dnsmasq circuitid dhcp_circuitid_add $cfg
	config_foreach filter_dnsmasq remoteid dhcp_remoteid_add $cfg
	config_foreach filter_dnsmasq subscrid dhcp_subscrid_add $cfg
	config_foreach filter_dnsmasq domain dhcp_domain_add $cfg
	echo >> $CONFIGFILE
	config_foreach filter_dnsmasq srvhost dhcp_srv_add $cfg
	config_foreach filter_dnsmasq mxhost dhcp_mx_add $cfg
	echo >> $CONFIGFILE

	config_foreach filter_dnsmasq dhcp dhcp_add $cfg
	echo >> $CONFIGFILE
	config_foreach filter_dnsmasq cname dhcp_cname_add $cfg
	echo >> $CONFIGFILE

	# add own hostname
	[ $ADD_LOCAL_HOSTNAME -eq 1 ] && {
		local lanaddr lanaddr6
		local ulaprefix="$(uci_get network @globals[0] ula_prefix)"
		local hostname="$(uci_get system @system[0] hostname OpenWrt)"

		network_get_ipaddr lanaddr "lan" && {
			dhcp_domain_add "" "$hostname" "$lanaddr"
			config_foreach dnsmasq_hostname_list dnsmasq
		}

		[ -n "$ulaprefix" ] && network_get_ipaddrs6 lanaddr6 "lan" && {
			for lanaddr6 in $lanaddr6; do
				case "$lanaddr6" in
					"${ulaprefix%%:/*}"*)
						dhcp_domain_add "" "$hostname" "$lanaddr6"
					;;
				esac
			done
		}
	}

	echo >> $CONFIGFILE
	config_foreach filter_dnsmasq dnsrule dnsrule_add $cfg
	echo >> $CONFIGFILE

	# enable spoofing if intercept active (wan down)
	[ -d /usr/lib/intercept ] && {
		. /usr/lib/intercept/functions.sh
		intercept_active && xappend "--address=/#/$(intercept_spoofip)"
	}
	service_start /usr/sbin/dnsmasq -C $CONFIGFILE -x $SERVICE_PID_FILE && {
		#populate /tmp/resolve.conf only for main instance
		[ "$resolvfile" = "/tmp/resolv.conf.auto" ]  && {

			rm -f /tmp/resolv.conf
			[ $ADD_LOCAL_DOMAIN -eq 1 ] && [ -n "$DOMAIN" ] && {
				echo "search $DOMAIN" >> /tmp/resolv.conf
			}
			DNS_SERVERS="$DNS_SERVERS 127.0.0.1"
			for DNS_SERVER in $DNS_SERVERS ; do
				echo "nameserver $DNS_SERVER" >> /tmp/resolv.conf
			done
		}
	}
}

dnsrule_add() {
	local cfg="$1"

	config_get domain "$cfg" domain
	config_get policy "$cfg" policy
	config_get dnsset "$cfg" dnsset
	config_get outpolicy "$cfg" outpolicy
	[ -n "$dnsset" ] || return 0
	policy_mask=$(uci_get_state mwan globals nfmask)
	[ -n "$policy_mask" ] || policy_mask="0xffffffff"
	[ -n "$policy" ] && {
		[ "$policy" != "any" ] && {
			policy=$(uci_get_state mwan "$policy" nfmark)
		}
	}
	[ -z "$policy" ] && policy="any"

	[ -n "$outpolicy" ] && {
		case "$outpolicy" in
			"default")
				outpolicy=0x0
				;;

			*)
				outpolicy=$(uci_get_state mwan "$outpolicy" nfmark)
				;;
		esac
	}
	[ -z "$outpolicy" ] && outpolicy="copy"

	xappend "--dns-filter=$dnsset,$domain,$policy/$policy_mask,$outpolicy"
}

dhcp_subscrid_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get subscriberid "$cfg" subscriberid
	[ -n "$subscriberid" ] || return 0

	xappend "--dhcp-subscrid=$networkid,$subscriberid"

	config_get_bool force "$cfg" force 0

	dhcp_option_add "$cfg" "$networkid" "$force"
}

dhcp_remoteid_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get remoteid "$cfg" remoteid
	[ -n "$remoteid" ] || return 0

	xappend "--dhcp-remoteid=$networkid,$remoteid"

	config_get_bool force "$cfg" force 0

	dhcp_option_add "$cfg" "$networkid" "$force"
}

dhcp_circuitid_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get circuitid "$cfg" circuitid
	[ -n "$circuitid" ] || return 0

	xappend "--dhcp-circuitid=$networkid,$circuitid"

	config_get_bool force "$cfg" force 0

	dhcp_option_add "$cfg" "$networkid" "$force"
}

dhcp_userclass_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get userclass "$cfg" userclass
	[ -n "$userclass" ] || return 0

	xappend "--dhcp-userclass=$networkid,$userclass"

	config_get_bool force "$cfg" force 0

	dhcp_option_add "$cfg" "$networkid" "$force"
}

dhcp_vendorclass_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get vendorclass "$cfg" vendorclass
	[ -n "$vendorclass" ] || return 0

	xappend "--dhcp-vendorclass=$networkid,$vendorclass"

	config_get_bool force "$cfg" force 0

	dhcp_option_add "$cfg" "$networkid" "$force"
}

dhcp_host_add() {
	local cfg="$1"

	config_get_bool force "$cfg" force 0

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] && dhcp_option_add "$cfg" "$networkid" "$force"

	config_get_bool enable "$cfg" enable 1
	[ "$enable" = "0" ] && return 0

	config_get name "$cfg" name
	config_get ip "$cfg" ip
	[ -n "$ip" -o -n "$name" ] || return 0

	config_get mac "$cfg" mac
	if [ -n "$mac" ]; then
		# --dhcp-host=00:20:e0:3b:13:af,192.168.0.199,lap
		macs=""
		for m in $mac; do append macs "$m" ","; done
	else
		# --dhcp-host=lap,192.168.0.199
		[ -n "$name" ] || return 0
		macs="$name"
		name=""
	fi

	config_get tag "$cfg" tag

	config_get_bool broadcast "$cfg" broadcast 0
	[ "$broadcast" = "0" ] && broadcast=

	xappend "--dhcp-host=$macs${networkid:+,net:$networkid}${broadcast:+,set:needs-broadcast}${tag:+,set:$tag}${ip:+,$ip}${name:+,$name}"
}

dhcp_tag_add() {
	local cfg="$1"

	tag="$cfg"

	[ -n "$tag" ] || return 0

	config_get_bool force "$cfg" force 0
	[ "$force" = "0" ] && force=

	config_get option "$cfg" dhcp_option
	for o in $option; do
		xappend "--dhcp-option${force:+-force}=tag:$tag,$o"
	done
}

dhcp_mac_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get mac "$cfg" mac
	[ -n "$mac" ] || return 0

	xappend "--dhcp-mac=$networkid,$mac"

	dhcp_option_add "$cfg" "$networkid"
}

dhcp_boot_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid

	config_get filename "$cfg" filename
	[ -n "$filename" ] || return 0

	config_get servername "$cfg" servername

	config_get serveraddress "$cfg" serveraddress

	[ -n "$serveraddress" -a ! -n "$servername" ] && return 0

	xappend "--dhcp-boot=${networkid:+net:$networkid,}${filename}${servername:+,$servername}${serveraddress:+,$serveraddress}"

	config_get_bool force "$cfg" force 0

	dhcp_option_add "$cfg" "$networkid" "$force"
}


dhcp_add() {
	local cfg="$1"

	config_get_bool enable "$cfg" enable 1
	[ "$enable" = "0" ] && return 0

	config_get net "$cfg" interface
	[ -n "$net" ] || return 0

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || networkid="$net"

	network_get_subnet subnet "$net" || return 0
	network_get_device ifname "$net" || return 0
	network_get_protocol proto "$net" || return 0

	[ "$cachelocal" = "0" ] && network_get_dnsserver dnsserver "$net" && {
		DNS_SERVERS="$DNS_SERVERS $dnsserver"
	}

	append_bool "$cfg" ignore "--no-dhcp-interface=$ifname" && return 0

	# Do not support non-static interfaces for now
	[ static = "$proto" ] || return 0

	# Override interface netmask with dhcp config if applicable
	config_get netmask "$cfg" netmask "${subnet##*/}"

	#check for an already active dhcp server on the interface, unless 'force' is set
	config_get_bool force "$cfg" force 0
	[ $force -gt 0 ] || {
		udhcpc -n -q -s /bin/true -t 1 -i $ifname >&- && {
			logger -t dnsmasq \
				"found already running DHCP-server on interface '$ifname'" \
				"refusing to start, use 'option force 1' to override"
			return 0
		}
	}

	config_get start "$cfg" start
	config_get limit "$cfg" limit
	config_get leasetime "$cfg" leasetime
	config_get options "$cfg" options
	config_get_bool dynamicdhcp "$cfg" dynamicdhcp 1

	leasetime="${leasetime:-12h}"
	start="$(dhcp_calc "${start:-100}")"
	limit="${limit:-150}"
	[ "$limit" -gt 0 ] && limit=$((limit-1))
	eval "$(ipcalc.sh "${subnet%%/*}" $netmask $start $limit)"
	if [ "$dynamicdhcp" = "0" ]; then END="static"; fi
	xappend "--dhcp-range=$networkid,$START,$END,$NETMASK,$leasetime${options:+ $options}"

	dhcp_option_add "$cfg" "$networkid"
}

dhcp_handle_option_add() {
	xappend "--dhcp-option${force:+-force}=${networkid:+$networkid,}$1"
}

dhcp_option_add() {
	local cfg="$1"
	local networkid="$2"
	local force="$3"

	[ "$force" = "0" ] && force=

	config_list_foreach "$cfg" dhcp_option dhcp_handle_option_add
}

dhcp_domain_add() {
	local cfg="$1"
	local ip name names

	config_get names "$cfg" name "$2"
	[ -n "$names" ] || return 0

	config_get ip "$cfg" ip "$3"
	[ -n "$ip" ] || return 0

	local oIFS="$IFS"; IFS="."; set -- $ip; IFS="$oIFS"
	local raddr="${4:+$4.$3.$2.$1.in-addr.arpa}"

	for name in $names; do
		local fqdn="$name"

		[ "${fqdn%.*}" == "$fqdn" ] && \
			fqdn="$fqdn${DOMAIN:+.$DOMAIN}"

		xappend "--address=/$fqdn/$ip"

		[ -n "$raddr" ] && {
			xappend "--ptr-record=$raddr,$fqdn"
			raddr=""
		}
	done
}

dhcp_srv_add() {
	local cfg="$1"

	config_get srv "$cfg" srv
	[ -n "$srv" ] || return 0

	config_get target "$cfg" target
	[ -n "$target" ] || return 0

	config_get port "$cfg" port
	[ -n "$port" ] || return 0

	config_get class "$cfg" class
	config_get weight "$cfg" weight

	local service="$srv,$target,$port${class:+,$class${weight:+,$weight}}"

	xappend "--srv-host=$service"
}

dhcp_mx_add() {
	local cfg="$1"
	local domain relay pref

	config_get domain "$cfg" domain
	[ -n "$domain" ] || return 0

	config_get relay "$cfg" relay
	[ -n "$relay" ] || return 0

	config_get pref "$cfg" pref 0

	local service="$domain,$relay,$pref"

	xappend "--mx-host=$service"
}

dhcp_cname_add() {
	local cfg="$1"
	local cname target

	config_get cname "$cfg" cname
	[ -n "$cname" ] || return 0

	config_get target "$cfg" target
	[ -n "$target" ] || return 0

	xappend "--cname=${cname},${target}"
}

dnsmasq_hostname() {
	dhcp_domain_add "" "$1" "$lanaddr"
}

dnsmasq_hostname_list() {
	config_list_foreach "$1" "hostname" dnsmasq_hostname
}

start() {
	local dnsmasq_cfg="$1"
	local instance_found=0

	. /lib/functions/network.sh
	. /lib/functions/functions-tch.sh

	config_cb() {
		local type="$1"
		local name="$2"
		if [ "$type" = "dnsmasq" ]; then
			if [ -n "$dnsmasq_cfg" -a "$dnsmasq_cfg" = "$name" ]; then
				instance_found=1
			fi
		fi
	}

	config_load dhcp

	if [ -n "$dnsmasq_cfg" ]; then
		[ "$instance_found" -gt 0 ] || return
		dnsmasq_start "$dnsmasq_cfg"
	else
		config_foreach dnsmasq_start dnsmasq
	fi
}

stop() {
	local dnsmasq_cfg="$1"
	local instance_found=0

	config_cb() {
		local type="$1"
		local name="$2"
		if [ "$type" = "dnsmasq" ]; then
			if [ -n "$dnsmasq_cfg" -a "$dnsmasq_cfg" = "$name" ]; then
				instance_found=1
			fi
		fi
	}

	config_load dhcp
	if [ -n "$dnsmasq_cfg" ]; then
		[ "$instance_found" -gt 0 ] || return
		dnsmasq_stop "$dnsmasq_cfg"
	else
		config_foreach dnsmasq_stop dnsmasq
	fi
}

restart() {
	# serialize this function there it can be called concurrent
	#  ( eg. intercept hotplug + initboot )
	#  ( eg. intercept hotplug + commit aplly rule )
	while [ "$(pgrep -f -o '/bin/sh /etc/rc.common .*dnsmasq')" != "$$" ]; do
		sleep 1
	done

	trap '' TERM
	stop "$@"
	start "$@"
}
