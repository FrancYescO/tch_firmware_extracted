#!/bin/sh /etc/rc.common

START=95
STOP=06

SERVICE_USE_PID=1

upnpd_get_port_range() {
	local _var="$1"; shift
	local _val

	config_get _val "$@"

	case "$_val" in
		[0-9]*[:-][0-9]*)
			export -n -- "${_var}_start=${_val%%[:-]*}"
			export -n -- "${_var}_end=${_val##*[:-]}"
		;;
		[0-9]*)
			export -n -- "${_var}_start=$_val"
			export -n -- "${_var}_end="
		;;
	esac
}

conf_rule_add() {
	local cfg="$1"
	local tmpconf="$2"
	local action external_port_start external_port_end int_addr
	local internal_port_start internal_port_end

	config_get action "$cfg" action "deny"               # allow or deny
	upnpd_get_port_range "ext" "$cfg" ext_ports "0-65535" # external ports: x, x-y, x:y
	config_get int_addr "$cfg" int_addr "0.0.0.0/0"       # ip or network and subnet mask (internal)
	upnpd_get_port_range "int" "$cfg" int_ports "0-65535" # internal ports: x, x-y, x:y or range

	# Make a single IP IP/32 so that miniupnpd-tch.conf can use it.
	case "$int_addr" in
		*/*) ;;
		*) int_addr="$int_addr/32" ;;
	esac

	echo "${action} ${ext_start}${ext_end:+-}${ext_end} ${int_addr} ${int_start}${int_end:+-}${int_end}" >>$tmpconf
}

dhcp_calc() {
	local ip="$1"
	local res=0

	while [ -n "$ip" ]; do
		part="${ip%%.*}"
		res="$(($res * 256))"
		res="$(($res + $part))"
		[ "${ip%.*}" != "$ip" ] && ip="${ip#*.}" || ip=
	done
	echo "$res"
}

conf_rule_resolve_dhcppool() {
	local cfg="$1"

	local enable=$(uci_get dhcp "$cfg" enable 1)
	[ "$enable" = "0" ] && return 0

	local net=$(uci_get dhcp "$cfg" interface)
	[ -n "$net" ] || return 0

	local networkid=$(uci_get dhcp "$cfg" networkid)
	[ -n "$networkid" ] || networkid="$net"

	network_get_subnet subnet "$net" || return 0
	network_get_protocol proto "$net" || return 0

	# Do not support non-static interfaces for now
	[ static = "$proto" ] || return 0

	# Override interface netmask with dhcp config if applicable
	local netmask=$(uci_get dhcp "$cfg" netmask "${subnet##*/}")

	local start=$(uci_get dhcp "$cfg" start)
	local limit=$(uci_get dhcp "$cfg" limit)
	local leasetime=$(uci_get dhcp "$cfg" leasetime)
	local options=$(uci_get dhcp "$cfg" options)
	local dynamicdhcp=$(uci_get dhcp "$cfg" dynamicdhcp 1)

	leasetime="${leasetime:-12h}"
	start="$(dhcp_calc "${start:-100}")"
	limit="${limit:-150}"
	[ "$limit" -gt 0 ] && limit=$((limit-1))
	eval "$(ipcalc.sh "${subnet%%/*}" $netmask $start $limit)"
}

conf_rule_add_extiface() {
	local cfg="$1"
        local tmpconf="$2"
	local rulename startip endip extintf servicetype serviceid

	config_get rulename "$cfg" name "Default"
	config_get startip "$cfg" client_start_ip "*"
	config_get endip "$cfg" client_end_ip "*"
	config_get extintf "$cfg" external_iface "wan"
	config_get servicetype "$cfg" service_type "WANIPConnection"
	config_get serviceid "$cfg" service_id "WANIPConn1"

	local extifname
	network_get_device extifname ${extintf:-wan}

	[ -z "$extifname" ] && return
	extifcount=$((extifcount+1))

	if [ "$startip" = "*" ] || [ "$endip" = "*" ]; then
		conf_rule_resolve_dhcppool $rulename
		startip=$START
		endip=$END
	fi

	echo "ext_iface_rule=$rulename:$startip:$endip:$extifname:$servicetype:$serviceid" >>$tmpconf
}


upnpd_write_bool() {
	local opt="$1"
	local def="${2:-0}"
	local alt="$3"
	local val

	config_get_bool val config "$opt" "$def"
	if [ "$val" -eq 0 ]; then
		echo "${alt:-$opt}=no" >> $tmpconf
	else
		echo "${alt:-$opt}=yes" >> $tmpconf
	fi
}

boot() {
	return
}

start() {
	config_load "upnpd"
	local extiface intiface upload download logging secure enabled natpmp
	local extip port usesysuptime conffile serial_number model_number
	local uuid notify_interval presentation_url enable_upnp
	local upnp_lease_file clean_ruleset_threshold clean_ruleset_interval upnp_wgclp_script
	local datamodel_version

	config_get extiface config external_iface
	config_get intiface config internal_iface
	config_get extip config external_ip
	config_get port config port 5000
	config_get upload   config upload
	config_get download config download
	config_get_bool logging config log_output 0
	config_get conffile config config_file
	config_get serial_number config serial_number
	config_get model_number config model_number
	config_get friendly_name config friendly_name
	config_get manufacturer config manufacturer
	config_get manufacturer_url config manufacturer_url
	config_get model_name config model_name
	config_get model_description config model_description
	config_get model_url config model_url
	config_get datamodel_version config datamodel_version "igdv2"
	config_get uuid config uuid
	config_get notify_interval config notify_interval
	config_get presentation_url config presentation_url
	config_get upnp_lease_file config upnp_lease_file
	config_get clean_ruleset_threshold config clean_ruleset_threshold
	config_get clean_ruleset_interval config clean_ruleset_interval
	config_get upnp_wgclp_script config upnp_wgclp_script

	local args

	. /lib/functions/network.sh

	extifcount=0

	local ifname
	network_get_device ifname ${extiface:-wan}

	if [ -n "$conffile" ]; then
		args="-f $conffile"
	else
		local tmpconf="/var/etc/miniupnpd-tch.conf"
		args="-f $tmpconf"
		mkdir -p /var/etc

		echo "ext_ifname=$ifname" >$tmpconf

		[ -n "$ifname" ] && extifcount=$((extifcount+1))

		[ -n "$extip" ] && \
			echo "ext_ip=$extip" >>$tmpconf

		local iface
		for iface in ${intiface:-lan}; do
			local device
			network_get_device device "$iface" && {
				echo "listening_ip=$device" >>$tmpconf
			}
		done

		[ "$port" != "auto" ] && \
			echo "port=$port" >>$tmpconf

		config_load "upnpd"
		upnpd_write_bool enable_natpmp 1
		upnpd_write_bool enable_upnp 1
		upnpd_write_bool secure_mode 1
		upnpd_write_bool system_uptime 1

		[ -n "$upnp_lease_file" ] && \
			echo "lease_file=$upnp_lease_file" >>$tmpconf

		[ -n "$upload" -a -n "$download" ] && {
			echo "bitrate_down=$(($download * 1024 * 8))" >>$tmpconf
			echo "bitrate_up=$(($upload * 1024 * 8))" >>$tmpconf
		}

		[ -n "${presentation_url}" ] && \
			echo "presentation_url=${presentation_url}" >>$tmpconf

		[ -n "${notify_interval}" ] && \
			echo "notify_interval=${notify_interval}" >>$tmpconf

		[ -n "${clean_ruleset_threshold}" ] && \
			echo "clean_ruleset_threshold=${clean_ruleset_threshold}" >>$tmpconf

		[ -n "${clean_ruleset_interval}" ] && \
			echo "clean_ruleset_interval=${clean_ruleset_interval}" >>$tmpconf

		[ -z "$uuid" ] && {
			uuid="$(which uuidgen)"
			[ -n "$uuid" ] && uuid="$($uuid -t)"
			[ -z "$uuid" ] && uuid="$(cat /proc/sys/kernel/random/uuid)"
			uci set upnpd.config.uuid=$uuid
			uci commit upnpd
		}

		[ "$uuid" = "nocli" ] || \
			echo "uuid=$uuid" >>$tmpconf

		[ -n "${serial_number}" ] && \
			echo "serial=${serial_number}" >>$tmpconf

		[ -n "${model_number}" ] && \
			echo "model_number=${model_number}" >>$tmpconf

		[ -n "${friendly_name}" ] && \
			echo "friendly_name=${friendly_name}" >>$tmpconf

		[ -n "${manufacturer}" ] && \
			echo "manufacturer=${manufacturer}" >>$tmpconf

		[ -n "${manufacturer_url}" ] && \
			echo "manufacturer_url=${manufacturer_url}" >>$tmpconf

		[ -n "${model_name}" ] && \
			echo "model_name=${model_name}" >>$tmpconf

		[ -n "${model_description}" ] && \
			echo "model_description=${model_description}" >>$tmpconf

		[ -n "${model_url}" ] && \
			echo "model_url=${model_url}" >>$tmpconf

		[ -n "${upnp_wgclp_script}" ] && \
			echo "upnp_wgclp_script=${upnp_wgclp_script}" >>$tmpconf

	    config_foreach conf_rule_add_extiface extiface_rule "$tmpconf"
	    config_foreach conf_rule_add perm_rule "$tmpconf"
	fi


	if [ "$extifcount" -gt "0" ]; then
		# start firewall
		iptables -L MINIUPNPD >/dev/null 2>/dev/null || fw3 reload

		if [ "$datamodel_version" == "igdv1" ]; then
			service_upnp="/usr/sbin/miniupnpd-igdv1"
		else
			service_upnp="/usr/sbin/miniupnpd-igdv2"
		fi

		if [ "$logging" = "1" ]; then
			SERVICE_DAEMONIZE=1 \
			service_start $service_upnp $args -d
		else
			SERVICE_DAEMONIZE= \
			service_start $service_upnp $args
		fi
	else
		logger -t "upnp daemon" "external interface(s) not found, not starting"
	fi
}

stop() {
	service_stop /usr/sbin/miniupnpd-igdv1
	service_stop /usr/sbin/miniupnpd-igdv2

	iptables -t nat -F MINIUPNPD 2>/dev/null
	iptables -t filter -F MINIUPNPD 2>/dev/null
}
