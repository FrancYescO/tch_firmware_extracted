#!/bin/sh /etc/rc.common

#Start After the Hostapd so that Other Agents can start communication
PROCD_DEBUG=1
USE_PROCD=1
START=95

SERVICE_PID_FILE=/var/run/airiq-service.pid
CTRL_PID_FILE=/var/run/airiq-controller.pid

start_service() {
  config_load airiq

  ## Check mandatory options
  config_get_bool airiq_ctrl_enabled controller enabled
  if [ -z "$airiq_ctrl_enabled" ] || [ $airiq_ctrl_enabled -eq 0 ] ; then
      logger -t airiq "airiq controller is disabled"
      return 0
  fi

  config_get airiq_ctrl_interface controller interface
  if [ -z $airiq_ctrl_interface ] ; then
      logger -t airiq "airiq controller need set monitor interface"
      return 0
  fi

  ## Check wifi state, waiting enable
  wifi_device=`uci get wireless.$airiq_ctrl_interface.device 2>/dev/null`
  wifi_state=`uci get wireless.$wifi_device.state 2>/dev/null`
  if [ $wifi_state -eq 0 ]; then
    {
      logger -t airiq "Warning: wifi is disabled, delay to start AirIQ controller."
      while [ $wifi_state -eq 0 ]; do
        sleep 2
        wifi_state=`uci get wireless.$wifi_device.state 2>/dev/null`
      done
      sleep 1
    } && start&
    exit 0
  else
    start_process
  fi
}

start_process() {
  echo "AirIQ Controller Start" > /dev/console

  config_get airiq_ctrl_tracelevel controller trace_level '2'
  config_get airiq_ctrl_duration controller duration '900'
  config_get airiq_ctrl_dwell_time controller dwell_time '1000'
  config_get airiq_ctrl_capture_time controller capture_time '0'
  config_get airiq_ctrl_capture_intvl controller capture_interval '150'
  config_get airiq_ctrl_force_radio controller force_radio '0'
  config_get airiq_ctrl_scan_ch controller scan_channel '0'
  config_get airiq_ctrl_home_ch controller home_channel '0'
  config_get airiq_ctrl_mon_dur controller monitor_duration '15'
  config_get airiq_ctrl_cache_dur controller cache_duration '15'
  config_get airiq_ctrl_allowed_channels controller allowed_channels

  procd_open_instance airiq_service
  procd_set_param command /usr/sbin/airiq_service
  procd_append_param command -pfs /usr/sbin/flash_policy.xml
  procd_set_param pidfile $SERVICE_PID_FILE
  procd_close_instance

  procd_open_instance airiq-controller
  procd_set_param command /usr/bin/airiq-controller -i $airiq_ctrl_interface
  procd_set_param respawn 3600 5 0
  procd_append_param command -d $airiq_ctrl_dwell_time
  procd_append_param command -c $airiq_ctrl_capture_time
  procd_append_param command -int $airiq_ctrl_capture_intvl
  procd_append_param command -t $airiq_ctrl_tracelevel
  procd_append_param command -dur $airiq_ctrl_duration
  if [ $airiq_ctrl_force_radio -eq 1 ] ; then
      procd_append_param command -b
  elif [ $airiq_ctrl_force_radio -eq 2 ] ; then
      procd_append_param command -a
  fi
  if [ $airiq_ctrl_scan_ch -ne 0 ] ; then
      procd_append_param command -ch $airiq_ctrl_scan_ch
  fi
  if [ $airiq_ctrl_home_ch -ne 0 ] ; then
      procd_append_param command -home $airiq_ctrl_home_ch
  fi

  channel_count=$(echo $airiq_ctrl_allowed_channels | wc -w 2>/dev/null)
  if [ $channel_count -eq 0 ]; then
     chan_list_2G=$(ubus call wireless.radio get '{"name": "radio_2G"}' | grep allowed_channels 2>/dev/null)
     chan_list_5G=$(ubus call wireless.radio get '{"name": "radio_5G"}' | grep allowed_channels 2>/dev/null)
     airiq_ctrl_allowed_channels=$(echo $chan_list_2G $chan_list_5G | sed "s/[^0-9 ]//g")
     channel_count=$(echo $airiq_ctrl_allowed_channels | wc -w 2>/dev/null)
  fi
  if [ $channel_count -ne 0 ]; then
     procd_append_param command -cl $airiq_ctrl_allowed_channels
  fi

  procd_set_param limits core="unlimited"
  procd_set_param pidfile $CTRL_PID_FILE
  procd_close_instance
}
