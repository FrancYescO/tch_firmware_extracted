#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1
LOGTAG="ngwfdd"

start_service_instance() {
    procd_open_instance "$1"
    procd_set_param command "$@"
    procd_set_param respawn
    procd_set_param stderr 1
    procd_close_instance
}

set_url() {
    local ACTION_DEFAULT=$(uci_get system @$1[0] action_default '')
    local ACTION=$(uci_get system @$1[0] action '')

    if [ -z "${ACTION_DEFAULT}" -a -n "${ACTION}" ]; then
        uci_set system @$1[0] action_default ${ACTION}
    fi
    uci_set system @$1[0] url "$2"
    uci_set system @$1[0] action upload
    uci_commit system @$1[0]
}

restore_url() {
    local ACTION_DEFAULT=$(uci_get system @$1[0] action_default '')
    if [ -n "${ACTION_DEFAULT}" ]; then
        uci_set system @$1[0] action ${ACTION_DEFAULT}
        uci_set system @$1[0] action_default ''
    fi
    uci_set system @$1[0] url ''
    uci_commit system @$1[0]
}

start_service() {
    . $IPKG_INSTROOT/lib/functions.sh

    config_load ngwfdd

    local ENABLE STORED_VERSION BASE_URL FIFO_DIR CORE_URL SERIAL_CFG SERIAL BOARD_CFG BOARD VERSION_CFG VERSION SERVICE FIFO_NAME

    config_get_bool ENABLE config enable 0
    if [ "${ENABLE}" != "1" ]; then
        logger -t "$LOGTAG" "Field Diagnostics Daemon disabled"
        return 0
    fi

    if [ ! -x /usr/share/ngwfdd ] ; then
        return 1
    fi

    local OWN_VERSION="$(opkg info ngwfdd | grep Version | cut -d: -f2 | tr -d ' ')"
    config_get STORED_VERSION config ngwfdd_version
    if [ "${OWN_VERSION}" != "${STORED_VERSION}" ]; then
        uci_set ngwfdd config ngwfdd_version "${OWN_VERSION}"
        uci_commit ngwfdd config
    fi

    config_get BASE_URL config base_url
    if [ -z "${BASE_URL}" ]; then
        logger -t "$LOGTAG" "ngwfdd.config.base_url is not configured properly = '${BASE_URL}'"
        return 1
    fi

    config_get FIFO_DIR config fifo_dir '/tmp/gwfd'
    if ! mkdir -p "${FIFO_DIR}"; then
        logger -t "$LOGTAG" "Invalid fifo directory 'ngwfdd.config.fifo_dir = ${FIFO_DIR}'"
        return 1
    fi

    config_get CORE_URL config core_url
    #If a coredump URL is set, we will overwrite the default system url
    if [ -n "${CORE_URL}" ]; then
        set_url "coredump" "${CORE_URL}"
        set_url "kernel_crash" "${CORE_URL}"
    fi

    config_get SERIAL_CFG config serial_nr
    local SERIAL="$(uci_get env rip factory_id)$(uci_get env rip serial)"
    if [ -z "${SERIAL_CFG}" ] || [ "${SERIAL_CFG}" != "${SERIAL}" ]; then
        uci_set ngwfdd config serial_nr "${SERIAL}"
        uci_commit ngwfdd config
    fi

    config_get BOARD_CFG config board_name
    BOARD="$(uci_get env rip board_mnemonic)"
    if [ -z "${BOARD_CFG}" ] || [ "${BOARD_CFG}" != "${BOARD}" ]; then
        uci_set ngwfdd config board_name "${BOARD}"
        uci_commit ngwfdd config
    fi

    config_get VERSION_CFG config firmware_version
    VERSION="$(uci_get version @version[0] version | cut -d- -f1)"
    if [ -z "${VERSION_CFG}" ] || [ "${VERSION_CFG}" != "${VERSION}" ]; then
        uci_set ngwfdd config firmware_version "${VERSION}"
        uci_commit ngwfdd config
    fi

    for SERVICE in /usr/share/ngwfdd/mod_*.lua; do
        FIFO_NAME=$(basename "${SERVICE}" .lua | cut -c5-)
        FIFO_NAME="${FIFO_DIR}/${FIFO_NAME}"
        if [ ! -p "${FIFO_NAME}" ]; then
            rm -rf "${FIFO_NAME}"
            mkfifo "${FIFO_NAME}"
        fi
        logger -t "$LOGTAG" "Starting ${SERVICE} service"
        start_service_instance "${SERVICE}" "${FIFO_NAME}"
    done

    logger -t "$LOGTAG" "Starting ngwfdd"
    start_service_instance /usr/bin/ngwfdd
}

stop_service() {
    local FIFO_DIR="$(uci_get ngwfdd config fifo_dir '/tmp/gwfd')"
    for SERVICE in /usr/share/ngwfdd/*.lua; do
        local SERVICE_PID="$(pgrep -f -n "$SERVICE")"
        if [ -n "$SERVICE_PID" ]; then
            local CHILD_PIDS="$(pgrep -P "$SERVICE_PID")"
            for CPID in $CHILD_PIDS; do
                local GRANDCHILD_PIDS="$(pgrep -P "$CPID")"
                for GCPID in $GRANDCHILD_PIDS; do
                    logger -t "$LOGTAG" "Killing grandchild process $GCPID"
                    kill "$GCPID"
                done
                logger -t "$LOGTAG" "Killing child process $CPID"
                kill "$CPID"
            done
        fi
        local FIFO_NAME="$(basename "${SERVICE}" .lua | cut -c5-)"
        rm -f "${FIFO_DIR}/${FIFO_NAME}"
    done
    #Remove coredump URL and action
    restore_url "coredump"
    restore_url "kernel_crash"
}
