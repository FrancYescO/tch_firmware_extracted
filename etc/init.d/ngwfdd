#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1
LOGTAG="ngwfdd"

start_service_instance() {
    local SERVICE="$1"
    if [ "$SERVICE" = "pgroup" ]; then
      SERVICE="$2"
    fi
    procd_open_instance "${SERVICE}"
    procd_set_param command "$@"
    procd_set_param respawn
    procd_set_param stderr 1
    procd_close_instance
}

set_url() {
    local ACTION_DEFAULT=$(uci_get system @$1[0] action_default '')
    local ACTION=$(uci_get system @$1[0] action '')

    if [ -z "${ACTION_DEFAULT}" -a -n "${ACTION}" ]; then
        uci_set system @$1[0] action_default ${ACTION}
    fi
    uci_set system @$1[0] url "$2"
    uci_set system @$1[0] action upload
    uci_commit system @$1[0]
}

add_custom_http_header() {
  local HDR="$1"
  local config="$2"
  echo "header = $HDR" >>$config
}

create_config() {
  local config="$1"
  local URL
  config_get URL config base_url
  if [ -z "${URL}" ]; then
      logger -t "$LOGTAG" "ngwfdd.config.base_url is not configured properly = '${URL}'"
      return 1
  fi

  local FIFO_DIR
  config_get FIFO_DIR config fifo_dir '/tmp/gwfd'
  if ! mkdir -p "${FIFO_DIR}"; then
      logger -t "$LOGTAG" "Invalid fifo directory 'ngwfdd.config.fifo_dir = ${FIFO_DIR}'"
      return 1
  fi

  echo "base_url = $URL" > $config
  echo "fifo_dir = $FIFO_DIR" >> $config

  local REQPATH
  config_get REQPATH config url_path
  [ -n "$REQPATH" ] && echo "url_path = $REQPATH" >>$config
  config_list_foreach config headers add_custom_http_header "$config"

  local FLUSH_SIZE
  config_get FLUSH_SIZE config flush_size 100
  echo "flush_size = $FLUSH_SIZE" >> $config

  local FLUSH_INTERVAL
  config_get FLUSH_INTERVAL config flush_interval 10
  echo "flush_interval = $FLUSH_INTERVAL" >> $config

  local TAG
  config_get TAG config tag
  [ -n "$TAG" ] && echo "tag = $TAG" >> $config

  local SERIAL="$(uci_get env rip factory_id)$(uci_get env rip serial)"
  echo "serial_nr = $SERIAL" >> $config

  local BOARD="$(uci_get env rip board_mnemonic)"
  echo "board_name = $BOARD" >> $config

  local VERSION="$(uci_get version @version[0] version | cut -d- -f1)"
  echo "firmware_version = $VERSION" >> $config

  echo $FIFO_DIR
}

create_piddir() {
    local PIDDIR=/var/run/ngwfdd
    mkdir -p $PIDDIR
    echo $PIDDIR
}

start_collectors() {
    local DIR="$1"
    local FIFO_DIR="$2"
    local DEFAULT_ENABLE=${3:-1}
    local PIDDIR=$(create_piddir)

    local SERVICE FIFO MODULE PIDFILE INTERVAL

    for SERVICE in $DIR/mod_*.lua; do
        if [ -x "${SERVICE}" ]; then
            MODULE=$(basename "${SERVICE}" .lua | cut -d_ -f2-)
            config_get_bool ENABLE enabled ${MODULE} ${DEFAULT_ENABLE}
            config_get INTERVAL interval ${MODULE} none
            if [ "${ENABLE}" != "0" ]; then
                FIFO="${FIFO_DIR}/${MODULE}"
                if [ ! -p "${FIFO}" ]; then
                    rm -rf "${FIFO}"
                    mkfifo "${FIFO}"
                fi
                PIDFILE=$PIDDIR/$MODULE
                logger -t "$LOGTAG" "Starting ${SERVICE} service"
                start_service_instance pgroup "${SERVICE}" "$PIDFILE" "${FIFO}" "${INTERVAL}"
            fi
        fi
    done
}

stop_collectors() {
    local DIR="$1"
    local FIFO_DIR="$2"
    local PIDDIR=$(create_piddir)

    local SERVICE MODULE PIDFILE PID
    for SERVICE in $DIR/mod_*.lua; do
        MODULE=$(basename "${SERVICE}" .lua | cut -d_ -f2)
        PIDFILE=$PIDDIR/$MODULE
        PID=$(cat $PIDFILE 2>/dev/null)
        [ -n "${PID}" ] && kill -TERM -${PID}
        FIFO=${FIFO_DIR}/${MODULE}
        rm -rf $FIFO
        rm -rf $PIDFILE
    done
}

start_service() {
    local CONFIG=/var/run/ngwfdd.config
    mkdir -p $(dirname $CONFIG)

    /usr/lib/ngwfdd/sanitize_config
    config_load ngwfdd

    local ENABLE
    config_get_bool ENABLE config enable 0
    if [ "${ENABLE}" != "1" ]; then
        logger -t "$LOGTAG" "Field Diagnostics Daemon disabled"
        return 0
    fi

    if [ ! -x /usr/share/ngwfdd ] ; then
        logger -t "${LOGTAG}" "Field Diagnostics Deamon not found"
        return 1
    fi

    local FIFO_DIR
    FIFO_DIR=$(create_config $CONFIG) || return 1

    config_get CORE_URL config core_url
    #If a coredump URL is set, we will overwrite the default system url
    if [ -n "${CORE_URL}" ]; then
        set_url "coredump" "${CORE_URL}"
        set_url "kernel_crash" "${CORE_URL}"
    fi

    start_collectors /usr/share/ngwfdd $FIFO_DIR 1
    start_collectors /opt/usr/share/ngwfdd $FIFO_DIR 0

    logger -t "$LOGTAG" "Starting ngwfdd"
    start_service_instance /usr/bin/ngwfdd --config $CONFIG --pidfile /var/run/ngwfdd.pid
}

stop_service() {
    local FIFO_DIR="$(uci_get ngwfdd config fifo_dir '/tmp/gwfd')"
    stop_collectors /usr/share/ngwfdd $FIFO_DIR
    stop_collectors /opt/usr/share/ngwfdd $FIFO_DIR
    rm /var/run/ngwfdd.pid
}
