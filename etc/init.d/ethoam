#!/bin/sh /etc/rc.common

START=50
USE_PROCD=1
EXTRA_COMMANDS="ifadd_event"

check_driver_loaded()
{
  lsmod | grep -q nciTMSkmod
}

load_driver()
{
  check_driver_loaded || insmod nciTMSkmod
}

unload_driver()
{
  check_driver_loaded && rmmod nciTMSkmod
}

#tmsctl 1731/1731-2 start -i <ifname> -a <meg> [-l <megLevel>] -m <local_mepId> [-v <vlan>] [-s ccm [-t <CCMinterval>]] [-r <remote_mepId>]
start_tmsctl_1731() #sectionname
{
  local section="$1"
  local tmsctltype="$2"
  local ifname="$3"
  local meg
  local megLevel
  local mepId
  local vlan
  local ccm
  local CCMinterval
  local cmdflags
  config_get meg $section "meg" "MEG1"
  if [ -z "$meg" ]; then
    logger -t ethoam "Required parameter meg missing from $tmsctltype section $section!"
    return 0
  fi
  cmdflags="-i $ifname -a $meg"
  config_get megLevel $section "megLevel"
  if [ -n "$megLevel" ]; then
    cmdflags="$cmdflags -l $megLevel"
  fi
  config_get mepId $section "mepId"
  if [ -z "$mepId" ]; then
    logger -t ethoam "Required parameter mepId missing from $tmsctltype section $section!"
    return 0
  fi
  cmdflags="$cmdflags -m $mepId"
  config_get vlan $section "vlan"
  if [ -n "$vlan" ]; then
    cmdflags="$cmdflags -v $vlan"
  fi
  config_get ccm $section "ccm"
  if [ -n "$ccm" ] && [ "$ccm" -eq "1" ]; then
    cmdflags="$cmdflags -s ccm"
    config_get CCMinterval $section "CCMinterval"
    if [ -n "$CCMinterval" ]; then
      cmdflags="$cmdflags -t $CCMinterval"
    fi
  fi
  logger -t ethoam "Starting: /usr/bin/tmsctl $tmsctltype start $cmdflags"
  /usr/bin/tmsctl $tmsctltype start $cmdflags
}

#tmsctl 3ah start -i <ifname> -m <oamID> -f <features> -e
start_tmsctl_3ah() #sectionname
{
  local section="$1"
  local tmsctltype="$2"
  local ifname="$3"
  local oamID
  local features
  config_get oamID $section "oamID"
  if [ -z "$oamID" ]; then
    logger -t ethoam "Required parameter oamID missing from $tmsctltype section $section!"
    return 0
  fi
  config_get features $section "features"
  if [ -z "$features" ]; then
    logger -t ethoam "Required parameter features missing from $tmsctltype section $section!"
    return 0
  fi
  logger -t ethoam "Starting: /usr/bin/tmsctl $tmsctltype start -i $ifname -m $oamID -f $features -e"
  /usr/bin/tmsctl $tmsctltype start -i $ifname -m $oamID -f $features -e
}

#tmsctl 1ag/1ag-2 start -i <ifname> -d <md> [-l <mdLevel>] -a <ma> -m <local_mepId> [-v <vlan>] [-s ccm [-t <CCMinterval>]] [-r <remote_mepId>]
start_tmsctl_1ag()
{
  local section="$1"
  local tmsctltype="$2"
  local ifname="$3"
  local md
  local mdLevel
  local ma
  local local_mepId
  local vlan
  local ccm
  local CCMinterval
  local remote_mepId
  local cmdflags
  config_get md $section "md"
  if [ -z "$md" ]; then
    logger -t ethoam "Required parameter md missing from $tmsctltype section $section!"
    return 0
  fi
  cmdflags="-i $ifname -d $md"
  config_get mdLevel $section "mdLevel"
  if [ -n "$mdLevel" ]; then
    cmdflags="$cmdflags -l $mdLevel"
  fi
  config_get ma $section "ma"
  if [ -z "$ma" ]; then
    logger -t ethoam "Required parameter ma missing from $tmsctltype section $section!"
    return 0
  fi
  config_get local_mepId $section "local_mepId"
  if [ -z "$local_mepId" ]; then
    logger -t ethoam "Required parameter local_mepId missing from $tmsctltype section $section!"
    return 0
  fi
  cmdflags="$cmdflags -a $ma -m $local_mepId"
  config_get vlan $section "vlan"
  if [ -n "$vlan" ]; then
    cmdflags="$cmdflags -v $vlan"
  fi
  config_get ccm $section "ccm"
  if [ -n "$ccm" ] && [ "$ccm" -eq "1" ]; then
    cmdflags="$cmdflags -s ccm"
    config_get CCMinterval $section "CCMinterval"
    if [ -n "$CCMinterval" ]; then
      cmdflags="$cmdflags -t $CCMinterval"
    fi
  fi
  config_get remote_mepId $section "remote_mepId"
  if [ -n "$remote_mepId" ]; then
    cmdflags="$cmdflags -r $remote_mepId"
  fi
  logger -t ethoam "Starting: /usr/bin/tmsctl $tmsctltype start $cmdflags"
  /usr/bin/tmsctl $tmsctltype start $cmdflags
}

start_tmsctl() #sectionname
{
  local section="$1"
  local tmsctl_type
  local ifname
  config_get tmsctl_type $section "type" "1731"
  config_get ifname $section "ifname"
  if [ -z "$tmsctl_type" ]; then
    logger -t ethoam "Required parameter type missing from section $section!"
    return 0
  fi
  if [ -z "$ifname" ]; then
    logger -t ethoam "Required parameter ifname missing from section $section!"
    return 0
  fi
  if [ -n "$ONLY_IFNAME" -a "$ifname" != "$ONLY_IFNAME" ]; then
    return 0
  fi
  if [ "$tmsctl_type" = "1731" -o "$tmsctl_type" = "1731-2" ]; then
    start_tmsctl_1731 "$section" "$tmsctl_type" "$ifname"
  elif [ "$tmsctl_type" = "3ah" ]; then
    start_tmsctl_3ah "$section" "$tmsctl_type" "$ifname"
  elif [ "$tmsctl_type" = "1ag" -o "$tmsctl_type" = "1ag-2" ]; then
    start_tmsctl_1ag "$section" "$tmsctl_type" "$ifname"
  else
    return
  fi
  eval UNCONFIGURED_TYPES=\${UNCONFIGURED_TYPES/ $tmsctl_type}
}

stop_tmsctl_types() #types
{
  local tmsctl_type
  for tmsctl_type in $@; do
    logger -t ethoam "Stopping: /usr/bin/tmsctl $tmsctl_type stop"
    /usr/bin/tmsctl $tmsctl_type stop
  done
}

start_service()
{
  local UNCONFIGURED_TYPES=" 1731 1731-2 3ah 1ag 1ag-2"

  config_load "ethoam"

  # config_get_bool <variable> <section> <option> [<default>]
  config_get_bool ethoam_enabled global enable 1
  if [ "$ethoam_enabled" = "1" ]; then
    logger -t ethoam "Starting tmsctl"
    awk '/MemFree/ {if ($2 <20480)  { print "3" >"/proc/sys/vm/drop_caches"} }' /proc/meminfo
    load_driver
    if [ ! -c /dev/tms ]; then
      logger -t ethoam "Creating /dev/tms"
      rm -f /dev/tms  
      mknod -m 777 /dev/tms c 250 0
    fi
    # config_list_foreach <section> <option> <function>
    config_list_foreach global configurations start_tmsctl
  else
    unload_driver
  fi

  check_driver_loaded && stop_tmsctl_types $UNCONFIGURED_TYPES
}

ifadd_event()
{
  local ONLY_IFNAME=$1

  config_load "ethoam"

  # config_get_bool <variable> <section> <option> [<default>]
  config_get_bool ethoam_enabled global enable 1
  if [ "$ethoam_enabled" = "1" ] && check_driver_loaded ; then
    config_list_foreach global configurations start_tmsctl
  fi
}

stop_service()
{
  if check_driver_loaded ; then
    stop_tmsctl_types 1731 1731-2 3ah 1ag 1ag-2
    unload_driver
  fi
}

service_triggers()
{
  procd_add_reload_trigger "ethoam"
}
