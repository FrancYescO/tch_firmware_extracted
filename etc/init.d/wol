#!/bin/sh /etc/rc.common

START=70
STOP=30

USE_PROCD=1
PROG=/usr/bin/wol
NAME=wol
EXTRA_COMMANDS="wakeup"
EXTRA_HELP="        wakeup  Wake up one or more targets"

validate_section_proxy()
{
	uci_validate_section ${NAME} proxy "${1}" \
		'enable:bool:1' \
		'verbose:bool:1' \
		'password:macaddr' \
		'src_intf:string' \
		'src_port:port:40000' \
		'dest_intf:string:lan' \
		'dest_ip:cidr4:255.255.255.255' \
		'dest_port:port:40000'
}

wol_proxy_firewall_setup() {
	local name="${1}"
	local zone="${2}"
	local src_port="${3}"
	local src_ip="${4}"

	procd_open_data

	json_add_array firewall

	if [ "${zone}" == "wan" ] ; then
		# Put exception to exclude this service from DMZ rules/port forwarding rules
		json_add_object ""
		json_add_string type redirect
		json_add_string src "${zone}"
		json_add_string family ipv4
		json_add_string proto udp
		json_add_string src_dport "${src_port}"
		json_add_string dest_ip "${src_ip}"
		json_add_string reflection 0
		json_add_string target DNAT
		json_close_object
	fi

	# Accept magic packets received on this zone
	json_add_object ""
	json_add_string type rule
	json_add_string src "${zone}"
	json_add_string family ipv4
	json_add_string proto udp
	json_add_string dest_port "${src_port}"
	json_add_string dest_ip "${src_ip}"
	json_add_string target ACCEPT
	json_close_object

	json_close_array

	procd_close_data
}

wol_proxy() {
	local proxy="${1}"
	local enable verbose password \
		src_intf src_port dest_intf dest_ip dest_port

	validate_section_proxy "${proxy}" || {
		echo "${proxy}: validation failed"
		return 1
	}

	[ $enable -eq 0 ] && return 0

	local src_ipaddr dest_dev
	if [ -n "${src_intf}" ] && ! network_get_ipaddr src_ipaddr "${src_intf}"; then
		echo "${proxy}: src_intf has no suitable ip address"
		return 1
	fi
	if ! network_get_device dest_dev $dest_intf; then
		echo "${proxy}: dest_intf interface not found"
		return 1
	fi

	# Get firewall src_intf zone; use wan if not specified
	local zone
	[ -n "${src_intf}" ] && zone=$(fw3 -q network "$src_intf")
	[ -z "${zone}" ] && zone="wan"

	if [ "${zone}" == "wan" ] ; then
		# Reserve this wan service port
		uci_set_state system "wol_proxy_${proxy}" "" wan-service
		uci_set_state system "wol_proxy_${proxy}" proto udp
		uci_set_state system "wol_proxy_${proxy}" ports "${src_port}"
	fi

	procd_open_instance
	procd_set_param respawn
	procd_set_param command "$PROG"
	[ "${verbose}" -eq 1 ] && procd_append_param command -v
	[ -n "${password}" ] && procd_append_param command --passwd=${password}
	[ -n "${src_intf}" ] && \
		procd_append_param command -s ${src_ipaddr}:${src_port} || \
		procd_append_param command -s ${src_port}
	procd_append_param command -i ${dest_dev} -h ${dest_ip} -p ${dest_port}
	procd_set_param stdout 1
	procd_set_param stderr 1
	wol_proxy_firewall_setup "${proxy}" "${zone}" "${src_port}" "${src_ipaddr}"
	procd_close_instance
}

validate_section_target()
{
	uci_validate_section ${NAME} target "${1}" \
		'enable:bool:1' \
		'verbose:bool:1' \
		'mac:macaddr' \
		'password:macaddr' \
		'dest_intf:string:lan' \
		'dest_ip:cidr4:255.255.255.255' \
		'dest_port:port:40000' \
		'wakeup_state:string'
}

wol_target_set_state() {
	local target="${1}"
	local result="${2}"
	uci_set "${NAME}" "${target}" "wakeup_state" "${result}"
	uci_set "${NAME}" "${target}" "wakeup_timestamp" $(date +%s)
	uci_commit "${NAME}"
}

wol_target() {
	local target="${1}"
	local enable verbose mac password dest_intf dest_ip dest_port \
		wakeup_state wakeup_requested_targets

	if [ "${2}" == "wakeup_state == Requested" ]; then
		wakeup_requested_targets=1
	elif [ -n "${2}" ]; then
		local t found
		for t in ${2}; do
			if [ "${t}" == "${target}" ]; then
				found=yes
				break
			fi
		done
		[ -z "${found}" ] && return 0
	fi

	validate_section_target "${target}" || {
		echo "$target: validation failed"
		return 1
	}

	[ "${enable}" -eq 0 ] && return 0
	[ "${wakeup_requested_targets}" -a "${wakeup_state}" != "Requested" ] && return 0

	local dest_dev
	if ! network_get_device dest_dev $dest_intf; then
		echo "${target}: dest_intf interface not found"
		wol_target_set_state "${target}" "Error"
		return 1
	fi
	if [ -z "$mac" ] ; then
		echo "${target}: unspecified mac address"
		wol_target_set_state "${target}" "Error"
		return 1
	fi

	local cmdline="${PROG}"
	[ "${verbose}" -eq 1 ] && cmdline="${cmdline} -v"
	[ -n "${password}" ] && cmdline="${cmdline} --passwd=${password}"
	cmdline="${cmdline} -i ${dest_dev} -h ${dest_ip} -p ${dest_port} ${mac}"

	local result
	echo "Waking target ${target} ..."
	${cmdline} && \
		result=Complete ||
		result=Error
	wol_target_set_state "${target}" "${result}"
}

wakeup()
{
	. /lib/functions/network.sh

	config_load "${NAME}"
	config_foreach wol_target target "$*"
}

start_service()
{
	. /lib/functions/network.sh

	# Remove all wol_proxy_* wan-service sections from system
	config_load "system"
	flush_wol_proxy_wan_services() {
		[ "${1}" == "${1#wol_proxy_}" ] && return 0
		uci_revert_state system "${1}"
	}
	config_foreach flush_wol_proxy_wan_services wan-service

	config_load "${NAME}"
	config_foreach wol_proxy proxy

	# Wake up all targets with wakeup_state is set to Requested
	config_foreach wol_target target "wakeup_state == Requested"

	service_started() {
		procd_set_config_changed firewall
	}
}

stop_service() {
	procd_set_config_changed firewall
}

load_interfaces()
{
	config_get enable "$1" enable 1
	[ "${enable}" = "1" ] || return 0

	config_get interface "$1" src_intf
	listen_interfaces=" ${interface} ${listen_interfaces}"
}

service_triggers()
{
	procd_add_reload_trigger "${NAME}"

	local listen_interfaces
	config_load "${NAME}"
	config_foreach load_interfaces proxy

	if [ -n "${listen_interfaces}" ]; then
		local intf
		for intf in $listen_interfaces ; do
			procd_add_interface_trigger "interface.*" $intf /etc/init.d/wol reload
		done
	fi

	procd_add_validation validate_section_proxy
}
