#!/bin/sh /etc/rc.common

#Start After the Hostapd so that Other Agents can start communication
PROCD_DEBUG=1
USE_PROCD=1
START=99

PID_FILE=/var/run/multiap_agent.pid
RUNNING_FILE=/var/run/mapd_running

override=0

get_if_data()
{
## get device name and mode for multiap configured wireless interfaces
for i in $(echo $interfaces | tr "," "\n")
do
  if [ "$i" = "${1}" ]; then
     config_get md ${1} mode
     config_get dev ${1} device
     modes="$modes${1}:$md,"
     devs="$devs${1}:$dev,"
  fi
done 
}

update_1905_interface_list() {
  # Get the interface list from bridge
  br_if_list=$(echo `ls /sys/class/net/br-lan/brif` | sed 's/[ \t]+*/,/g')

  # Get the bss list from UCI
  bss_if_list=`uci get multiap.agent.bss_list`

  #Merge the br interface list and bss interface list
  if_list=`printf "$br_if_list,$bss_if_list"`

  # Add the missing interfaces to uci_if_list from if_list
  for iface in $(echo $if_list | tr "," "\n")
  do
    ## Skip wds interfaces
    eval "echo \$iface | grep -q \"wds\""
    if [ "$?" -eq "0" ]; then
      continue
    fi

    #Removing any whitespace or tabs in uci list
    uci_if_list=$(echo $uci_if_list| tr -d '[ \t\r\n\v\f]')

    # Add Missing interfaces
    eval "echo \$uci_if_list, | grep -q $iface,"
    if [ "$?" -eq "1" ]; then
      if [ -z "$uci_if_list" ] ; then
        uci_if_list="$iface"
      else
        uci_if_list=`printf "$uci_if_list,$iface"`
      fi
    fi
  done

  # Add wds* as a special interface for once
  eval "echo \$uci_if_list | grep -q wds*"
  if [ "$?" -eq "1" ]; then
    uci_if_list=`printf "$uci_if_list,wds*"`
  fi

  # Update the Final list of interface to UCI
  uci set multiap.al_entity.interfaces=$uci_if_list
  interfaces="$uci_if_list"
}

start_service() {

  ubus send map_agent.state '{ "status": "Booting" }'
  brctl addif br-lan wl2
  config_load multiap
  config_get_bool map_agent_enabled agent enabled
  [ -z "$map_agent_enabled" ] || [ $map_agent_enabled -eq 0 ] && return 0
  procd_open_instance
  echo "Multiap Agent Start" > /dev/console

  config_get_bool map_ctrl_enabled controller enabled

  config_get mac agent macaddress
  macaddress=`uci get env.var.local_wifi_mac`
##If local existing multiap_agent MAC is not equal to local_wifi_mac update it with the later.
  if [ "$mac" != "$macaddress" ] ; then
    uci_set "multiap" "agent" "macaddress" "$macaddress"
    uci commit
  fi

  ## Add the system interfaces to 1905 interface list
  update_1905_interface_list

  [ $map_agent_enabled -eq 1 ] && [ $map_ctrl_enabled -eq 1 ]
  ## Add "lo" interface if both ctrller, agent is enabled
  if [ "$?" -eq "0" ]; then
      eval "echo \$interfaces | grep \"lo\" | grep -v \"grep\""
      if [ "$?" -eq "1" ]; then
          interfaces=`printf "lo,$interfaces"`
          uci set multiap.al_entity.interfaces=$interfaces
          uci commit
      fi
  else
      ##Remove "lo" interface if only one map soln is present
      interfaces=`echo $interfaces | sed 's/lo,//g'`
      uci set multiap.al_entity.interfaces=$interfaces
      uci commit
  fi

  ## Get platform_int variables and set as env
  config_get wee_bhs_enabled wee_bhs enabled

  procd_set_param env MAP_AGENT_ENABLED=$map_agent_enabled
  procd_append_param env MAP_CONTROLLER_ENABLED=$map_ctrl_enabled

 ##Optionally add load config
  if [ -f /lib/multiap/multiap-agent-uci-to-procd-env ]; then
     . /lib/multiap/multiap-agent-uci-to-procd-env
  fi

  if [ -f /lib/multiap/multiap-agent-ve-uci-to-procd-env ]; then
    . /lib/multiap/multiap-agent-ve-uci-to-procd-env
  fi

  #Add rule to process the 1905 Multicast packets
  ebtables -t broute -D BROUTING -p 0x893a -d 1:80:c2:0:0:13 -j  DROP
  ebtables -t broute -I BROUTING 1 -p 0x893a -d 1:80:c2:0:0:13 -j  DROP

  ebtables -t broute -D BROUTING -p 0x893a -d $map_agent_macaddress -j  DROP
  ebtables -t broute -I BROUTING 1 -p 0x893a -d $map_agent_macaddress -j  DROP

  config_load wireless

  ## Get device name and mode from wireless
  config_foreach get_if_data wifi-iface
  
  ## Get box related info from env
  config_load env
  config_get model_name var prod_friendly_name
  len=${#model_name}
  if [ $len -ge 36 ]; then
    config_get model_name var prod_name
  fi
  config_get manufacturer_name var company_name
  config_get model_number var prod_number
  config_get serial_number var serial
  osversion=`uci get version.@version[0].version | cut -d- -f1`
  
  echo $model_name $manufacturer_name $model_number $serial_number
  echo $devs
  echo $modes
  echo $osversion
  
  procd_append_param env MAP_INTERFACES=$interfaces
  procd_append_param env MAP_MODEL_NAME=$model_name
  procd_append_param env MAP_MODEL_NUMBER=$model_number
  procd_append_param env MAP_SERIAL_NUMBER=$serial_number
  procd_append_param env MAP_MANUFACTURER_NAME=$manufacturer_name
  procd_append_param env MAP_DEV_NAMES=$devs
  procd_append_param env MAP_DEV_MODES=$modes
  procd_append_param env MAP_OS_VERSION=$osversion

  #To be removed
  if [ $override -eq 0 ] ; then
    ubus send map_agent.state '{ "status": "Awaiting_platform_init" }'
    sleep 60
    echo "Multiap Agent Start after sleep" > /dev/console
  fi

  procd_set_param command /usr/bin/multiap_agent -m ubus
  procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-10} ${respawn_retry:-10}
  procd_set_param limits core="unlimited"  # If you need to set ulimit for your process
  procd_set_param pidfile /var/run/multiap_agent.pid # write a pid file on instance start and remote it on stop
  procd_close_instance

}

restart () {
  trap '' TERM
  stop "$@"
  trap - TERM
  override=1
  rc_procd start_service "$@"
  if eval "type service_started" 2>/dev/null >/dev/null; then
    service_started
  fi
}
