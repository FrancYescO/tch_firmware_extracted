user nobody nogroup;
# DO NOT EVER change the number of worker processes!
worker_processes  1;

error_log   syslog:server=unix:/dev/log,facility=daemon,nohostname debug;

events {
    worker_connections  256;
}

http {
    access_log  off;
    server_tokens off;

    include     mime.types;

    lua_package_path ';;${prefix}lib/lua/?.lua;/www/lua/?.lua';
    lua_package_cpath '${prefix}lib/lua/?.so';

    keepalive_timeout  65;
    add_header X-Frame-Options SAMEORIGIN;
    add_header CONTENT-LANGUAGE "en";
    add_header Content-Security-Policy "default-src 'self';script-src 'self' 'unsafe-eval' 'unsafe-inline';style-src 'self' 'unsafe-inline'";
    add_header Cache-Control "public, max-age=31536000";

    init_worker_by_lua '
        local sessioncontrol = require("web.sessioncontrol")
        sessioncontrol.setManagerForPort("default", "80")
        require("web.notify_helper")
        require("statusservice").init("/www/status")
    ';
    server {
        # ipv4
        listen       80;
        listen       443 ssl;
        # ipv6
        listen       [::]:80;
        listen       [::]:443 ssl;

        ssl_certificate /etc/nginx/server.crt;
        ssl_certificate_key /etc/nginx/server.key;
        # based on https://wiki.mozilla.org/Security/Server_Side_TLS
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:!DSS;
        ssl_prefer_server_ciphers on;
        ssl_session_tickets off;

        server_name  localhost;
        root /www/docroot;
        client_body_buffer_size 64k;


        # platform/custo specific values
        include ui_server.conf;

        error_page 404 /404.html;
        location = /404.html {
            internal;
        }

        location / {
            index index.html;
            access_by_lua '
              if ngx.var.server_port~="80" then
                ngx.exit(ngx.HTTP_NOT_FOUND)
              end
            ';
        }

        location = /reload {
            content_by_lua '
              require("auth").reload()
            ';
        }

        location = /status.cgi {
            access_by_lua '
              local auth = require("auth")
              auth.auth()
              if auth.sessionRequired() then
                local mgr = require("web.sessioncontrol").getmgr()
                mgr:checkrequest()
                mgr:handleAuth()
              end
            ';
            content_by_lua '
              require("statusservice").action(ngx.req.get_uri_args(512))
            ';
        }

        location = /api {
            # We read the complete request in memory so to prevent DoS attack we
            # must limit the allowed request size.
            # For simplicity this should be the same as client_body_buffer_size so the
            # body does not get spilled into a temp file.
            client_body_buffer_size 64k;
            client_max_body_size 64k;
            content_by_lua '
              local role = require("webservice.accesscontrol_token").authenticate()
              require("webservice.api").process(role)
            ';
        }

        # additional/custom configuration
        include main_*.conf;
    }

    server {
        # ipv4
        listen 8080 tproxy;
        # ipv6
        listen [::]:8080 tproxy;

        #access_log /var/log/nginx/intercept.log;

        access_by_lua '
          require("web.intercept").process()
        ';
    }
}
