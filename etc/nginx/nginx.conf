user nobody nogroup;
# DO NOT EVER change the number of worker processes!
worker_processes  1;

error_log   syslog:server=unix:/dev/log,facility=daemon,nohostname warn;

events {
    worker_connections  256;
}

http {
    access_log  off;
    server_tokens off;

    include     mime.types;

    lua_package_path ';;${prefix}lib/lua/?.lua;/www/lua/?.lua';
    lua_package_cpath '${prefix}lib/lua/?.so';

    keepalive_timeout  65;
    add_header X-Frame-Options sameorigin always;
    add_header Content-Security-Policy "default-src 'self';script-src 'self' 'unsafe-eval' 'unsafe-inline';style-src 'self' 'unsafe-inline'";
    add_header Cache-Control "public, max-age=31536000";
    add_header x-xss-protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    init_by_lua '
        local state_dir = "/var/run/assistance"
        local cmd = string.format("if [ ! -d %s ]; then mkdir %s && chown nobody %s; fi;rm -f %s/*", state_dir, state_dir, state_dir, state_dir)
        os.execute(cmd)
    ';
    init_worker_by_lua '
        require("generic.app")
        local sessioncontrol = require("web.sessioncontrol")
        sessioncontrol.setManagerForPort("default", "80")
        sessioncontrol.setManagerForPort("default", "443")
        sessioncontrol.setManagerForPort("assistance", "9443")
    ';

    server {
        # ipv4
        listen       80;
        listen       443 ssl;
        listen       9443 ssl;

        # ipv6
        listen       [::]:80;
        listen       [::]:443 ssl;
        listen       [::]:9443 ssl;

        ssl_certificate /etc/nginx/server.crt;
        ssl_certificate_key /etc/nginx/server.key;
        ssl_certificate /etc/nginx/serverecdsa.crt;
        ssl_certificate_key /etc/nginx/serverecdsa.key;
        # based on https://wiki.mozilla.org/Security/Server_Side_TLS
        ssl_protocols TLSv1.2;
	ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;
        ssl_prefer_server_ciphers on;
        ssl_session_tickets off;

        server_name  localhost;
        root /www/docroot;
        client_body_buffer_size 64k;

        # platform/custo specific values
        include ui_server.conf;

        location = / {
            index gateway.lp;
        }

        location ^~ /css/ {
          #do nothing
        }

        location ^~ /img/ {
          #do nothing
        }

        location ^~ /font/ {
          #do nothing
        }

        location ^~ /js/ {
          #do nothing
        }

        # check the get args with auto_update param is true.
        location ^~ / {
            access_by_lua '
              require("web.assistance").enable()
              local mgr = require("web.sessioncontrol").getmgr()
              if ngx.req.get_uri_args().auto_update == "true" then
                 mgr:checkrequest(true)
              else
                 mgr:checkrequest()
              end
              mgr:handleAuth()
            ';
            content_by_lua '
              require("cards").setpath("/www/cards")
              require("web.lp").setpath("/www/cards/")
              require("web.web").process()
            ';
        }

        location = /api {
            # We read the complete request in memory so to prevent DoS attack we
            # must limit the allowed request size.
            # For simplicity this should be the same as client_body_buffer_size so the
            # body does not get spilled into a temp file.
            client_body_buffer_size 64k;
            client_max_body_size 64k;
            content_by_lua '
              local json = require("dkjson")
              local ngx = ngx
              ngx.header.content_type = "application/json"
              ngx.print(json.encode({ error = { errorcode = "403", errormessage = "This is insecure way of accessing web API. Kindly upgrade to secure mechanism" }}, {indent = true}))
            ';
        }

        # additional/custom configuration
        include main_*.conf;
    }

    server {
        listen       127.0.0.1:55555;
        server_name  127.0.0.1;
        root         /www;

        location = /ra {
            access_by_lua '
              require("web.assistance").enable()
            ';

            content_by_lua '
              require("web.reload_assistance").reload(ngx.req.get_uri_args())
          ';
        }
        location = /reloadWebUsers {
            content_by_lua '
              require("web.sessioncontrol").reloadUsers()
            ';
        }
        location = /api/reload {
          content_by_lua '
            require("webservice.accesscontrol_token").reload_config()
          ';
        }
        include loc_*.conf;
    }

    server {
        # ipv4
        listen 8080 tproxy;
        # ipv6
        listen [::]:8080 tproxy;

        root /www/docroot;

        location ^~ /css/ {
          #do nothing
        }

        location ^~ /img/ {
          #do nothing
        }

        location ^~ /font/ {
          #do nothing
        }

        location ^~ /js/ {
          #do nothing
        }

        location ^~ / {
            access_by_lua '
              require("web.web").process("/www/docroot/intercept.lp")
            ';
        }
    }

    include server_*.conf;
}
