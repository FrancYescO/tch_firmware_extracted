#!/bin/sh

# script triggered by mountd
# mountd provides environment variables ACTION, DEVICE, NAME
# f.e. ACTION=add DEVICE=sda1 NAME=USB-A1

# Source UCI and CS functions
. $IPKG_INSTROOT/lib/functions/contentsharing.sh

# Set by samba_init
MOUNTPOINT=""
SAMBACONFIGSDIR=""

# Set by cs_device_get_disk/partition/info
DISK=""
PARTITION=""
VENDOR=""
MODEL=""
START=""
SIZE=""
HASH=""

# samba_log <msg>
# Send <msg> to the logger with tag 'hotplug.d-mount-samba'.
#
samba_log () {
  local msg="${1}"
  logger -t hotplug.d-mount-samba "${msg}"
}

# samba_init
# Set MOUNTPOINT SAMBACONFIGSDIR.
#
samba_init () {
  # Retrieve samba configuration. Remove trailing slashes from paths.
  config_load samba
  config_get SAMBACONFIGSDIR samba configsdir "/var/etc/smb.auto/"
  SAMBACONFIGSDIR=$(echo "${SAMBACONFIGSDIR}" | sed 's:/*$::')
  mkdir -p "${SAMBACONFIGSDIR}"

  # Load /var/state/samba config for all future UCI manipulations.
  LOAD_STATE=1
  config_load samba

  MOUNTPOINT="${CS_MOUNTD_AUTOFS_PATH}/${DEVICE}"

  cs_get_device_disk "${DEVICE}" "DISK"
  cs_get_device_partition "${DEVICE}" "PARTITION"

  samba_log "ACTION=${ACTION} DEVICE=${DEVICE} NAME=${NAME}"
}

# samba_device_valid <device>
# Return 0 if valid, 1 otherwise.
#
samba_device_valid () {
  local device="${1}"
  if [ -z "${device}" ] ; then
    samba_log "No device specified"
    return 1
  fi

  local status=""
  cs_get_device_status "${device}" "status"
  if [ "${ACTION}" == "remove" ] && [ "${status}" == "${CS_STATUS_UNKNOWN}" ]; then
    # Disk is physically removed. Entry in mounts is deleted.
    return 0
  fi
  if [ "${status}" != "${CS_STATUS_MOUNTED}" ] ; then
    samba_log "Device ${device} not mounted (${status})"
    return 1
  fi

  return 0
}

# samba_mountpoint_chmod777
# Set permission of MOUNTPOINT to 777.
#
samba_mountpoint_chmod777 () {
  chmod 777 "${MOUNTPOINT}"
}

# samba_get_sharename <sharename>
# Set <sharename> to a value constructed out of the globals
# VENDOR MODEL PARTITION HASH.
#
samba_get_sharename () {
  local _sharename=""

  if [ -n "${VENDOR}" ] ; then
    _sharename="${_sharename}${VENDOR}_"
  fi

  if [ -n "${MODEL}" ] ; then
    _sharename="${_sharename}${MODEL}_"
  fi

  if [ -n "${PARTITION}" ] ; then
    _sharename="${_sharename}${PARTITION}_"
  fi

  if [ -n "${HASH}" ] ; then
    _sharename="${_sharename}${HASH}"
  fi

  eval ${1}="${_sharename}"
}

# samba_get_shareconfig <shareconfig>
# Set <shareconfig> to a value constructed out of the globals
# SAMBACONFIGSDIR NAME.
#
samba_get_shareconfig () {
  eval ${1}="${SAMBACONFIGSDIR}/${NAME}.conf"
}

# samba_add_share
#
samba_add_share () {
  local sharename=""
  local shareconfig=""
  local available=""
  samba_get_sharename "sharename"
  samba_get_shareconfig "shareconfig"

  # Reboot/shutdown does not cause a 'remove' ACTION. Old data for the same
  # sharename may exists. Clean it up.
  local oldsharename=""
  cs_get_device_sambaname ${DEVICE} "oldsharename"
  cs_get_samba_filesharing "available"
  if [ -n "${oldsharename}" ] ; then
    samba_log "Old share ${oldsharename}... Cleanup"
    cs_del_device_sambaconfig "${shareconfig}"
    cs_del_device_sambauci "${sharename}"
  fi

  samba_log "Add share ${sharename} (${shareconfig})"

  local filesystem=$(mount | grep -w "${DEVICE}" | awk '{print $5}')
  if [ -z "${filesystem}" ] ; then
    filesystem="unknown"
  elif [ "${filesystem}" == "ufsd" ] ; then
    filesystem="ntfs/hfs+"
  else
    : # Do nothing.
  fi

  cs_add_device_sambauci "${sharename}" "${shareconfig}" "${DEVICE}" "${filesystem}" "${MOUNTPOINT}" "${available}"
  cs_add_device_sambaconfig "${sharename}" "${shareconfig}" "${MOUNTPOINT}" "${available}"
  cs_update_sambaconfig
}

# samba_del_share
#
samba_del_share () {
  # Not possible to reconstruct sharename. At the time this script is called,
  # the device is already unmounted and VENDOR/MODEL info is not accessible
  # anymore.
  local shareconfig="${SAMBACONFIGSDIR}/${NAME}.conf"
  local sharename=""
  cs_get_device_sambaname ${DEVICE} "sharename"
  if [ -z "${sharename}" ] ; then
    samba_log "Unable to find sharename for ${DEVICE}"
    return
  fi
  samba_log "Remove share ${sharename} (${shareconfig})"

  cs_del_device_sambauci "${sharename}"
  cs_del_device_sambaconfig "${shareconfig}"
  cs_update_sambaconfig
}

# Start of execution

if [ "${ACTION}" == "add" ]; then
  samba_init
  samba_mountpoint_chmod777

  if samba_device_valid "${DEVICE}" ; then
    cs_get_device_info "${DEVICE}" "VENDOR" "MODEL" "START" "SIZE" "HASH"
    samba_log "VENDOR=${VENDOR} MODEL=${MODEL} START=${START} SIZE=${SIZE} HASH=${HASH}"
    samba_add_share
  fi

  # Device valid or not (most likely not mounted), do check if this ACTION=add
  # event was on the last device present. If so, reload/restart Samba to
  # (re)read the configuration.
  local disk=""
  cs_get_device_disk "${DEVICE}" "disk"

  if cs_is_disk_added "${disk}" ; then
    #turn on USB LED
    ubus send usb.usb_led '{"status":"on"}'

    if cs_is_samba_running ; then
      samba_log "Added disk ${disk} ... reload"
      cs_reload_samba
    else
      samba_log "Added disk ${disk} ... restart"
      cs_restart_samba
    fi
  fi
fi

if [ "${ACTION}" == "remove" ]; then
  samba_init

  if samba_device_valid "${DEVICE}" ; then
    samba_del_share
  fi

  # Device valid or not (most likely not mounted), do check if this
  # ACTION=remove event was on the last device present. If so, reload/restart
  # Samba to (re)read the configuration.
  local disk=""
  cs_get_device_disk "${DEVICE}" "disk"

  if cs_is_disk_removed "${disk}" ; then
    #turn off USB LED
    ubus send usb.usb_led '{"status":"off"}'

    if cs_is_samba_running ; then
      samba_log "Removed disk ${disk} ... reload"
      cs_reload_samba
    else
      samba_log "Removed disk ${disk} ... restart"
      cs_restart_samba
    fi
  fi
fi
