#!/bin/sh
. /lib/functions/provision.sh
#NG-78954; NG-87317
#NG-100924 Changed admin-Password not taken after a reboot

generate_salt_and_verifier() {
        local usr_section_name="${1}"
        local username="${2}"
        local password="${3}"

        if [[ -n "${username}" ]] && [[ -n "${password}" ]]; then
                local srp=$(newsrpuser -f -u "${username}" -p "${password}")
                local salt=$(echo "${srp}" | cut -f1)
                local verifier=$(echo "${srp}" | cut -f2)
                uci set "web.${usr_section_name}.srp_salt=${salt}"
                uci set "web.${usr_section_name}.srp_verifier=${verifier}"
        else
                logger "Error: Could not set ${usr_section_name} password for GUI, key or name is empty"
                exit 1
        fi
}

populate_salt_and_verifier() {
        local usr_section_name="${1}"
        local salt verifier
        config_get salt "${usr_section_name}" srp_salt
        config_get verifier "${usr_section_name}" srp_verifier

        local gak_id
        config_get gak_id "${usr_section_name}" gak_id
        # Is there a gak_id configured for this user? If so, generate salt and verifier.
        if [[ -n "${gak_id}" ]]; then
                local name
                config_get name "${usr_section_name}" name
                local key=$(get_access_key "${gak_id}")
                generate_salt_and_verifier "${usr_section_name}" "${name}" "${key}"
        fi
}

_set_key() {
	local usr="$1"
	local pw="$2"
	local name=$(uci get web.$usr.name)
	local gid=$(uci get web.$usr.gak_id)
	if [[ $pw ]] ; then
		local key=$pw
	else
		local key=$(get_access_key $gid)
	fi

	if [[ $key ]] && [[ $name ]]; then
		SRP=$(newsrpuser -f -u $name -p $key)
		SALT=$(echo $SRP | cut -d' ' -f1)
		VERIFIER=$(echo $SRP | cut -d' ' -f2)

		uci set web.$usr.srp_salt=$SALT
		uci set web.$usr.srp_verifier=$VERIFIER
		uci commit web
	else
		logger "Error: Could not set $usr password for GUI, key or name is empty"
		exit 1
	fi
}

_set_APIkey() {
	local usr="$1"
	local key=$(get_access_key)

	if [[ $key ]] && [[ $usr ]]; then
		uci set webservice.$usr.token=$key
		uci commit webservice
	else
		logger "Error: Could not set $usr password for WEBSERVICE, key or name is empty"
		exit 1
	fi
}

generate_salt_seed() {
	local sessionmgr_section_name="${1}"
	local salt_seed
	config_get salt_seed "${sessionmgr_section_name}" salt_seed

	# We only generate a new salt seed if none is present.
	if [[ -z "${salt_seed}" ]]; then
		local seed=$(hexdump -n 4 -e '"%08X" 1 "\n"' /dev/urandom)
		uci set "web.${sessionmgr_section_name}.salt_seed=${seed}"
	fi
}

NO_EXPORT=1
board=`uci get env.rip.board_mnemonic`
if [[ $board == "VCNT-3" ]] || [[ $board == "VCNT-D" ]]; then
  uci add_list web.ruleset_main.rules=easyMeshConfiguration
  uci add_list web.ruleset_main.rules=wifiExtender
  uci add_list web.ruleset_main.rules=wifiDevices
  uci set web.easyMeshConfiguration=rule
  uci set web.easyMeshConfiguration.target=/modals/easy-mesh-configuration.lp
  uci add_list web.easyMeshConfiguration.roles=admin
  uci add_list web.easyMeshConfiguration.roles=engineer
  uci add_list web.easyMeshConfiguration.roles=ispuser
  uci set web.wifiExtender=rule
  uci set web.wifiExtender.target=/modals/wifi-extender-status.lp
  uci add_list web.wifiExtender.roles=admin
  uci add_list web.wifiExtender.roles=engineer
  uci add_list web.wifiExtender.roles=ispuser
  uci set web.wifiDevices=rule
  uci set web.wifiDevices.target=/modals/wifi-devices-info.lp
  uci add_list web.wifiDevices.roles=admin
  uci add_list web.wifiDevices.roles=engineer
  uci add_list web.wifiDevices.roles=ispuser
fi
config_load web
config_foreach generate_salt_seed sessionmgr

populate_salt_and_verifier "usr_admin"

#_set_key "usr_engineer" "engineer"

_set_APIkey "user1"

#webservice config
uci show webservice >/dev/null 2>/dev/null || touch /etc/config/webservice
uci set webservice.admin=user
uci set webservice.admin.token='usr_admin'
uci set webservice.admin.token_is='web_user'
uci set webservice.admin.role='device2'
uci set webservice.device2=role
uci add_list webservice.device2.allowed_commands='get'
uci add_list webservice.device2.allowed_commands='getNextLevel'
uci add_list webservice.device2.disallowed_paths='Device.ManagementServer.Username'
uci add_list webservice.device2.disallowed_paths='Device.ManagementServer.Password'
uci add_list webservice.device2.disallowed_paths='Device.ManagementServer.ConnectionRequestUsername'
uci add_list webservice.device2.disallowed_paths='Device.ManagementServer.ConnectionRequestPassword'
uci add_list webservice.device2.disallowed_paths='Device%.PPP%.Interface%.%d+%.Username'
uci add_list webservice.device2.disallowed_paths='Device%.PPP%.Interface%.%d+%.Password'
uci add_list webservice.device2.disallowed_paths='Device%.Services%.VoiceService%.%d+%.VoiceProfile%.%d+%.Line%.%d+%.SIP%.AuthPassword'
uci add_list webservice.device2.disallowed_paths='Device%.Services%.VoiceService%.%d+%.VoiceProfile%.%d+%.SIP%.InboundAuthPassword'
uci add_list webservice.device2.disallowed_paths='Device%.Services%.X_000E50_RemoteAccess%.%d+%.Password'
uci add_list webservice.device2.disallowed_paths='Device%.Cellular%.AccessPoint%.%d+%.Password'
uci add_list webservice.device2.disallowed_paths='Device%.Cellular%.Interface%.%d+%.USIM.PIN'
uci add_list webservice.device2.disallowed_paths='Device%.DynamicDNS%.Client%.%d+%.Password'
uci add_list webservice.device2.disallowed_paths='Device%.Users%.User%.%d+%.Password'
uci add_list webservice.device2.disallowed_paths='Device%.LANConfigSecurity%.ConfigPassword'
uci add_list webservice.device2.disallowed_paths='Device%.DeviceInfo%.ProcessStatus%.Process%.%d+%.Command'
uci add_list webservice.device2.disallowed_paths='sys%.'
uci add_list webservice.device2.disallowed_paths='uci%.'
uci add_list webservice.device2.disallowed_paths='rpc%.'
uci add_list webservice.device2.disallowed_paths='InternetGatewayDevice%.'
uci set webservice.disabled=role
uci add_list webservice.disabled.disallowed_paths='.*'
uci add_list webservice.disabled.allowed_commands='none'
uci set webservice.pairing=user
uci set webservice.pairing.token='6698'
uci set webservice.pairing.token_is='optional_certificate'
uci set webservice.pairing.role='role_pairing'
uci set webservice.app=user
uci set webservice.app.token='6699'
uci set webservice.app.token_is='certificate'
uci set webservice.app.role='role_app'
uci set webservice.role_pairing=role
uci add_list webservice.role_pairing.allowed_commands='get'
uci add_list webservice.role_pairing.allowed_commands='setClientCertificate'
uci add_list webservice.role_pairing.allowed_commands='identifyMe'
uci add_list webservice.role_pairing.allowed_paths='^Device%.DeviceInfo%.SerialNumber$'
uci add_list webservice.role_pairing.allowed_paths='^Device%.DeviceInfo%.SoftwareVersion$'
uci add_list webservice.role_pairing.allowed_paths='^Device%.DeviceInfo%.HardwareVersion$'
uci add_list webservice.role_pairing.allowed_paths='^Device%.DeviceInfo%.ModelName$'
uci set webservice.role_app=role
uci add_list webservice.role_app.allowed_commands='get'
uci add_list webservice.role_app.allowed_commands='getNextLevel'
uci add_list webservice.role_app.disallowed_paths='Device.ManagementServer.Username'
uci add_list webservice.role_app.disallowed_paths='Device.ManagementServer.Password'
uci add_list webservice.role_app.disallowed_paths='Device.ManagementServer.ConnectionRequestUsername'
uci add_list webservice.role_app.disallowed_paths='Device.ManagementServer.ConnectionRequestPassword'
uci add_list webservice.role_app.disallowed_paths='Device%.PPP%.Interface%.%d%.Username'
uci add_list webservice.role_app.disallowed_paths='Device%.PPP%.Interface%.%d%.Password'
uci add_list webservice.role_app.disallowed_paths='Device%.Services%.VoiceService%.%d%.VoiceProfile%.%d+%.Line%.%d+%.SIP%.AuthPassword'
uci add_list webservice.role_app.disallowed_paths='Device%.Services%.VoiceService%.%d%.VoiceProfile%.%d+%.SIP%.InboundAuthPassword'
uci add_list webservice.role_app.disallowed_paths='Device%.Services%.X_000E50_RemoteAccess%.%d%.Password'
uci add_list webservice.role_app.disallowed_paths='Device%.Cellular%.AccessPoint%.%d%.Password'
uci add_list webservice.role_app.disallowed_paths='Device%.Cellular%.Interface%.%d%.USIM.PIN'
uci add_list webservice.role_app.disallowed_paths='Device%.DynamicDNS%.Client%.%d%.Password'
uci add_list webservice.role_app.disallowed_paths='Device%.Users%.User%.%d%.Password'
uci add_list webservice.role_app.disallowed_paths='Device%.LANConfigSecurity%.ConfigPassword'
uci add_list webservice.role_app.disallowed_paths='Device%.DeviceInfo%.ProcessStatus%.Process%.%d%.Command'
uci add_list webservice.role_app.disallowed_paths='sys%.'
uci add_list webservice.role_app.disallowed_paths='uci%.'
uci add_list webservice.role_app.disallowed_paths='rpc%.'
uci add_list webservice.role_app.disallowed_paths='InternetGatewayDevice%.'
uci commit webservice

touch /etc/lastaccess
chmod 666 /etc/lastaccess

new_layout=`uci get env.var.em_new_ui_layout`
if [ $new_layout == 1 ] ; then
	uci -q del_list web.ruleset_main.rules=wirelessmodal
	uci -q delete web.wirelessmodal
	uci -q del_list web.ruleset_main.rules=todwifimodal
	uci -q delete web.todwifimodal
	uci add_list web.ruleset_main.rules=wirelessradiomodal
	uci add_list web.ruleset_main.rules=wirelessapmodal
	uci add_list web.ruleset_main.rules=wirelesswpsmodal
	uci add_list web.ruleset_main.rules=todwifimodal
	uci set web.wirelessradiomodal=rule
	uci set web.wirelessradiomodal.target=/modals/wireless-radio-modal-newEM.lp
	uci add_list web.wirelessradiomodal.roles=admin
	uci add_list web.wirelessradiomodal.roles=engineer
	uci add_list web.wirelessradiomodal.roles=ispuser
	uci set web.wirelessapmodal=rule
	uci set web.wirelessapmodal.target=/modals/wireless-ap-modal-newEM.lp
	uci add_list web.wirelessapmodal.roles=admin
	uci add_list web.wirelessapmodal.roles=engineer
	uci add_list web.wirelessapmodal.roles=ispuser
	uci set web.wirelesswpsmodal=rule
	uci set web.wirelesswpsmodal.target=/modals/wireless-wps-modal-newEM.lp
	uci add_list web.wirelesswpsmodal.roles=admin
	uci add_list web.wirelesswpsmodal.roles=engineer
	uci add_list web.wirelesswpsmodal.roles=ispuser
	uci set web.todwifimodal=rule
	uci set web.todwifimodal.target=/modals/tod_wireless-modal-newEM.lp
	uci add_list web.todwifimodal.roles=admin
	uci add_list web.todwifimodal.roles=engineer
	uci add_list web.todwifimodal.roles=ispuser
	uci set web.signalstrength=wireless
	uci set web.signalstrength.threshold_excel=-50
	uci set web.signalstrength.threshold_good=-60
	uci set web.signalstrength.threshold_avg=-75
	uci set web.signalstrength.threshold_weak=-90

	if [[ $board == "VCNT-3" ]] || [[ $board == "VCNT-D" ]]; then
		uci -q del_list web.ruleset_main.rules=easyMeshConfiguration
		uci -q delete web.easyMeshConfiguration
		uci -q del_list web.ruleset_main.rules=wifiDevices
		uci -q delete web.wifiDevices
		uci -q del_list web.ruleset_main.rules=wifiExtender
		uci -q delete web.wifiExtender
		uci add_list web.ruleset_main.rules=easyMeshConfiguration
		uci add_list web.ruleset_main.rules=wifiExtender
		uci add_list web.ruleset_main.rules=wifiDevices
		uci set web.easyMeshConfiguration=rule
		uci set web.easyMeshConfiguration.target=/modals/easymesh-configuration-modal-newEM.lp
		uci add_list web.easyMeshConfiguration.roles=admin
		uci add_list web.easyMeshConfiguration.roles=engineer
		uci add_list web.easyMeshConfiguration.roles=ispuser
		uci set web.wifiExtender=rule
		uci set web.wifiExtender.target=/modals/easymesh-topology-modal-newEM.lp
		uci add_list web.wifiExtender.roles=admin
		uci add_list web.wifiExtender.roles=engineer
		uci add_list web.wifiExtender.roles=ispuser
		uci set web.wifiDevices=rule
		uci set web.wifiDevices.target=/modals/easymesh-devices-info-modal-newEM.lp
		uci add_list web.wifiDevices.roles=admin
		uci add_list web.wifiDevices.roles=engineer
		uci add_list web.wifiDevices.roles=ispuser
	fi
fi

update_interface()
{
	local ap_section_name_in=$1
	config_get ap_isolation "$ap_section_name_in" ap_isolation
		config_get iface "$ap_section_name_in" iface
		config_get network "$iface" network
		config_get backhaul "$iface" backhaul
		config_get fronthaul "$iface" fronthaul
		config_get mode "$iface" mode
		if ( [ $network == "lan" ] && [ $mode == "ap" ] ); then
			if [ -z $backhaul ] || ([ ! -z $backhaul ] && [ $backhaul != "1" ]) || ([ ! -z $fronthaul ] && [ $fronthaul == "1" ]); then
				if [ $(uci get -q wireless.$iface.device) == "radio_2G" ]; then
					main_ssid_24=$(uci get -q wireless.$iface.ssid)
				elif [ $(uci get -q wireless.$iface.device) == "radio_5G" ]; then
					main_ssid_5=$(uci get -q wireless.$iface.ssid)
				fi
			fi
		fi
		if ( [ $network == "guest" ] || [ $iface == "wl0_1" ] || [ $iface == "wl1_1" ] ) && [ $mode == "ap" ] && [ $network != "hotspot" ]; then
			if [ -z $backhaul ] || ([ ! -z $backhaul ] && [ $backhaul != "1" ]) || ([ ! -z $fronthaul ] && [ $fronthaul == "1" ]); then
				if [ $(uci get -q wireless.$iface.device) == "radio_2G" ]; then
					guest_ssid_24=$(uci get -q wireless.$iface.ssid)
				elif [ $(uci get -q wireless.$iface.device) == "radio_5G" ]; then
					guest_ssid_5=$(uci get -q wireless.$iface.ssid)
				fi
			fi
		fi
		if [[ -z $backhaul ]] || ([ $backhaul == "1" ] && [ ! -z $fronthaul ] && [ $fronthaul == "1" ]) || [[ $backhaul != "1" ]] && [[ $network != "hotspot" ]] && [[ $mode == "ap" ]] ; then
			if [[ $network == "guest" ]] || [[ $network != "lan" ]] ; then
				if [ -z `uci get web.guest` ]; then
					uci set web.guest=network
					uci add_list web.guest.cred=cred3
					uci add_list web.guest.cred=cred4
					uci set web.guest.splitssid='1'
				fi
				uci add_list web.guest.intf=$iface
			fi
			if [ $network == "lan" ] ; then
				if [ -z `uci get web.main` ]; then
					uci set web.main=network
					uci add_list web.main.cred=cred0
					uci add_list web.main.cred=cred1
					uci set web.main.splitssid='1'
				fi
				uci add_list web.main.intf=$iface
			fi
		fi
}

config_load wireless
config_foreach update_interface "wifi-ap"
if [ ! -z $main_ssid_24 ] && [ ! -z $main_ssid_5 ] ; then
	if [ $main_ssid_24 == $main_ssid_5 ]; then
		# both SSIDs are identical so splitssid is 1
		uci set web.main.splitssid='0'
	else
		# both SSIDs are different so splitssid is 0
		uci set web.main.splitssid='1'
	fi
fi
if [ ! -z $guest_ssid_24 ] && [ ! -z $guest_ssid_5 ] ; then
	if [ $guest_ssid_24 == $guest_ssid_5 ]; then
		uci set web.guest.splitssid='0'
	else
		uci set web.guest.splitssid='1'
	fi
fi
uci commit web
