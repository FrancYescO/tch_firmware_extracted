#!/bin/sh
. /lib/functions/provision.sh
touch /etc/lastaccess
chmod 666 /etc/lastaccess

touch /etc/lan
chmod 666 /etc/lan

touch /etc/public_lan
chmod 666 /etc/public_lan

generate_salt_and_verifier() {
	local usr_section_name="${1}"
	local username="${2}"
	local password="${3}"

	if [[ -n "${username}" ]] && [[ -n "${password}" ]]; then
		local srp=$(newsrpuser -f -u "${username}" -p "${password}")
		local salt=$(echo "${srp}" | cut -f1)
		local verifier=$(echo "${srp}" | cut -f2)
		uci set "web.${usr_section_name}.srp_salt=${salt}"
		uci set "web.${usr_section_name}.srp_verifier=${verifier}"
	else
		logger "Error: Could not set ${usr_section_name} password for GUI, key or name is empty"
		exit 1
	fi
}

populate_salt_and_verifier() {
	local usr_section_name="${1}"
	local salt verifier
	config_get salt "${usr_section_name}" srp_salt
	config_get verifier "${usr_section_name}" srp_verifier

	local gak_id
        config_get gak_id "${usr_section_name}" gak_id
	# Is there a gak_id configured for this user? If so, generate salt and verifier.
	if [[ -n "${gak_id}" ]]; then
		local name
		config_get name "${usr_section_name}" name
		local key=$(get_access_key "${gak_id}")
		generate_salt_and_verifier "${usr_section_name}" "${name}" "${key}"
	fi
}

generate_salt_seed() {
	local sessionmgr_section_name="${1}"
	local salt_seed
	config_get salt_seed "${sessionmgr_section_name}" salt_seed

	# We only generate a new salt seed if none is present.
	if [[ -z "${salt_seed}" ]]; then
		local seed=$(hexdump -n 4 -e '"%08X" 1 "\n"' /dev/urandom)
		uci set "web.${sessionmgr_section_name}.salt_seed=${seed}"
	fi
}

NO_EXPORT=1
config_load web
config_foreach populate_salt_and_verifier user
config_foreach generate_salt_seed sessionmgr

new_layout=`uci get env.var.em_new_ui_layout`
if [ $new_layout == 1 ] ; then
	uci -q del_list web.ruleset_main.rules=wirelessmodal
	uci -q delete web.wirelessmodal
	uci -q del_list web.ruleset_main.rules=easyMeshConfiguration
	uci -q delete web.easyMeshConfiguration
	uci -q del_list web.ruleset_main.rules=wifiDevices
	uci -q delete web.wifiDevices
	uci -q del_list web.ruleset_main.rules=wifiExtender
	uci -q delete web.wifiExtender
	uci add_list web.ruleset_main.rules=wirelessradiomodal
	uci add_list web.ruleset_main.rules=wirelessapmodal
	uci add_list web.ruleset_main.rules=wirelesswpsmodal
	uci add_list web.ruleset_main.rules=easyMeshConfiguration
	uci add_list web.ruleset_main.rules=wifiExtender
	uci add_list web.ruleset_main.rules=wifiDevices
	uci add_list web.ruleset_main.rules=wirelessstationmodal
	uci set web.wirelessradiomodal=rule
	uci set web.wirelessradiomodal.target=/modals/wireless-radio-modal-newEM.lp
	uci add_list web.wirelessradiomodal.roles=admin
	uci add_list web.wirelessradiomodal.roles=engineer
	uci set web.wirelessapmodal=rule
	uci set web.wirelessapmodal.target=/modals/wireless-ap-modal-newEM.lp
	uci add_list web.wirelessapmodal.roles=admin
	uci add_list web.wirelessapmodal.roles=engineer
	uci set web.wirelesswpsmodal=rule
	uci set web.wirelesswpsmodal.target=/modals/wireless-wps-modal-newEM.lp
	uci add_list web.wirelesswpsmodal.roles=admin
	uci add_list web.wirelesswpsmodal.roles=engineer
	uci set web.wirelessstationmodal=rule
	uci set web.wirelessstationmodal.target=/modals/wireless-station-modal-newEM.lp
	uci add_list web.wirelessstationmodal.roles=admin
	uci add_list web.wirelessstationmodal.roles=engineer
	uci set web.easyMeshConfiguration=rule
	uci set web.easyMeshConfiguration.target=/modals/easymesh-configuration-modal-newEM.lp
	uci add_list web.easyMeshConfiguration.roles=admin
	uci add_list web.easyMeshConfiguration.roles=engineer
	uci set web.wifiExtender=rule
	uci set web.wifiExtender.target=/modals/easymesh-topology-modal-newEM.lp
	uci add_list web.wifiExtender.roles=admin
	uci add_list web.wifiExtender.roles=engineer
	uci set web.wifiDevices=rule
	uci set web.wifiDevices.target=/modals/easymesh-devices-info-modal-newEM.lp
	uci add_list web.wifiDevices.roles=admin
	uci add_list web.wifiDevices.roles=engineer
	uci set web.signalstrength=wireless
	uci set web.signalstrength.threshold_excel=-50
	uci set web.signalstrength.threshold_good=-60
	uci set web.signalstrength.threshold_avg=-75
	uci set web.signalstrength.threshold_weak=-90
fi


update_interface()
{
	local ap_section_name_in=$1
	config_get network "$ap_section_name_in" network
	config_get backhaul "$ap_section_name_in" backhaul
	config_get mode "$ap_section_name_in" mode

	if [[ -z $backhaul ]] || [[ $backhaul != "1" ]] && [[ $network != "hotspot" ]] && [[ $mode == "ap" ]] ; then
		if [[ $network == "guest" ]] || [[ $network != "lan" ]] ; then
			if [ -z `uci get web.guest` ]; then
				uci set web.guest=network
				uci add_list web.guest.cred=cred3
				uci add_list web.guest.cred=cred4
			fi
			uci add_list web.guest.intf=$ap_section_name_in
		fi
		if [ $network == "lan" ] ; then
			if [ -z `uci get web.main` ]; then
				uci set web.main=network
				uci add_list web.main.cred=cred0
				uci add_list web.main.cred=cred1
			fi
			uci add_list web.main.intf=$ap_section_name_in
		fi
	fi
}

config_load wireless
config_foreach update_interface "wifi-iface"
uci commit web
