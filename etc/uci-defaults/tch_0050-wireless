#NG-71142; NG-80959
#!/bin/sh
#init env
wireless_init_uci_env.sh

#TCOMITAGW-2008:
# Modify Common  settings depending on used board for Radio 2.4/5GHz

board=`wireless_get_radio_type.sh radio_5G`
uci set wireless.radio_2G.acs_rescan_delay_policy='notraffic'
uci set wireless.radio_2G.acs_rescan_delay_max_events='999'
uci set wireless.radio_2G.acs_rescan_delay='180'
uci set wireless.radio_2G.channelwidth='auto'
uci set wireless.radio_2G.acs_rescan_period='86400'

if [ $board == "quantenna" ]; then
	#Disable MU-MIMO
	uci set wireless.radio_5G.mumimo='0'
else
	uci set wireless.radio_5G.acs_rescan_period='86400'
	uci set wireless.radio_5G.acs_rescan_delay_policy='notraffic'
	uci set wireless.radio_5G.acs_rescan_delay_max_events='999'
	uci set wireless.radio_5G.acs_rescan_delay='180'
fi
# end of TCOMITAGW-2008:
boardcheck=`uci get env.var.hardware_version`
if [ $boardcheck == "VBNT-K" ]; then
  uci set wireless.radio_2G.tx_power_adjust='+2'
  uci set wireless.radio_2G.tx_power_overrule_reg='1'
elif [ $boardcheck == "VBNT-S" ]; then
  uci set wireless.radio_2G.tx_power_adjust='+1'
  uci set wireless.radio_2G.tx_power_overrule_reg='1'
fi


#Update parameters

#Calculate TI SSID Postfix out of Wirelss MAC-Address as on Jira: NG-47046
#wireless_postfix_TI.sh for now this is devitation from custo as received from CTS
#instead of having another script merged it here itself
#get mac adress
macadress=`uci get env.rip.wifi_mac`

#Example mac=C4:EA:1D:59:43:76 --> mac=C4:EA:d:c:b:a
#we save the two last digits of the mac in a and so on for b,c and d
a=`echo $macadress | awk '{print substr($macadress, 16,2)}'`
b=`echo $macadress | awk '{print substr($macadress, 13,2)}'`
c=`echo $macadress | awk '{print substr($macadress, 10,2)}'`
d=`echo $macadress | awk '{print substr($macadress, 7,2)}'`

#the 0x and than our variables compiles from hex to dec 0xf --> 15
#(0x$b << 8) this means our compiled hex to dec number will be shift left for 8 bits
decimal_ssid=$((0x$a | (0x$b << 8) | (0x$c << 16) | ( (0x$d & 15) << 24 ) ))
#$(($decimal_ssid%100000000)) --> we want only a 8 digits number so we use modulo
#printf "%.8d " $(($decimal_ssid%100000000)) --> and all together we want everytime that the number is 8 digits long, if it only 7 digits we need a 0 at the
#beginning of our decimal number
decimal_ssid=`printf "%.8d " $(($decimal_ssid%100000000))`
uci set env.var.ssid_mac_postfix_r0=$decimal_ssid



# To make sure it is set to the correct vendor
uci set wireless.radio_2G.type=`wireless_get_radio_type.sh radio_2G`
uci set wireless.wl0.ssid=`uci get env.var.ssid_prefix``uci get env.var.ssid_mac_postfix_r0`
uci set wireless.ap0.wep_key=`uci get env.var.default_wep_key_r0_s0`
uci set wireless.ap0.wpa_psk_key=`uci get env.var.default_key_r0_s0`
uci set wireless.ap0.wps_ap_pin=`uci get env.var.default_wps_ap_pin_r0_s0`
uci set wireless.ap0_auth0.secret=`uci get env.var.default_key_r0_s0`

uci set wireless.wl0_1.ssid=Ospiti-TIM-`uci get env.var.ssid_mac_postfix_r0`
uci set wireless.ap2.wep_key=`uci get env.var.default_wep_key_r0_s1`
uci set wireless.ap2.wpa_psk_key=`uci get env.var.default_key_r0_s1`
uci set wireless.ap2.wps_ap_pin=`uci get env.var.default_wps_ap_pin_r0_s1`
uci set wireless.ap2_auth0.secret=`uci get env.var.default_key_r0_s1`

uci set network.wlnet_b_24.name=`uci get wireless.wl0_1.ssid`

# Is there a dual radio config ?
DUMMY=`uci get wireless.radio_5G`

if [ "$?" == "0" ] ; then
  uci set wireless.radio_5G.type=`wireless_get_radio_type.sh radio_5G`

  uci set wireless.wl1.ssid=`uci get env.var.ssid_prefix``uci get env.var.ssid_mac_postfix_r0`

  uci set wireless.ap1.wep_key=`uci get env.var.default_wep_key_r0_s0`

  uci set wireless.ap1.wpa_psk_key=`uci get env.var.default_key_r0_s0`

  uci set wireless.ap1.wps_ap_pin=`uci get env.var.default_wps_ap_pin_r0_s0`

  uci set wireless.ap1_auth0.secret=`uci get env.var.default_key_r0_s0`

#/********************************************
# Settings for 2nd 5 GHz
#/********************************************
uci set wireless.wl1_1.ssid=Ospiti-TIM-`uci get env.var.ssid_mac_postfix_r0`
uci set wireless.ap3.wep_key=`uci get env.var.default_wep_key_r0_s1`
uci set wireless.ap3.wpa_psk_key=`uci get env.var.default_key_r0_s1`
uci set wireless.ap3.wps_ap_pin=`uci get env.var.default_wps_ap_pin_r0_s1`
uci set wireless.ap3_auth0.secret=`uci get env.var.default_key_r0_s1`

uci set network.wlnet_b_5.name=`uci get wireless.wl1_1.ssid`

fi

#/* Guest SSID: Part 5GHz - Quantenna specifc part */
uci set wireless.wl1_1.vlan_id=`uci get network.wlnet_b_5eth5.vid`
rm /tmp/hostapd.env #added NG-82222 as workaround

uci set wireless.global.wfa_model_name="$(uci get env.var.variant_friendly_name)" #TCOMITAGW-2000
uci set wireless.global.wfa_friendly_name="$(uci get env.var.prod_friendly_name_TIM)" #TCOMITAGW-2000

uci commit network
uci commit wireless

#to update the default security mode in env
uci set env.var.default_security_mode_r0_s0=`uci get wireless.ap0.security_mode`
uci set env.var.default_security_mode_r1_s0=`uci get wireless.ap1.security_mode`

uci commit env

#/*******************************************************************/
#/*             datamodel ordering for wireless devices             */
#/*******************************************************************/
uci set dmordering.wlandevices=ordering
uci set dmordering.wlandevices.name='InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.'
# devices that are instantiated under `InternetGatewayDevice.LANDevice`:
uci add_list dmordering.wlandevices.order=wl0
uci add_list dmordering.wlandevices.order=wl1_remote
uci commit dmordering

