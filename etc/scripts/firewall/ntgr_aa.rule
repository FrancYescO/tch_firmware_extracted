#! /bin/sh

# (C) 2017 NETDUMA SOFTWARE
# Seems like net-wall deletes all user chains, so we need to reload everything

#outfile=/tmp/debug
outfile=/dev/null
signal_nolock_file=/tmp/netwall-restart-dumaos

restartaa(){
  echo "autoadmin restart required because $1" | tee -a $outfile
  ubus call com.netdumasoftware.autoadmin fw_restart "{}" >> $outfile 2>&1
#  iptables -I INPUT 1 -p tcp --dport 22 -j ACCEPT
  echo "autoadmin restart complete" | tee -a $outfile
  exit 0
}


start(){
  echo "net-wall start called" | tee -a $outfile

  ubus call com.netdumasoftware.networkstate dirty "{}" | grep "true"
  if [ $? -eq 0 ]; then
    echo "networkstate dirty. Restarting DumaOS" | tee -a $outfile

    # if net-wall reset everything reload so cleanup code gets no suprises
    iptables -t mangle -L prerouting_mangle || ubus call com.netdumasoftware.autoadmin fw_restart "{}" >> $outfile 2>&1

    # Part of stopping DumaOS is the cleanup process which will perform a variety
    # of calls to AA. These calls are typically guarded by locks to stop interference
    # from net-wall. However when called from here net-wall holds the lock so we 
    # need to signal to DumaOS that it does not need to worry about locking.
    echo "1" > $signal_nolock_file
    
    # stop DumaOS and wait for it to shutdown
    /etc/init.d/dumaos stop

    # restart it (no need to sleep as stop waits till its closed)
    /etc/init.d/dumaos start

    # continue using guards when accessing AA
    rm $signal_nolock_file

    iptables -I INPUT 1 -p tcp --dport 22 -j ACCEPT
    exit 0
  else
    echo "networkstate not dirty" | tee -a $outfile
  fi


  iptables -t mangle -L prerouting_mangle || restartaa "prerouting_mangle"
  iptables -t mangle -L forward_mangle || restartaa "forward_mangle"
  iptables -t mangle -L postrouting_mangle || restartaa "postrouting_mangle"
  iptables -t mangle -L input_mangle || restartaa "input_mangle"
  iptables -t mangle -L output_mangle || restartaa "output_mangle"
  iptables -t nat -L prerouting_rule || restartaa "prerouting_rule"
  iptables -t nat -L postrouting_rule || restartaa "postrouting_rule"
  iptables -t filter -L input_rule || restartaa "input_rule"
  iptables -t filter -L forwarding_rule || restartaa "forwarding_rule"
  iptables -t filter -L output_rule || restartaa "output_rule"
}

case $1 in
  "start")
    start
    ;;
  "stop")
    :;;
  *)
    :;;
esac
