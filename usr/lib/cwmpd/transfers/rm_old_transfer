#!/usr/bin/env lua

local require = require
local exit = os.exit
local char = string.char
local tonumber = tonumber
local popen = io.popen
local execute = os.execute

local sqlite = require "lsqlite3"

local function mktempdir()
  local dirname
  local f = popen("mktemp -d")
  if f then
    dirname = f:read("*l")
    f:close()
  end
  return dirname
end

local function rmdir(dirname)
  execute("rm -rf "..dirname)
end

local function cwmp_transfer_section(uci, config, hexTransferID)
  local section
  uci:foreach(config, "transfer", function(s)
    if s.id == hexTransferID then
      section = s[".name"];
      return false
    end
  end)
  return section
end

local function cwmp_transfer_delete(uci, config, section)
  if section then
    uci:delete(config, section)
    uci:commit(config)
  end
end

local function remove_transfer_from_uci(hexTransferID, oldConfig)
  local config = "cwmp_transfer"
  local savedir = mktempdir()
  local uci = require("uci").alt_cursor(oldConfig.."/etc/config", savedir)
  local section = cwmp_transfer_section(uci, config, hexTransferID)
  cwmp_transfer_delete(uci, config, section)
  uci:close()
  rmdir(savedir)
end

local function open_old_database(oldConfig)
  local db, err  = sqlite.open(oldConfig .. "/etc/cwmpd.db")
  if not db then
    print("db open error: "..err)
  end
  return db
end

local function delete_transfer(db, transferID)
  local sql = [[
    DELETE FROM tidkv
    WHERE type="transfer"
      AND (id=:id)
  ]]
  local stmt, err = db:prepare(sql)
  if not stmt then
    print("prepare error: "..err)
    return
  end
  stmt:bind_names{id=transferID}
  local db_err = stmt:step()
  if db_err ~= sqlite.DONE then
    print("Failed to execute delete statement: "..db_err)
  end
  stmt:finalize()
end

local function remove_transfer_from_database(hexTransferID, oldConfig)
  local transferID = hexTransferID:gsub("..", function(s) return char(tonumber(s, 16)) end)
  local db = open_old_database(oldConfig)
  if db then
    delete_transfer(db, transferID)
    db:close()
  end
end

local function remove_old_transfer_info(hexTransferID, oldConfig)
  print("removing "..hexTransferID)
  remove_transfer_from_uci(hexTransferID, oldConfig)
  remove_transfer_from_database(hexTransferID, oldConfig)
end

local function isValidHexID(id)
  return (#id % 2 == 0) and
         id:match("^%x*$")
end

local function main(hexTransferID, oldConfig)
  if not hexTransferID then
    print("no transfer ID given")
    return 1
  end
  if not isValidHexID(hexTransferID) then
    print("given ID is not a valid HEX string")
    return 1
  end
  if not oldConfig then
    print("old config basedir missing")
    return 1
  end
  remove_old_transfer_info(hexTransferID, oldConfig)
end

exit(main(...))
