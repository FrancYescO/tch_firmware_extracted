#!/usr/bin/env lua

local logger = require 'transformer.logger'
local uci = require("uci")
local cursor = uci.cursor()
local common = require 'transformer.mapper.nwcommon'
local conn = require("ubus").connect()
local pairs, getIntfStats, open = pairs, common.getIntfStats, io.open

local config = "intfdiag"
local state = "Complete"
local dataRate = {}

local packetData = {
  unicastSentDataRate = "tx_unicast",
  unicastReceivedDataRate = "rx_unicast",
  multicastSentDataRate = "txpckt",
  multicastReceivedDataRate = "multicast",
}

-- command line argument = interface name
local interface = arg[1]
-- interface cannot be nil
if interface == nil then
  logger:critical("You need to specify an interface (eth0,eth1,ptm0, ...)")
  return
end

--- Calculates data rate of unicast and multicast, sent and received packets
-- @function intfdiag
-- @param intf #string holds the interface name for which the data rate has to be calculated
-- @return nil, if any error in getting the required parameters or true if data rate is calculated successfully
local function intfdiag(intf)
  -- get diagnostics interval configuration from UCI
  local interval = cursor:get(config, intf, "interval")
  cursor:close()

  -- check if interval is present
  if not interval then
    state = "Error_Internal"
    return
  end
  interval = tonumber(interval)

  local currentPacketCount = {}
  local startPacketCount = {}

  -- get count for Unicast and Multicast, Sent and Received packets
  for param, option in pairs(packetData) do
    startPacketCount[param] = getIntfStats(intf, option, "0")
  end

  -- sleep for diagnostics interval time
  os.execute("sleep " .. interval)

  -- get the count again for Unicast and Multicast, Sent and Received packets
  for param, option in pairs(packetData) do
    currentPacketCount[param] = getIntfStats(intf, option, "0")
  end

  -- Check if sent and received packet count details are present
  if not startPacketCount or not currentPacketCount then
    state = "Error_Internal"
    return
  end

  -- Calculate the Data rate using the below formula
  -- datarate = (CurrentPacketCount - StartPacketCount)*MTU*8/DiagnosticsInterval/1024)
  -- If MTU value is not present in ubus call network.device then default value is taken as 1500

  local deviceStatus = conn:call("network.device", "status", { ["name"] = intf })
  local mtu = (deviceStatus and deviceStatus["mtu"]) and deviceStatus["mtu"] or 1500

  for param in pairs(packetData) do
    dataRate[param] = math.floor( ( currentPacketCount[param] - startPacketCount[param] ) * mtu * 8 / interval / 1024 )
  end
  return true
end

local err, err_msg = pcall(intfdiag, interface)
if not err then
  state = "Error_Internal"
  logger:critical(err_msg)
end

cursor = uci.cursor(nil, "/var/state")
for param, dataInKbps in pairs(dataRate) do
  -- Write the output (Data Rate) to intfdiag_intfName file.
  dataInKbps = (dataInKbps > 0) and dataInKbps or 0
  local intf = cursor:get(config, interface)
  if not intf then
    cursor:set(config, interface, interface)
  end
  cursor:revert(config, interface, param)
  cursor:set(config, interface, param, dataInKbps)
end
cursor:save(config)
cursor:close()

-- write results to UCI
cursor = uci.cursor()
cursor:set(config, interface, "state", state)
cursor:commit(config)
cursor:close()
