#!/usr/bin/env lua
local require, pairs, type = require, pairs, type
local uci = require("uci")
local cursor = uci.cursor()

local lxc_path = "/srv/lxc/"

local known_options = {
  ["lxc_rootfs_path"] = false,
  ["lxc_cgroup_cpuset_cpus"] = false,
  ["lxc_cgroup_cpu_cfs_quota_us"] = 3,
  ["lxc_cgroup_memory_limit_in_bytes"] = 3,
  ["lxc_net_%d+_type"]= false,
  ["lxc_net_%d+_flags"] = false,
  ["lxc_net_%d+_link"] = false,
  ["lxc_net_%d+_ipv4_address"] = false,
  ["lxc_net_%d+_ipv4_gateway"] = false,
  ["lxc_net_%d+_ipv6_address"] = false,
  ["lxc_net_%d+_ipv6_gateway"] = false,
  ["lxc_net_%d+_hwaddr"] = false,
  ["lxc_net_%d+_name"] = false,
  ["lxc_uts_name"] = false,
}

local function is_option_known(option)
  for opt_pattern, gsub_limit in pairs(known_options) do
    if option:match(opt_pattern) then
      gsub_limit = gsub_limit or nil --translate false to nil
      return true, gsub_limit
    end
  end
end

local function update_config(lxc_name, config_options)
  local config_path = lxc_path .. lxc_name .. "/config"
  local template = io.open(config_path..".template", "r")
  if not template then
    return
  end
  local config = io.open(config_path, "w")
  if not config then
    template:close()
    return
  end
  config:write(
    "# do not make changes to this file\n",
    "# this file is autogenerated from config.template and the uci config\n"
  )
  for line in template:lines() do
    for option_to_change, value in pairs(config_options) do
      if line:match(option_to_change) then
        line = line:gsub("=.*", "= "..value)
        config_options[option_to_change] = nil
        break
      end
    end
    config:write(line.."\n")
  end
  -- Append remaining options
  for option_to_change, value in pairs(config_options) do
    option_to_change = option_to_change:gsub("%^", "", 1)
    config:write(option_to_change.." = "..value.."\n")
  end
  config:close()
  template:close()
end

local function configure_lxc_instance(section)
  if section["enabled"] ~= "1" then
    return
  end
  local config_to_be_written = {}
  local name = section[".name"]
  -- Iterate over all options in the section. Handle only the ones we know and allow.
  -- Underscores in option names are replaced by dots in the lxc config.
  for option_name, option_value in pairs(section) do
    local is_known, limit_gsub = is_option_known(option_name)
    if is_known then
      option_name = "^" .. option_name:gsub("_", "%.", limit_gsub)
      config_to_be_written[option_name] = option_value
    end
  end
  update_config(name, config_to_be_written)
end

cursor:foreach("lxc", "lxc_instance", configure_lxc_instance)