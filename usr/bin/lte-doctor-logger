#!/usr/bin/lua

local ubus, uloop, uci = require('ubus'), require('uloop'), require('uci')
local sqlite3 = require ("lsqlite3")
local syslog = require('tch.logger')
local posix = require("tch.posix")
local json = require("dkjson")
local zlib = require("zlib")
local log

local ltedoctor = {
	config_file = "ltedoctor",
	config = {
		recycle_interval = (60 * 1000)
	},
	databases = {}
}

local function get_boolean(config_item, default)
	if not config_item then return default end
	return config_item ~= '0' and config_item ~= 'false' and config_item ~= false and config_item ~= 0
end

local function get_tables(db)
	local tables = {}
	for line in db:nrows("SELECT name FROM sqlite_master WHERE type='table';") do
		table.insert(tables, { name = line.name } )
	end
	return tables
end

local function compress_data(json_data)
	local buffer = ""
	local stream = zlib.deflate(function(data)
		buffer = buffer .. data
	end)
	stream:write(json_data)
	stream:close()
	return buffer
end

local function decompress_data(compressed_data)
	local stream = zlib.inflate(compressed_data)
	return stream:read()
end

local function get_ubus_call_key(ubus_call)
	return ubus_call:gsub('%.', '_'):gsub(' ', '_')
end

local function send_event(id, data)
	local ret = json.encode(data, { indent = false })
	if ret then
		local command = "ubus send " .. id .. " '" .. ret .. "'"
		local f = io.popen(command, 'r')
		if not f then return end
		f:read('*a')
		f:close()
	end
end

local function flatten(data)
	local result = {}
	local function do_flatten(arr, toplevel)
		for k, v in pairs(arr) do
			if type(v) == "table" then
				local key = k
				if toplevel then
					key = toplevel .. "." .. key
				end
				do_flatten(v, key)
			else
				if toplevel then
					k = toplevel .. "." .. k
				end
				result[k] = v
			end
		end
	end
	do_flatten(data)
	return result
end

local function get_header_fields(data)
	local fields = {}
	for _, entry in pairs(data) do
		for k in pairs(entry) do
			fields[k] = true
		end
	end
	return fields
end

local function write_csv(file, data)
	for _, logger in pairs(data) do
		local csv = {}
		for _, entry in pairs(logger) do
			local v = flatten(entry.data)
			v.uptime = entry.uptime
			v.dev_idx = entry.dev_idx
			table.insert(csv, v)
		end
		local header_fields = get_header_fields(csv)
		for field in pairs(header_fields) do
			file:write(field .. ";")
		end
		file:write('\n')
		for _, line in pairs(csv) do
			for field in pairs(header_fields) do
				file:write(line[field] or "")
				file:write(";")
			end
			file:write('\n')
		end
	end
end

function ltedoctor:get_uptime()
	local data = self.ubus:call("system", "info", {})
	if data then
		return data.uptime
	end
	return nil, "Failed to retrieve uptime"
end

function ltedoctor:cleanup()
	log:info("Stopping...")
	self.ubus:close()
	uloop.cancel()
end

function ltedoctor:reloadconfig()
	log:info("Reloading config")
	self:load_config()
	if not self.config.enabled then
		return self:cleanup()
	end
	return self:start_logging()
end

function ltedoctor:load_config()
	local cursor = uci.cursor()
	local c = cursor:get(self.config_file, "config", "tracelevel")
	self.config.tracelevel = tonumber(c) or 6
	self.config.enabled = get_boolean(cursor:get(self.config_file, "config", "enabled"), true)

	if not log then
		syslog.init("ltedoctor", self.config.tracelevel, posix.LOG_PID)
		log = syslog
	else
		log:set_log_level(self.config.tracelevel)
	end

	self.config.loggers = {}
	cursor:foreach(self.config_file, "logger", function(section)
		local logger = {
			name = section.name,
			database_path = section.path or "/tmp/lte-doctor.db",
			update_interval = (tonumber(section.interval) or 5) * 1000,
			recycle_period = (tonumber(section.period) or 1) * 3600,
			force_insert = get_boolean(section.force_insert, false),
			max_entries = tonumber(section.max_entries),
			dev_idx = tonumber(section.dev_idx) or 1,
			compression = get_boolean(section.compression, false),
			ubus_calls = section.ubus_calls,
			ubus_events = section.ubus_events,
			prelog = section.prelog
		}
		if not logger.name or (not logger.ubus_calls and type(logger.ubus_events) ~= "table") or (logger.ubus_calls and type(logger.ubus_calls) ~= "table") then
			log:error("Invalid logger configuration")
		else
			log:info("Adding logger: %s", logger.name)
			table.insert(self.config.loggers, logger)
		end
	end)

	cursor:close()
end

function ltedoctor:get_database(database_path)
	if self.databases[database_path] then
		return self.databases[database_path].db
	end
end

function ltedoctor:init_database(database_path)
	if self:get_database(database_path) then
		return true
	end

	local db, _, errMsg = sqlite3.open(database_path)
	if not db then
		log:error("Failed to open database at %s", database_path)
		return nil, errMsg
	end

	local tables = get_tables(db)
	for _, t in pairs(tables) do
		errMsg = db:exec(string.format("DROP TABLE %s;", t.name))
		if errMsg ~= sqlite3.OK then
			log:error('Failed to clear database')
			return nil, errMsg
		end
	end

	errMsg = db:exec("VACUUM;")
	if errMsg ~= sqlite3.OK then
		log:warning('Failed to optimize database')
	end
	self.databases[database_path] = { db = db, path = database_path }
	return true
end

function ltedoctor:recycle_callback(logger)
	local uptime = self:get_uptime()
	if uptime and uptime > logger.recycle_period then
		local remove_uptime = uptime - logger.recycle_period
		local ret = self:get_database(logger.database_path):exec(string.format('DELETE FROM %s WHERE uptime < %d', logger.name, remove_uptime))
		if ret ~= sqlite3.OK then
			log:error('Failed to remove old data from "%s" (%s)', logger.name, tostring(ret))
		end
	end
	logger.recycle_timer:set(self.config.recycle_interval)
	collectgarbage()
end

function ltedoctor:get_ubus_data(logger, ubus_call)
	local max_age
	if not logger.ubus_events then
		max_age = logger.update_interval/1000
	end

	local path, method = ubus_call:match('^(%S+)%s+(%S+)')
	if path then
		return self.ubus:call(path, method, { dev_idx = logger.dev_idx, max_age = max_age })
	end
end

function ltedoctor:get_all_ubus_data(logger)
	local result = {}
	for _, ubus_call in pairs(logger.ubus_calls) do
		result[get_ubus_call_key(ubus_call)] = self:get_ubus_data(logger, ubus_call)
	end
	return result
end

function ltedoctor:insert_data(logger, dev_idx, data)
	if type(logger.prelog) == "table" then
		for _, prelog in pairs(logger.prelog) do
			local status, m = pcall(require, string.format("ltedoctor.plugins.%s", prelog))
			local prelog_plugin = status and m or nil
			if prelog_plugin then
				if prelog_plugin.process then
					status, m = pcall(prelog_plugin.process, {log = log, logger = logger, send_event = send_event}, data, dev_idx)
					if not status then
						if m then
							log:error(tostring(m))
						end
					elseif not m then
						return
					end
				end
			else
				log:error(tostring(m))
			end
		end
	end

	local data_json = json.encode(data)

	-- Only insert on changes or when there is otherwise no more data in the table unless force_insert is set
	if not logger.force_insert and logger.last_data == data_json then
		return
	end

	logger.last_data = data_json

	local db = self:get_database(logger.database_path)

	if logger.compression then
		data_json = compress_data(data_json)
	end

	local insert_statement = db:prepare(string.format('INSERT INTO %s(dev_idx, uptime, data) VALUES (:dev_idx, :uptime, :data);', logger.name))
	if insert_statement then
		local uptime = self:get_uptime()
		if uptime then
			insert_statement:bind_values(dev_idx, uptime, data_json)
			insert_statement:step()
			insert_statement:finalize()
		end
		if logger.max_entries then
			local ret = self:get_database(logger.database_path):exec(string.format('DELETE FROM %s WHERE ROWID NOT IN (SELECT ROWID FROM %s ORDER BY uptime DESC LIMIT %d)', logger.name, logger.name, logger.max_entries))
			if ret ~= sqlite3.OK then
				log:error('Failed to remove old data from "%s" (%s)', logger.name, tostring(ret))
			end
		end
		return true
	end
	return nil, "Insert failed"
end

function ltedoctor:update_callback(logger)
	self:insert_data(logger, logger.dev_idx, self:get_all_ubus_data(logger))
	if logger.update_timer then
		logger.update_timer:set(logger.update_interval)
	end
end

function ltedoctor:event_callback(logger, facility, msg)
	if logger.ubus_calls then
		local data = self:get_all_ubus_data(logger)
		-- Multiple UBUS event triggers. Store the trigger to identify them
		if #logger.ubus_events > 1 then
			data.trigger = facility
		end
		self:insert_data(logger, logger.dev_idx, data)
	else
		local dev_idx = msg.dev_idx
		msg.dev_idx = nil
		-- Multiple UBUS events logging to the same table. Store the facility to identify them
		if #logger.ubus_events > 1 then
			msg.facility = facility
		end
		self:insert_data(logger, dev_idx or logger.dev_idx, msg)
	end
end

function ltedoctor:create_logging_table(logger)
	local errMsg = self:get_database(logger.database_path):exec(string.format('CREATE TABLE IF NOT EXISTS %s(dev_idx INTEGER, uptime DATETIME, data TEXT);', logger.name))
	if errMsg ~= sqlite3.OK then
		return nil, errMsg
	end
	return true
end

function ltedoctor:start_logging()
	local ubus_event_callbacks = {}
	for _, logger in pairs(self.config.loggers) do
		local ret, errMsg = self:init_database(logger.database_path)
		if not ret then
			log:error("Failed to initialize database (%s)", tostring(errMsg))
			return nil, errMsg
		else
			ret, errMsg = self:create_logging_table(logger)
			if not ret then
				log:error("Failed to initialize logging table (%s)", tostring(errMsg))
				return nil, errMsg
			end

			logger.recycle_timer = uloop.timer(function() self:recycle_callback(logger) end, self.config.recycle_interval)
			if type(logger.ubus_events) == "table" then
				for _, event in pairs(logger.ubus_events) do
					log:info('Register for "%s" events', event)
					ubus_event_callbacks[event] = function(msg) self:event_callback(logger, event, msg) end
				end
			else
				self:update_callback(logger)
				logger.update_timer = uloop.timer(function() self:update_callback(logger) end, logger.update_interval)
			end
		end
	end
	self.ubus:listen(ubus_event_callbacks)
	return true
end

function ltedoctor:get_history_data(msg)
	local data = {}
	if msg.order and string.lower(msg.order) ~= "asc" and string.lower(msg.order) ~= "desc" then
		data.error = "Invalid order parameter"
		return data
	end

	local matches = false
	for _, logger in pairs(self.config.loggers) do
		local db = self:get_database(logger.database_path)
		if not msg.logger or logger.name == msg.logger then
			matches = true
			local filters = { "data NOT NULL" }
			local fields = { "uptime", "data" }
			if not msg.dev_idx then
				table.insert(fields, "dev_idx")
			else
				table.insert(filters, string.format("dev_idx = %d", msg.dev_idx))
			end
			if msg.since_uptime then
				table.insert(filters, string.format("uptime > %d", msg.since_uptime))
			end
			if msg.min_interval then
				local interval = msg.min_interval/(logger.update_interval/1000)
				table.insert(filters, string.format("(ROWID = 1 OR ROWID %% %d = 0)", interval))
			end
			local query = "SELECT " .. table.concat(fields, ', ') .. ' FROM ' .. logger.name .. ' WHERE ' .. table.concat(filters, ' AND ') .. ' ORDER BY uptime ' .. (msg.order or "ASC")
			if msg.max_entries then
				query = query .. ' LIMIT ' .. msg.max_entries
			end
			query = query .. ';'
			data[logger.name] = {}
			for line in db:nrows(query) do
				if logger.compression then
					line.data = decompress_data(line.data)
				end
				line.data = json.decode(line.data)
				table.insert(data[logger.name], line)
			end
			if msg.logger then
				break
			end
		end
	end
	if not matches then
		data.error = "Invalid logger specified"
	end
	return data
end

function ltedoctor:get_history(req, msg)
	self.ubus:reply(req, self:get_history_data(msg))
end

function ltedoctor:export_history(req, msg)
	local history = self:get_history_data(msg)
	if history.error then
		self.ubus:reply(req, history)
		return
	end
	local data = {}
	local output_path = msg.path or "/tmp/lte-doctor-export.csv"
	local extension = output_path:match("^.+(%..+)$")
	if extension ~= ".csv" and extension ~= ".json" then
		data.error = "Invalid file extension specified"
		self.ubus:reply(req, data)
		return
	end

	local file = io.open(output_path, "w")
	if not file then
		data.error = "Invalid export path specified"
		self.ubus:reply(req, data)
		return
	end
	if extension == ".csv" then
		write_csv(file, history)
	else
		file:write(json.encode(history, { indent = true }))
		file:write('\n')
	end

	file:flush()
	file:close()
end

function ltedoctor:get_status(req)
	local data = {
		databases = {}
	}
	for _, db in pairs(self.databases) do
		local database = {}
		database.path = db.path
		database.tables = get_tables(db.db)
		for _, t in pairs(database.tables) do
			local query = string.format('SELECT count(*) AS rowcount FROM %s;', t.name)
			for row in db.db:nrows(query) do
				if row.rowcount then
					t.entries = row.rowcount
					break
				end
			end
		end
		table.insert(data.databases, database)
	end
	self.ubus:reply(req, data)
end

function ltedoctor:flush_database()
	for _, db in pairs(self.databases) do
		local tables = get_tables(db.db)
		for _, t in pairs(tables) do
			local query = string.format('DELETE FROM %s;', t.name)
			db.db:exec(query)
		end
	end
end

function ltedoctor:init()
	uloop.init()

	self:load_config()
	if not self.config.enabled then
		return nil, "LTE Doctor disabled"
	end

	if #self.config.loggers == 0 then
		return nil, "No loggers to start"
	end

	self.ubus = ubus.connect(nil, 5)
	if not self.ubus then
		return nil, "Failed to connect to UBUS"
	end

	local ubus_methods = {
		['ltedoctor'] = {
			history = {
				function(...) self:get_history(...) end, { dev_idx = ubus.INT32, since_uptime = ubus.INT32, logger = ubus.STRING, max_entries = ubus.INT32, interval = ubus.INT32, order = ubus.STRING }
			},
			export = {
				function(...) self:export_history(...) end, { dev_idx = ubus.INT32, since_uptime = ubus.INT32, logger = ubus.STRING, max_entries = ubus.INT32, interval = ubus.INT32, path = ubus.STRING, order = ubus.STRING }
			},
			status = {
				function(...) self:get_status(...) end, {}
			},
			flush = {
				function(...) self:flush_database(...) end, {}
			},
			reload = {
				function(...) self:reloadconfig(...) end, {}
			}
		}
	}
	self.ubus:add(ubus_methods)

	return self:start_logging()
end

local ret, errMsg = ltedoctor:init()
if not ret then
	log:error(errMsg)
	os.exit(-1)
end

uloop.run()
ltedoctor:cleanup()
