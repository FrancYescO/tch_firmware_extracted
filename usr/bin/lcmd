#!/usr/bin/env lua
--[[
/********** COPYRIGHT AND CONFIDENTIALITY INFORMATION NOTICE *************
** Copyright (c) 2017 -          Technicolor Delivery Technologies, SAS **
** - All Rights Reserved                                                **
** Technicolor hereby informs you that certain portions                 **
** of this software module and/or Work are owned by Technicolor         **
** and/or its software providers.                                       **
** Distribution copying and modification of all such work are reserved  **
** to Technicolor and/or its affiliates, and are not permitted without  **
** express written authorization from Technicolor.                      **
** Technicolor is registered trademark and trade name of Technicolor,   **
** and shall not be used in any manner without express written          **
** authorization from Technicolor                                       **
*************************************************************************/
--]]

local posix = require("tch.posix")
local logger = require("tch.logger")
logger.init("lcmd", 5, posix.LOG_PID)  -- Don't log to stderr: when forking we
                                       -- redirect standard I/O over a socket and the
                                       -- log output will confuse the processing of
                                       -- the child process output.
local uloop = require("uloop")
uloop.init()
local ubus = require("lcm.ubus")
local lcm = require("lcm.core")

local empty = {}

-- TODO: for robustness all calls to LCM core functions should be pcall()'s

local function list_execenvs(req, msg)
  local execenvs = lcm.list_execenvs(msg or empty)
  ubus.reply(req, { execenvs = execenvs })
end

local function list_packages(req, msg)
  local packages = lcm.list_packages(msg or empty)
  ubus.reply(req, { packages = packages })
end

local function modify_package(req, msg)
  local result, errorcode, errormsg = lcm.modify_package(msg or empty)
  if not result then
    ubus.reply(req, { errorcode = errorcode, errormsg = errormsg })
  else
    ubus.reply(req, empty)
  end
end

local function install(req, msg)
  local ID, errorcode_or_operationID, errormsg = lcm.install(msg or empty)
  if not ID then
    ubus.reply(req, { errorcode = errorcode_or_operationID, errormsg = errormsg })
  else
    ubus.reply(req, { ID = ID, operationID = errorcode_or_operationID })
  end
end

local function start(req, msg)
  local packages, operationID = lcm.start(msg or empty)
  ubus.reply(req, { packages = packages, operationID = operationID })
end

local function stop(req, msg)
  local packages, operationID = lcm.stop(msg or empty)
  ubus.reply(req, { packages = packages, operationID = operationID })
end

local function uninstall(req, msg)
  local packages, operationID = lcm.uninstall(msg or empty)
  ubus.reply(req, { packages = packages, operationID = operationID })
end

local ubus_objects = {
  lcm = {
    -- List information on the available execution environments or the
    -- information of a particular execution environment.
    -- Returns a table with key "execenvs" and value an array of
    -- tables that each contain the properties of an execution environment.
    -- The array could be empty.
    list_execenvs = {
      list_execenvs,
      { name = ubus.STRING }  -- optional; if not provided all execution environment info is returned
    },
    -- List the metadata of all packages or packages matching the given properties
    -- Returns a table with key "packages" and value an array of
    -- tables that each contain the properties of a package.
    -- The array could be empty.
    list_packages = {
      list_packages,
      { properties = ubus.TABLE }  -- optional; if not provided (or empty) all package info is returned
    },
    -- Update a package's (writable) metadata.
    -- Returns an empty table if all went well. Otherwise a table is returned
    -- with the key "errorcode" with the value an error code (integer),
    -- and the key "errormsg" with the value an error message (string).
    modify_package = {
      modify_package,
      { ID = ubus.STRING,       -- mandatory; identifier of the package whose metadata to modify
        properties = ubus.TABLE -- mandatory; key-value pairs with the property to update
                                -- and its new value; an empty string value unsets the property
      }
    },
    -- Download a package from the given URL and install it in the given
    -- execution environment.
    -- If the install request is accepted for further processing
    -- a table is returned with the key "ID" and the value an unique package
    -- identifier (string) that can be used to follow up the
    -- installation process via the list_packages() method. A second key "operationID" with
    -- value an unique operation identifier (string) is also present. This can be used to
    -- link events with the operation that triggered them.
    -- If the install request is rejected a table is returned with
    -- the key "errorcode" with the value an error code (integer),
    -- and the key "errormsg" with the value an error message (string).
    -- TODO: support providing an array of packages to install? Could be
    -- useful to 'batch' installs; lcmd would notify when it has processed
    -- a batch. This could help cwmpd to unambigiously know when all actions
    -- of a particular ChangeDUState RPC have been processed.
    install = {
      install,
      { URL = ubus.STRING,      -- mandatory; location where to fetch the package from
        execenv = ubus.STRING,  -- mandatory; execution environment on which to install the package
        username = ubus.STRING, -- optional
        password = ubus.STRING, -- optional
      }
    },
    -- Start the packages matching the given properties.
    -- The actual starting is done asynchronously so it's possible the request does not
    -- return an error but the starting still fails.
    -- Returns a table with key "operationID" and value an unique operation identifier
    -- (string), and key "packages" and value an array of tables. Each table
    -- represents a matching package and contains at least the key "ID" and value the
    -- package's unique identifier (string). If the start request for that package is
    -- rejected the table will also contain a key "errorcode" with the value an error
    -- code (integer) and a key "errormsg" with the value an error message (string).
    -- The operationID can be used to link events with the operation that triggered them.
    start = {
      start,
      { properties = ubus.TABLE }  -- optional; if not provided (or empty) all packages are started
    },
    -- Stop the packages matching the given properties.
    -- The actual stopping is done asynchronously so it's possible the request does not
    -- return an error but the stopping still fails.
    -- Returns a table with key "operationID" and value an unique operation identifier
    -- (string), and key "packages" and value an array of tables. Each table
    -- represents a matching package and contains at least the key "ID" and value the
    -- package's unique identifier (string). If the stop request for that package is
    -- rejected the table will also contain a key "errorcode" with the value an error
    -- code (integer) and a key "errormsg" with the value an error message (string).
    -- The operationID can be used to link events with the operation that triggered them.
    stop = {
      stop,
      { properties = ubus.TABLE }  -- optional; if not provided (or empty) all packages are stopped
    },
    -- Uninstall the packages matching the given properties.
    -- Packages that are currently running will be stopped first.
    -- Returns a table with key "operationID" and value an unique operation identifier
    -- (string), and key "packages" and value an array of tables. Each table
    -- represents a matching package and contains at least the key "ID" and value the
    -- package's unique identifier (string). If the uninstall request for that package is
    -- rejected the table will also contain a key "errorcode" with the value an error
    -- code (integer) and a key "errormsg" with the value an error message (string).
    -- The operationID can be used to link events with the operation that triggered them.
    uninstall = {
      uninstall,
      { properties = ubus.TABLE }  -- optional; if not provided (or empty) all packages are uninstalled
    },
    -- Update the packages matching the given properties.
    -- Packages that are currently running will be stopped first.
    -- Returns a table with key "operationID" and value an unique operation identifier
    -- (string), and key "packages" and value an array of tables. Each table
    -- represents a matching package and contains at least the key "ID" and value the
    -- package's unique identifier (string). If the uninstall request for that package is
    -- rejected the table will also contain a key "errorcode" with the value an error
    -- code (integer) and a key "errormsg" with the value an error message (string).
    -- The operationID can be used to link events with the operation that triggered them.
--    update = {
--      update,
--      { properties = ubus.TABLE,
--        URL = ubus.STRING,
--        username = ubus.STRING,
--        password = ubus.STRING }
--    }
  }
}

ubus.add(ubus_objects)
uloop.run()
