#!/usr/bin/env lua

--[[
  clash-showinfo-wrapper is designed for the CLI's (clash) showinfo command.
  It may be used from a root shell, but this is not its main purpose.

  clash-showinfo-wrapper takes arguments
    `--command` : `list` or `show`
    `--info`    : what to show; should be item from `list`
    `--filter`  : Lua pattern to filter output with
    `-i`        : When present and filter is specified, the filter is case-insensitive
]]--

local remove = table.remove
local open = io.open
local ipairs, pairs, print = ipairs, pairs, print

local lfs = require("lfs")
local cf = require("clash.helper.filter")

-- Items available and the type and path where to find the information.
-- For now, the wrapper only support reading a file (itype == file).
local available = {
  { what = "cpu", itype = "file", where = "/proc/cpuinfo" },
  { what = "memory", itype = "file", where = "/proc/meminfo" },
}

-- see if the specified info exists in the system
-- For now, only file-based information is supported.
do
  local exists = {}
  for _, item in ipairs(available) do
    if item.itype == "file" then
      if lfs.symlinkattributes(item.where, "mode") == "file" then
        exists[#exists + 1] = item
      end
    end
  end
  -- sort alphabetically for convencience
  table.sort(exists, function(lhs,rhs) return (lhs.what < rhs.what) end)
  available = exists
end

-- Helper function to run a string through a filter, if any
local function doprint(what, filter, filter_is_case_insensitive)
  if filter then
    if cf(what, filter, filter_is_case_insensitive) then
      print(what)
    end
  else
    print(what)
  end
end

-- Print a file; lines are filtered if a filter is specified
local function print_file(file, filter, filter_is_case_insensitive)
  local fd = open(file)
  if fd then
    for line in fd:lines() do
      doprint(line, filter, filter_is_case_insensitive)
    end
    fd:close()
  end
end

-- List the items available to show
local function list(what, filter, filter_is_case_insensitive)
  for _, item in ipairs(available) do
    if item then
      doprint(item.what, filter, filter_is_case_insensitive)
    end
  end
end

-- Show info for a certain item, if the item is available
local function show(info, filter, filter_is_case_insensitive)
  for _, item in pairs(available) do
    if item.what == info then
      if item.itype == "file" then
        print_file(item.where, filter, filter_is_case_insensitive)
      else
        print("Item type not supported")
      end
      break
    end
  end
end

-- Handlers for commands
local handlers = {
  list = list,
  show = show,
}

-- Helper function to remove the first item from a table (`pop`)
local function pop(table)
  return remove(table, 1)
end

-- Parse the arguments that are passed to the module.
-- Arguments should be valid, but parse_arg will silently ignore any invalid argument.
local function parse_arg(arg)
  local args = {}
  for i=1, #arg do
    local opt = pop(arg)
    if not opt then
      break -- all arguments are popped
    elseif opt == "--command" then
      args.command = pop(arg) --next argument is command value, e.g. `show`
    elseif opt == "--info" then
      args.info = pop(arg) -- next argument is what info to show
    elseif opt == "-i" then
      args.cifilter = true -- flag indicates filter is case-insensitive
    elseif opt == "--filter" then
      args.filter = pop(arg) -- next argument is filter value (a Lua pattern)
    end
  end
  return args
end

local function main(arg)
  local args = parse_arg(arg)
  local handler = handlers[args and args.command]
  if handler then
    handler(args.info, args.filter, args.cifilter)
  end
end

main(arg)
