#!/usr/bin/lua

---------------------------------
--! @file
--! @brief This module reads out all modeswitch sections in the mobiled UCI config and puts them in the /etc/usb-mode.json file
---------------------------------
local json = require("dkjson")
local uci = require('uci')

local function get_custom_modeswitches()
	local c = uci.cursor()
	local modeswitches = {}
	c:foreach("mobiled", "modeswitch", function(s) table.insert(modeswitches, s) end)
	return modeswitches
end

-- Retrieve the data from /rom in order to guard against a user powering off the device
-- while the data is still being written in set_modeswitch_data
-- UCI defaults script will not be removed and run again next boot, correctly updating the usb-mode.json file
local function get_modeswitch_data()
	local f = io.open("/rom/etc/usb-mode.json", "rb")
	if f then
		local content = f:read("*all")
		f:close()
		return json.decode(content)
	end
end

local function set_modeswitch_data(modeswitch_data)
	local f = io.open("/etc/usb-mode.json", "wb")
	if f then
		f:write(json.encode(modeswitch_data, { indent = true }))
		f:close()
	end
end

local function add_message_id(modeswitch_data, message)
	for k, m in pairs(modeswitch_data.messages) do
		if m == message then
			return k
		end
	end
	-- Insert a new message at the end of the list
	table.insert(modeswitch_data.messages, message)
	return #modeswitch_data.messages-1
end

local function add_custom_modeswitch(modeswitch_data, modeswitch)
	if modeswitch.storage_id and modeswitch.modeswitch_str and modeswitch.modem_id then
		local vid, pid = string.match(modeswitch.modem_id, "(%x+):(%x+)")
		if vid and pid then
			if modeswitch_data.devices[modeswitch.storage_id] then
				-- Remove the original device
				modeswitch_data.devices[modeswitch.storage_id] = nil
			end
			local message_id = add_message_id(modeswitch_data, modeswitch.modeswitch_str)
			modeswitch_data.devices[modeswitch.storage_id] = {
				['*'] = {
					['msg'] = {
						[1] = message_id
					},
					['t_vendor'] = tonumber (vid, 16),
					['t_product'] = {
						[1] = tonumber (pid, 16)
					}
				}
			}
			return true
		end
	end
end

local custom_modeswitches = get_custom_modeswitches()
if #custom_modeswitches >= 1 then
	local modeswitch_data = get_modeswitch_data()
	if modeswitch_data then
		local modified = false
		for _, custom_modeswitch in pairs(custom_modeswitches) do
			local ret = add_custom_modeswitch(modeswitch_data, custom_modeswitch)
			if ret then
				modified = true
			end
		end
		if modified then
			set_modeswitch_data(modeswitch_data)
		end
	end
end
