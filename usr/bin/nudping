#!/usr/bin/env lua

local assert, io, string = assert, io, string
local format, match = string.format, string.match
local logger = require 'transformer.logger'
local cursor = require("uci").cursor()
local avg = 0
local result = "fail"
local config = "nud"
local ipAddr, payload
local process = require("tch.process")

local output

-- Function to Initiate the Ping test
local function ping()
  -- fetch the ipaddress to ping
  ipAddr = cursor:get(config, "diag", "host")
  payload = cursor:get(config, "diag", "payload")
  local timeout = 10
  local count = 5
  if ipAddr then
    local cmdline
    if payload and payload ~= "0" then
      cmdline = {"-c", count, "-W", timeout, "-s", payload, ipAddr}
    else
      cmdline = {"-c", count, "-W", timeout, ipAddr}
    end
    local p = process.popen("ping", cmdline, "re")
    output = p:read("*a")
    p:close()
    if match(output, "(%s)0%% packet loss")then
      result = "pass"
    else
      result = "fail"
    end
    if match(output, "/(%d+)%.%d+/") then
      avg = match(output, "/(%d+)%.%d+/")
    end
  end
end

local err, err_msg = pcall(ping)

if not err then
  logger:critical(err_msg)
end

-- store the roundtrip time and ipaddress to ping in file
local fh, msg = io.open("/tmp/nud", "w")
assert(fh, msg)
fh:write(format('%d\n', avg))
fh:write(format('%s\n', ipAddr or ""))
fh:close()

-- store the ping results in file
fh, msg = io.open("/tmp/nud_ping", "w")
assert(fh, msg)
for line in output:gmatch("[^\r\n]+") do
  if match(line, "(%d+) bytes from (%S+)%: seq=(%d+) ttl=(%d+)") then
    fh:write(format('%s\n',line))
  end
end
fh:close()

cursor:set(config, "diag", "result", result)
cursor:set(config, "diag", "rtt", avg)
cursor:commit(config)
