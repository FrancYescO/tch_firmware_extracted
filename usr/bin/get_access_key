#!/bin/sh
# Copyright (C) 2016 Technicolor Delivery Technologies, SAS

# The supported rip entries
rip_entry_rndA="/proc/rip/0107"   # Legacy
rip_entry_gak="/proc/rip/0124"    # Generic Access Key (GAK)
rip_entry_cgakl="/proc/rip/012f"  # Customizable Generic Access Key List (CGAKL)


# Helper function for logging with category `generic_access_key`
__log() {
	logger -t generic_access_key "$1"
}

# Helper function to cut the requested key from the ASCII data containing the keys
#   Params: gak_id, integer that specifies which part of key data to get; typically 1 to 10
#           nmbr_of_keys, integer that specifies how many keys are in the rip entry
#           len_of_keys, integer that specifies the length from the individual keys
#           data, ASCII data from the rip entry; i.e. the actual keys
#   Returns: the key or empty result in case of invalid input
__key_from_data() {
	local result=""

	local gak_id=$1
	local nmbr_of_keys=$2
	local len_of_keys=$3
	local data=$4

	[[ "$gak_id" -gt 0 && "$gak_id" -le "$nmbr_of_keys" ]] && {
		let offset="($gak_id-1)*$len_of_keys"
		result=${data:$offset:$l}
	}

	echo $result
}

# Get key from CGAKL rip entry 012f
#   Params: gak_id, integer that specifies which part of key data to get; 1 to [number of keys in CGAKL]
#   Returns: the key or empty result in case of invalid input
_cgakl() {
	local gak_id=$1

	# ASCII data containing the keys
	local data=$(dd if=$rip_entry_cgakl bs=1 skip=2 2>/dev/null)
	# Number of keys
	local ne=$(hexdump -v -n1 -e '/1 "%d"' $rip_entry_cgakl)
	# Length of keys
	local l=$(hexdump -v -n1 -s1 -e '/1 "%d"' $rip_entry_cgakl)

	echo $(__key_from_data $gak_id $ne $l $data)
}

# Get key from GAK rip entry 0124
#   Params: gak_id, integer that specifies which part of key data to get; 1 to 10
#   Returns: the key or empty result in case of invalid input
_gak() {
	local gak_id=$1

	# ASCII data containing the keys
	local data=$(cat $rip_entry_gak)
	# Per specification, rip entry 0124 has 10 keys
	local ne=10
	# Per specification, rip entry 0124 has keys with length 8
	local l=8

	echo $(__key_from_data $gak_id $ne $l $data)
}

# Get key from GAK rip entry 0107
#   Params: gak_id, integer that specifies which part of key data to get.
#           The function only returns a key for gak_id `1` or empty
#   Returns: the key or empty result in case of invalid input.
_randomA() {
	local gak_id=${1:-1}

	if [[ $gak_id -eq 1 && -x /usr/bin/get_legacy_access_key ]]; then
		echo $(/usr/bin/get_legacy_access_key)
	else
		__log "Not returning legacy key for gak_id $gak_id !"
	fi
}

# Get a generic access key from RIP.
# In order of preference, get_key looks for RIP entries 012f (CGAKL), 0124 (GAK) and 0107 (legacy).
#   Params: req_gak_id, integer that specifies which part of RIP GAK to get; typically 1 to 10, or higher for board with CGAKL
#   Returns: the key or empty result when
#              * req_gak_id is - empty
#                              - lower than 1 or higher than [number of keys in GAK]
#                              - not a number
#              * no supported rip entry found
_get_key() {
	local req_gak_id=$1
	local result=""

	if [[ ! -z "$req_gak_id" ]]; then

		# Is argument an integer number?
		if [[ "$req_gak_id" -eq "$req_gak_id" ]] 2>/dev/null; then

			# Use gak_id for arithmetic operations
			let gak_id=$req_gak_id

			# rip 012f
			if [[ -f "$rip_entry_cgakl" ]]; then

				result=$(_cgakl $gak_id)

			# rip 0124
			elif [[ -f "$rip_entry_gak" ]]; then

				result=$(_gak $gak_id)

			# rip 0107
			elif [[ -f "$rip_entry_rndA" ]]; then

				result=$(_randomA $gak_id)

			else

				# No valid rip entry? Should never happen, but be defensive
				__log "Error: this board has neither rip entry 012f, 0124, 0107 !"
				# Nothing to return
				return

			fi
		else
			__log "Error: please provide an integer gak_id"
		fi
	fi

	if [[ -z "$result" ]]; then
		__log "Error: could not get GAK for gak_id=${req_gak_id:-<empty>}"
	else
		echo $result
	fi
}

# When gak_id is empty, default to `1`
_get_key ${1:-1}
