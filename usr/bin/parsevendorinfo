#!/usr/bin/env lua
logger=require('transformer.logger')
l=logger.new('parsevendorinfo',6)
interface=arg[1]
vendorinfo=arg[2]
suboptions={}
suboption=nil
state=0
currtoken={}

for c in vendorinfo:gmatch('.') do
	if state==0 then
		if c==',' then
			suboption=table.concat(currtoken)
			for i,v in ipairs(currtoken) do
				currtoken[i]=nil
			end
			state=1
		else
			currtoken[#currtoken+1]=c
		end
	elseif state==1 then
		if c=='%' then
			state=2 -- escape
		elseif c==',' then
			suboptions[suboption]=table.concat(currtoken)
			for i,v in ipairs(currtoken) do
				currtoken[i]=nil
			end
			state=0
		else
			currtoken[#currtoken+1]=c
		end
	elseif state==2 then
		currtoken[#currtoken+1]=c
		state=1
	elseif state==3 then
		l:error("error while parsing")
	end
end

if state==1 then
	-- close last
	suboptions[suboption]=table.concat(currtoken)
else
	l:error("error while parsing")
end

-- check if there is a processing script installed
-- and that it exposes a method 'process'
f=io.open("/usr/lib/lua/processvendorinfo.lua","r")
if f then
	f:close()
	processvendorinfo=require('processvendorinfo')
	if processvendorinfo.process then
		processvendorinfo.process(interface,suboptions)
	else
		l:error("processvendorinfo.lua does not expose a process method")
	end
else
	l:error("failed to find processing script /usr/lib/lua/processvendorinfo.lua")
end
