#!/bin/sh

# This is a lxc template for Technicolor homeware

# Make sure the usual locations are in PATH
export PATH=$PATH:/usr/sbin:/usr/bin:/sbin:/bin

install_homewarebox()
{
    rootfs=$1

    tree="\
$rootfs/var/lock \
$rootfs/var/run \
$rootfs/etc/init.d \
$rootfs/etc/rc.d \
$rootfs/etc/config \
$rootfs/etc/opkg/keys \
$rootfs/dev/shm \
$rootfs/proc \
$rootfs/sys \
$rootfs/bin \
$rootfs/sbin \
$rootfs/usr/bin \
$rootfs/usr/sbin \
$rootfs/usr/share/libubox \
$rootfs/usr/lib/lua \
$rootfs/usr/lib/opkg \
$rootfs/tmp \
$rootfs/home \
$rootfs/root \
$rootfs/lib/config \
$rootfs/lib/functions"

    mkdir -p $tree
    if [ $? -ne 0 ]; then
        return 1
    fi

    cat <<EOF > $rootfs/etc/passwd
root:x:0:0:root:/root:/bin/sh
EOF

    cat <<EOF > $rootfs/etc/group
root:x:0:root
EOF

	cat <<EOF > $rootfs/etc/preinit
#!/bin/sh
#As we don't run procd in lxc, rc.d/S* process needs to be started within preinit instead of inittab
if [ -n "\$(ls /etc/rc.d/ |grep S*)" ]; then
	for pi_source_file in /etc/rc.d/S*; do
		\$pi_source_file start
	done
fi
EOF

    cat <<EOF > $rootfs/etc/opkg.conf
dest root /
dest ram /tmp
EOF

    cat <<EOF > $rootfs/etc/resolv.conf
EOF

    #Copy the host shadow file.
    cp /etc/shadow $rootfs/etc/shadow

    #Copy the opkg information.
    cp -r /usr/lib/opkg/* $rootfs/usr/lib/opkg/

    return 0
}

mount_homeware_libraries()
{
    path=$1
    rootfs=$2

    find /lib -name "*.so*" >> /tmp/liblist
    find /usr/lib -name "*.so*" >> /tmp/liblist

    while read -r line; do
        if [ -d $rootfs${line%/*} ]; then
            if test -h $line; then
                cp -d $line $rootfs${line%/*}
            else
                touch $rootfs$line
                echo "lxc.mount.entry = $line ${line#*/} none ro,bind 0 0" >> $path/config
            fi
        fi
    done < /tmp/liblist
    rm /tmp/liblist
}

mount_homeware_routines()
{
    path=$1
    rootfs=$2

    # Mount homeware base routines.
    find /bin/ -name "*" >> /tmp/routines
    find /sbin/ -name "*" >> /tmp/routines
    find /usr/bin/ -name "*" >> /tmp/routines
    find /usr/sbin/ -name "*" >> /tmp/routines

    while read -r line; do
        case ${line##*/} in
            runner*|wifi*|qos*|fw3|hostapd*|dnsmasq|pppd|pppoe-relay|time_change_monitor.lua|tod.lua|status-led-eventing.lua|\
            wps*|button*|wireless*|acl_button_pressed.sh|rip-create-efu.sh|wansensing.lua|\
            rip-write-efu.sh|scheduledreboot|scheduledreboot_helper|*_wlan_feature.sh|sfp_get.sh|led*|\
            *ctl|telnetd|dropbear|urlfilterd|watchdog-tch|wfa-testsuite-daemon|\
            intfdiag|kernel-core-handler|miniupnpd*|mmpbx*|nginx|ntpd*|conntrack*|network-tch.sh|\
            hostmanager*|clash*|lxc*|cwmp*|procd|wl|bcmswconfig|bcmubusbridge|rtfd*|bdmf_shell|board_detect|bs|\
            config_generate|df|dmesg|login|login.sh|mknod|mount*|mpstat|netmsg|netstat|restricted_shell|sync|ubusd|\
            umount|vi|zcat|faultmgmt*|process*|atmping*|flock|free|fseventd|bli*|gcom|\
            *access_key|getrandom|readview|redirecthelper*|hostid|reset|ifstat|scp|igd*|igmpproxy|\
            server_selection_diag*|interceptd|setportmirror*|ipping*|setuprunner|boot*|setxdsloemparam|ipptool|\
            signature_checker|jshn|bulkdata|speedlog|lcm*|sscertgen|cancel|ssh*|sudo|cg*|du|\
            switchover|load_balancer|swmdk|sysupgrade*|lp*|taskset|tee|chrt|lscgroup|lsof|lssubsys|lsusb|telnet|\
            thermal*|comgt|conv*|lte*|mcsnooper|crontab|top|cups*|mdkshell|mldproxy|mmdbd|dbclient|mobiled*|dfree|\
            *transformer*|*dhcp*|mud|ubus_wait_for_event|mvfs|udp_echo*|neighmd|newsrpuser|upgrade*|dlnad|ngwfdd|upnp*|\
            dmdump|uptime|dnsget|nslookupdiag*|usbmode_config|dnsquery|dropbear*|nudping*|dsl*|odm*|parsevendorinfo|\
            passwd|picocom|xdsl*|pinholehelper*|464xlatcfg|askfirst|core-handler|devstatus|firstboot|halt|hotplug-call|\
            hwclock|if*|init.lxc|jffs*|kmodloader|logread|logd|logger|lsmod|mod*|mtd|netifd|pivot_root|poweroff|rmmod|snapshot*|\
            switch_root|udevtrigger|uqmi|usbmode|validate_data|vconfig|6rdcalc|accept|addgroup|arping|chat|chpasswd|\
            chroot|crond|*tables*|ipset*|mapcalc|nmbd|nstat|reject|smbd|smbpasswd|ss|tc|tcpdump|visudo|xinetd|\
            xl2tpd*|xargs|yes|'')
                ;;
            *)
                if test -h $line; then
                    cp -d $line $rootfs${line%/*}
                else
                    touch $rootfs$line
                    echo "lxc.mount.entry = $line ${line#*/} none ro,bind 0 0" >> $path/config
                fi
                ;;
        esac
    done < /tmp/routines
    rm /tmp/routines
}

configure_homewarebox()
{
    path=$1
    rootfs=$2
    name=$3

    grep -q "^lxc.rootfs.path" $path/config 2>/dev/null || echo "lxc.rootfs.path = $rootfs" >> $path/config

    # Mount openwrt base files.
    touch $rootfs/etc/rc.common
    touch $rootfs/lib/functions.sh
    touch $rootfs/lib/functions/preinit.sh
    touch $rootfs/lib/functions/network.sh
    touch $rootfs/lib/functions/service.sh
    touch $rootfs/lib/config/uci.sh
    touch $rootfs/usr/share/libubox/jshn.sh
    touch $rootfs/var/run/ubus.sock

    cat <<EOF >> $path/config
lxc.uts.name = $name
lxc.pty.max = 1024
lxc.signal.halt = SIGKILL
lxc.cap.drop = sys_module mac_admin mac_override sys_time
lxc.net.0.type = none
lxc.net.0.flags = up

lxc.mount.entry = /var/run/ubus.sock var/run/ubus.sock none ro,bind 0 0
lxc.mount.entry = /etc/opkg/keys etc/opkg/keys none ro,bind 0 0
lxc.mount.entry = /etc/rc.common etc/rc.common none ro,bind 0 0
lxc.mount.entry = /lib/functions.sh lib/functions.sh none ro,bind 0 0
lxc.mount.entry = /lib/functions/preinit.sh lib/functions/preinit.sh none ro,bind 0 0
lxc.mount.entry = /lib/functions/network.sh lib/functions/network.sh none ro,bind 0 0
lxc.mount.entry = /lib/functions/service.sh lib/functions/service.sh none ro,bind 0 0
lxc.mount.entry = /lib/config/uci.sh lib/config/uci.sh none ro,bind 0 0
lxc.mount.entry = /usr/share/libubox/jshn.sh usr/share/libubox/jshn.sh none ro,bind 0 0
#lxc.mount.auto = cgroup:mixed proc:mixed sys:mixed
EOF

mount_homeware_libraries $path $rootfs
mount_homeware_routines $path $rootfs
}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path> [--rootfs=<path>] [-n|--name=<name>]
EOF
    return 0
}

for i in "$@"
do
  case "$i" in
    -h|--help)
      usage $0
      exit 0
      ;;
    -p=*|--path=*)
      path="${i#*=}"
      shift
      ;;
    --rootfs=*)
      rootfs="${i#*=}"
      shift
      ;;
    -n=*|--name=*)
      name="${i#*=}"
      shift
      ;;
    *)
      shift
      ;;
  esac
done

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

# detect rootfs
config="$path/config"
if [ -z "$rootfs" ]; then
    if grep -q '^lxc.rootfs.path' $config 2>/dev/null ; then
        rootfs=$(awk -F= '/^lxc.rootfs.path =/{ print $2 }' $config)
    else
        rootfs=$path/rootfs
    fi  
fi

install_homewarebox $rootfs
if [ $? -ne 0 ]; then
    echo "failed to install homewarebox's rootfs"
    exit 1
fi

configure_homewarebox $path $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to configure homewarebox template"
    exit 1
fi

