#!/bin/sh

#
# lxc: linux Container library

# Authors:
# Daniel Lezcano <daniel.lezcano@free.fr>

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

# Detect use under userns (unsupported)
for arg in "$@"; do
    [ "$arg" = "--" ] && break
    if [ "$arg" = "--mapped-uid" -o "$arg" = "--mapped-gid" ]; then
        echo "This template can't be used for unprivileged containers." 1>&2
        echo "You may want to try the \"download\" template instead." 1>&2
        exit 1
    fi
done

# Make sure the usual locations are in PATH
export PATH=$PATH:/usr/sbin:/usr/bin:/sbin:/bin

install_dropbear()
{
    rootfs=$1

    tree="\
$rootfs/var/empty/dropbear \
$rootfs/var/lib/empty/dropbear \
$rootfs/etc/init.d \
$rootfs/etc/rc.d \
$rootfs/etc/dropbear \
$rootfs/dev/shm \
$rootfs/run/dropbear \
$rootfs/proc \
$rootfs/sys \
$rootfs/bin \
$rootfs/sbin \
$rootfs/usr \
$rootfs/tmp \
$rootfs/home \
$rootfs/root \
$rootfs/lib \
$rootfs/lib64"

    mkdir -p $tree
    if [ $? -ne 0 ]; then
        return 1
    fi

    ln -s /run $rootfs/var/run
    if [ $? -ne 0 ]; then
        return 1
    fi

    return 0
}

configure_dropbear()
{
    rootfs=$1

    cat <<EOF > $rootfs/etc/passwd
root:x:0:0:root:/root:/bin/sh
dropbear:x:74:74:Privilege-separated SSH:/var/empty/dropbear:/sbin/nologin
EOF

    cat <<EOF > $rootfs/etc/group
root:x:0:root
dropbear:x:74:
EOF

cp /etc/shadow $rootfs/etc/shadow

dropbearkey -t rsa -f $rootfs/etc/dropbear/dropbear_rsa_host_key 2>&- >&-

    # by default setup root password with no password

    return 0
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3

    init_path=$(realpath --relative-to=/ $(readlink -f /sbin/init))

    grep -q "^lxc.rootfs.path" $path/config 2>/dev/null || echo "lxc.rootfs.path = $rootfs" >> $path/config
cat <<EOF >> $path/config
lxc.uts.name = $name
lxc.pty.max = 1024
lxc.cap.drop = sys_module mac_admin mac_override sys_time

# When using LXC with apparmor, uncomment the next line to run unconfined:
#lxc.apparmor.profile = unconfined

lxc.net.0.type = veth
lxc.net.0.flags = up
lxc.net.0.link = br-lan
lxc.net.0.ipv4.address = 192.168.1.200

#lxc.mount.entry = /dev dev none ro,bind 0 0
lxc.mount.entry = /lib lib none ro,bind 0 0
lxc.mount.entry = /bin bin none ro,bind 0 0
lxc.mount.entry = /usr usr none ro,bind 0 0
lxc.mount.entry = /sbin sbin none ro,bind 0 0
lxc.mount.entry = tmpfs run/dropbear tmpfs mode=0644 0 0
lxc.mount.entry = /usr/share/lxc/templates/lxc-dropbear sbin/init none ro,bind 0 0
lxc.mount.entry = /etc/init.d etc/init.d none ro,bind 0 0

#lxc.mount.auto = cgroup:mixed proc:mixed sys:mixed
EOF

    if [ -d /etc/rc.d ]; then
        cat <<EOF >> $path/config
lxc.mount.entry = /etc/rc.d etc/rc.d none ro,bind 0 0
EOF
    fi
}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path> [--rootfs=<path>]
EOF
    return 0
}

check_for_cmd()
{
    cmd_path=`type $1`
    if [ $? -ne 0 ]; then
        echo "The command '$1' $cmd_path is not accessible on the system"
        exit 1
    fi
    # we use cut instead of awk because awk is alternatives symlink on ubuntu
    # and /etc/alternatives isn't bind mounted
    cmd_path=`echo $cmd_path |cut -d ' ' -f 3`
}

for i in "$@"
do
  case "$i" in
    -h|--help)
      usage $0
      exit 0
      ;;
    -p=*|--path=*)
      path="${i#*=}"
      shift
      ;;
    --rootfs=*)
      rootfs="${i#*=}"
      shift
      ;;
    -n=*|--name=*)
      name="${i#*=}"
      shift
      ;;
    *)
      shift
      ;;
  esac
done

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

if [ $0 = "/sbin/init" ]; then

    PATH="$PATH:/bin:/sbin:/usr/sbin"
    check_for_cmd /sbin/init.lxc
    check_for_cmd dropbear
    dropbear_path=$cmd_path

    exec /sbin/init.lxc -- $dropbear_path -B 
    exit 1
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

# detect rootfs
config="$path/config"
if [ -z "$rootfs" ]; then
    if grep -q '^lxc.rootfs.path' $config 2>/dev/null ; then
        rootfs=$(awk -F= '/^lxc.rootfs.path =/{ print $2 }' $config)
    else
        rootfs=$path/rootfs
    fi
fi

install_dropbear $rootfs
if [ $? -ne 0 ]; then
    echo "failed to install dropbear's rootfs"
    exit 1
fi

configure_dropbear $rootfs
if [ $? -ne 0 ]; then
    echo "failed to configure dropbear template"
    exit 1
fi

copy_configuration $path $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to write configuration file"
    exit 1
fi
