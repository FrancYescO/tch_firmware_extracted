local InternetGatewayDevice_X_HPSAInfo_ = {
  objectType = {
    name = "InternetGatewayDevice.X_HPSAInfo.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "This object provides information specific to the connected device such as a dongle, for Vodafone. The Vodafone specific implementation has been moved from Cellular.Interface.map to this file to fulfill the stipulated requirements.",
    parameters = {
    }
  }
}

register(InternetGatewayDevice_X_HPSAInfo_)

local X_HPSAInfo_DeviceInfo_ = {
  objectType = {
    name = "InternetGatewayDevice.X_HPSAInfo.DeviceInfo.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "This object specifies the hardware information of the connected device",
    parameters = {
      IMEI = {
        access = "readOnly",
	type = "string",
	min = "15",
	max = "15",
        description = "Provides the International Mobile Equipment Identity or IMEI number",
      },
      IMSI = {
        access = "readOnly",
        type = "string",
        description = "Specifies the IMSI of the SIM card used in the device",
      },
      HardVersion = {
        access = "readOnly",
        type = "string",
        description = "Specifies the hardware version of the device connected",
      },
      SerialNumber = {
        access = "readOnly",
        type = "string",
        description = "Specifies the serial number of the connected device",
      },
      Manufacturer = {
        access = "readOnly",
        type = "string",
        description = "States the device's manufacturer",
        },
      SoftVersion = {
        access = "readOnly",
        type = "string",
        description = "Specifies the software version of the connected device",
      },
      CardModel = {
        access = "readOnly",
        type = "string",
        description = "Specifies the model of the connected device",
      },
    }
  }
}

local mapper = mapper
local helper = require("mobiled.scripthelpers")
local uciHelper = mapper("ucihelper")

local getFromUci = uciHelper.get_from_uci
local getUbusData = helper.getUbusData
local setOnUci = uciHelper.set_on_uci
local forEachOnUci = uciHelper.foreach_on_uci

local mobiledBinding = { config = "mobiled", sectionname = "device"}
local envBinding = { config = "env", sectionname = "var"}
local transactions = {}
local conn = mapper("ubus").connect()
if not conn then
  return
end

local function getMobiledUbus(call, type)
  return getUbusData(conn, call, type, {})
end

X_HPSAInfo_DeviceInfo_.get = {
  CardModel = function()
    local data = getMobiledUbus("mobiled.device", "get")
    return data.model or ""
  end,
  SoftVersion = function()
    local data = getMobiledUbus("mobiled.device", "get")
    return data.software_version or ""
  end,
  Manufacturer = function()
    local data = getMobiledUbus("mobiled.device", "get")
    return data.manufacturer or ""
  end,
  SerialNumber = function()
    local data = getMobiledUbus("mobiled.device", "get")
    return data.serial or ""
  end,
  HardVersion = function()
    local data = getMobiledUbus("mobiled.device", "get")
    return data.hardware_version or ""
  end,
  IMSI = function()
    local data = getMobiledUbus("mobiled.sim", "get")
    return data.imsi or ""
  end,
  IMEI = function()
    local data = getMobiledUbus("mobiled.device", "get")
    return data.imei or ""
  end,
}

register(X_HPSAInfo_DeviceInfo_)

local X_HPSAInfo_Stats_ = {
  objectType = {
    name = "InternetGatewayDevice.X_HPSAInfo.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "Specifies the connection status of the connected device",
    parameters = {
      ModemStatus = {
        access = "readOnly",
        type = "string",
        description = "Specifies if the modem status is up or down.",
      },
      SIMStatus = {
        access = "readOnly",
        type = "string",
        description = "Parameter specifies the status of the SIM card used in the device.",
      },
      PinCodeStatus = {
        access = "readOnly",
        type = "string",
        description = "Specifies the pin code status.",
      },
      RegisteredNetwork = {
        access = "readOnly",
        type = "string",
        description = "Specifies the registered network of the HPSA connection.",
      },
      ConnectionStatus = {
        access = "readOnly",
        type = "string",
        description = "Shows the current HSPA connection status.",
      },
      SignalStrength = {
        access = "readOnly",
        type = "string",
        description = "It specifies the current signal's strength.",
      },
      VoiceWorking = {
        access = "readOnly",
        type = "string",
        description = "This parameter shows if the VoCS or VoPS is working or not, 0 or 1",
      },
      ConnectionType = {
        access = "readOnly",
        type = "string",
        description = "It shows the HPSA connection type, such as WCDMA, LTE.",
      },
      RegisteredBand = {
        access = "readOnly",
        type = "string",
        description = "It shows the current registered network band, such as WCDMA800, WCDMA1900.",
      },
      USBPortUsed = {
        access = "readOnly",
        type = "string",
        description = "This parameter specifies the USB port used by the connected dongle.",
      },
    }
  }
}

local function getFromMobiledDevice(param)
  local data = {}
  forEachOnUci( mobiledBinding, function(s)
    data = s
    return false
  end)
  return data[param] or ""
end

local function getFromEnv(param)
  envBinding.option = param
  return getFromUci(envBinding)
end

local function setOnMobiledDevice(mapping, param, val)
  forEachOnUci( mobiledBinding, function(s)
    local binding = {sectionname = s[".name"], config = "mobiled", option = param, default = ""}
    setOnUci(binding, val, commitapply)
    transactions[mobiledBinding.config] = true
  end)
end

local function setOnEnv(mapping, param, val)
  envBinding.option = param
  setOnUci(envBinding, val, commitapply)
  transactions[envBinding.config] = true
end

local function commit()
  for config in pairs(transactions) do
    uciHelper.commit({config = config})
  end
  transactions =  {}
end

local function revert()
  for config in pairs(transactions) do
    uciHelper.revert({config = config})
  end
  transactions = {}
end

X_HPSAInfo_Stats_.get = {
  USBPortUsed = function()
    return getFromEnv("x_hspa_switch_USBPortUsed")
  end,
  RegisteredBand = function()
    local data = getMobiledUbus("mobiled.radio", "signal_quality")
    return data.lte_band or ""
  end,
  ConnectionType = function()
    local data = getMobiledUbus("mobiled.radio", "signal_quality")
    return data.radio_interface or ""
  end,
  VoiceWorking = function()
    return getFromEnv("x_hspa_switch_VoiceWorking")
  end,
  SignalStrength = function()
    local data = getMobiledUbus("mobiled.radio", "signal_quality")
    return data.rssi or ""
  end,
  ConnectionStatus = function()
    local info = getFromMobiledDevice("enable")
    if info == "0" then
      return ""
    end
    local data = getMobiledUbus("mobiled.network", "serving_system")
    return data and data.nas_state or ""
  end,
  RegisteredNetwork = function()
    local info = getFromMobiledDevice("enable")
    if info == "0" then
      return ""
    end
    local data = getMobiledUbus("mobiled.network", "serving_system")
    return data and data.plmn_info.mcc and data.plmn_info.mnc and data.plmn_info.mcc .. data.plmn_info.mnc or ""
  end,
  PinCodeStatus = function()
    local data = getMobiledUbus("mobiled.sim.pin", "get")
    return data.pin_state or ""
  end,
  SIMStatus = function()
    local data = getMobiledUbus("mobiled.sim", "get")
    return data.sim_state or ""
  end,
  ModemStatus = function()
    local data = getMobiledUbus("mobiled.device", "get")
    return data.initialized or ""
  end,
}

register(X_HPSAInfo_Stats_)

local X_HPSAInfo_Config_ = {
  objectType = {
    name = "InternetGatewayDevice.X_HPSAInfo.Config.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "Specifies the configuration details (i.e) APN, dial number.. etc of the connected device",
    parameters = {
      APN = {
        access = "readWrite",
        type = "string",
        description = "Specifies the APN for the connected device.",
      },
      DialNumber = {
        access = "readOnly",
        type = "string",
        description = "The dial number for the connected device.",
      },
      AuthenticationProtocol = {
        access = "readWrite",
        type = "string",
        description = "Specifies the Authentication protocol for the setup data connection.",
      },
    }
  }
}

local function getMobdDevProfiles(field)
  local info = getFromMobiledDevice(field)
  if info == "" then
    local data = getMobiledUbus("mobiled.device", "profiles")
    return data[field] or ""
  end
  return info or ""
end

X_HPSAInfo_Config_.get = {
  DialNumber = "ATD*99***1#",
  APN = function()
    return getMobdDevProfiles("apn")
  end,
  AuthenticationProtocol = function()
    return getMobdDevProfiles("authentication")
  end,
}

X_HPSAInfo_Config_.set = {
  AuthenticationProtocol = function(mapping, param, val)
    setOnMobiledDevice(mapping, 'authentication', val)
  end,
  APN = function(mapping, param, val)
    setOnMobiledDevice(mapping, 'apn', val)
  end,
}

X_HPSAInfo_Config_.commit = commit
X_HPSAInfo_Config_.revert = revert

register(X_HPSAInfo_Config_)

local X_HPSAInfo_Switch_ = {
  objectType = {
    name = "InternetGatewayDevice.X_HPSAInfo.Switch.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "Parameters specific to wansensing with respect to the connected device",
    parameters = {
      IfInstantMode = {
        access = "readOnly",
        type = "string",
        description = "Specifies backup mode for UMTS connection, Auto or Manual.",
      },
      IfSwitchConfirm = {
	access = "readOnly",
	type = "string",
	description = "Specifies the backup connection service type, enumeration of Voice, Data, Data_Voice, None.",
      },
      DSL2HSPADelayCS = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Specifies delay for VoCS change from primary WAN to HPSA connection.",
      },
      DSL2HSPADelayPS = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Specifies delay for VoPS change from primary WAN to HPSA connection.",
      },
      HSPA2DSLDelayCS = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Specifies delay for VoCS change from HPSA to primary WAN connection.",
      },
      HSPA2DSLDelayPS = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Specifies delay for VoPS change from HPSA to primary WAN connection.",
      },
      ProbeICMPCycle = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Specifies the interval for gateway backup mode.",
      },
      ProbeDNSCycle = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Specifies the interval for DNS backup mode.",
      },
    }
  }
}

X_HPSAInfo_Switch_.get = {
  IfInstantMode = function()
    return getFromEnv("x_hspa_switch_IfInstantMode")
  end,
  IfSwitchConfirm = function()
    return getFromEnv("x_hspa_switch_IfSwitchConfirm")
  end,
  DSL2HSPADelayCS = function()
    return getFromEnv("x_hspa_switch_DSL2HSPADelayCS")
  end,
  DSL2HSPADelayPS = function()
    return getFromEnv("x_hspa_switch_DSL2HSPADelayPS")
  end,
  HSPA2DSLDelayCS = function()
    return getFromEnv("x_hspa_switch_HSPA2DSLDelayCS")
  end,
  HSPA2DSLDelayPS = function()
    return getFromEnv("x_hspa_switch_HSPA2DSLDelayPS")
  end,
  ProbeICMPCycle = function()
    return getFromEnv("x_hspa_switch_ProbeICMPCycle")
  end,
  ProbeDNSCycle = function()
    return getFromEnv("x_hspa_switch_ProbeDNSCycle")
  end,
}

X_HPSAInfo_Switch_.set = {
  DSL2HSPADelayCS = function(mapping, param, val)
    setOnEnv(mapping, "x_hspa_switch_DSL2HSPADelayCS", val)
  end,
  DSL2HSPADelayPS = function(mapping, param, val)
    setOnEnv(mapping, "x_hspa_switch_DSL2HSPADelayPS", val)
  end,
  HSPA2DSLDelayPS = function(mapping, param, val)
    setOnEnv(mapping, "x_hspa_switch_HSPA2DSLDelayPS", val)
  end,
  HSPA2DSLDelayCS = function(mapping, param, val)
    setOnEnv(mapping, "x_hspa_switch_HSPA2DSLDelayCS", val)
  end,
  ProbeICMPCycle = function(mapping, param, val)
    setOnEnv(mapping, "x_hspa_switch_ProbeICMPCycle", val)
  end,
  ProbeDNSCycle = function(mapping, param, val)
    setOnEnv(mapping, "x_hspa_switch_ProbeDNSCycle", val)
  end,
}

X_HPSAInfo_Switch_.commit = commit
X_HPSAInfo_Switch_.revert = revert

register(X_HPSAInfo_Switch_)
