-- Automatically generated from InternetGatewayDevice:1.4
-- using generator version 2.3
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.",
        access = "readOnly",
        numEntriesParameter = "LANWLANConfigurationNumberOfEntries",
        minEntries = 0,
        maxEntries = math.huge,
        parameters = {
            Enable = {
                access = "readWrite",
                type = "boolean",
            },
            Status = {
                access = "readOnly",
                type = "string",
                enumeration = {
                    "Up",
                    "Error",
                    "Disabled",
                },
            },
            Name = {
                access = "readOnly",
                type = "string",
                max = "16",
            },
            BSSID = {
                access = "readOnly",
                type = "string",
            },
            MaxBitRate = {
                access = "readOnly", --readWrite not supported
                type = "string",
                max = "4",
            },
            Channel = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "255",
                    },
                },
            },
        --[[ TODO:
            AutoChannelEnable = {
                access = "readWrite",
                type = "boolean",
            },
        --]]
            SSID = {
                access = "readWrite",
                type = "string",
                max = "32",
            },
            BeaconType = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "None",
                    "Basic",
                    "WPA",
                    "11i",
                    "BasicandWPA",
                    "Basicand11i",
                    "WPAand11i",
                    "BasicandWPAand11i",
                },
            },
            MACAddressControlEnabled = {
                access = "readWrite",
                type = "boolean",
            },
            Standard = {
                access = "readOnly",
                type = "string",
                enumeration = {
                    "a",
                    "b",
                    "g",
                },
            },
            WEPKeyIndex = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "4",
                    },
                },
            },
            KeyPassphrase = {
                access = "readWrite",
                type = "string",
                max = "63",
            },
            WEPEncryptionLevel = {
                access = "readOnly",
                list = true,
                max = "64",
                type = "string",
                enumeration = {
                    "Disabled",
                    "40-bit",
                    "104-bit",
                },
            },
            BasicEncryptionModes = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "None",
                    "WEPEncryption",
                },
            },
            BasicAuthenticationMode = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "None",
                    "EAPAuthentication",
                    "SharedAuthentication",
                },
            },
            WPAEncryptionModes = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "TKIPEncryption",
                    "AESEncryption",
                    "TKIPandAESEncryption",
                },
            },
            WPAAuthenticationMode = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "PSKAuthentication",
                    "EAPAuthentication",
                },
            },
            IEEE11iEncryptionModes = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "TKIPEncryption",
                    "AESEncryption",
                    "TKIPandAESEncryption",
                },
            },
            IEEE11iAuthenticationMode = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "PSKAuthentication",
                    "EAPAuthentication",
                    "EAPandPSKAuthentication",
                },
            },
            PossibleChannels = {
                access = "readOnly",
                list = true,
                max = "1024",
                type = "string",
            },
            BasicDataTransmitRates = {
                access = "readWrite",
                list = true,
                max = "256",
                type = "string",
            },
            OperationalDataTransmitRates = {
                access = "readWrite",
                list = true,
                max = "256",
                type = "string",
            },
            PossibleDataTransmitRates = {
                access = "readOnly",
                list = true,
                max = "256",
                type = "string",
            },
            InsecureOOBAccessEnabled = {
                access = "readWrite",
                type = "boolean",
            },
            BeaconAdvertisementEnabled = {
                access = "readOnly",
                type = "boolean",
            },
            SSIDAdvertisementEnabled = {
                access = "readWrite",
                type = "boolean",
            },
            RadioEnabled = {
                access = "readWrite",
                type = "boolean",
            },
        --[[ TODO:
            TransmitPowerSupported = {
                access = "readOnly",
                list = true,
                max = "64",
                type = "unsignedInt",
                range = {
                  {
                    min = "0",
                    max = "100",
                  },
                },
            },
            TransmitPower = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                  {
                    min = "0",
                    max = "100",
                  },
                },
            },
        --]]
            AutoRateFallBackEnabled = {
                access = "readWrite",
                type = "boolean",
            },
            LocationDescription = {
                access = "readWrite",
                type = "string",
                max = "4096",
            },
            RegulatoryDomain = {
                access = "readWrite",
                type = "string",
                max = "3",
            },
            TotalPSKFailures = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            TotalIntegrityFailures = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            ChannelsInUse = {
                access = "readOnly",
                activeNotify = "canDeny",
                list = true,
                max = "1024",
                type = "string",
            },
            DeviceOperationMode = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "InfrastructureAccessPoint",
                    "WirelessBridge",
                    "WirelessRepeater",
                    "WirelessStation",
                },
            },
            DistanceFromRoot = {
                access = "readWrite",
                type = "unsignedInt",
            },
            PeerBSSID = {
                access = "readWrite",
                type = "string",
            },
            AuthenticationServiceMode = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "None",
                    "LinkAuthentication",
                    "RadiusClient",
                },
            },
        --[[ TODO:
            WMMSupported = {
                access = "readOnly",
                type = "boolean",
            },
            UAPSDSupported = {
                access = "readOnly",
                type = "boolean",
            },
            WMMEnable = {
                access = "readWrite",
                type = "boolean",
            },
            UAPSDEnable = {
                access = "readWrite",
                type = "boolean",
            },
        --]]
            TotalBytesSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            TotalBytesReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            TotalPacketsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            TotalPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            X_000E50_ACSState = {
                access = "readOnly",
                type = "string",
            },
            X_000E50_ACSMode = {
                access = "readOnly",
                type = "string",
            },
            X_000E50_ACSCHMonitorPeriod = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "10",
                    },
                },
            },
            X_000E50_ACSScanReport = {
                access = "readOnly",
                type = "string",
                max = "4096",
            },
            X_000E50_ACSScanHistory = {
                access = "readOnly",
                type = "string",
                max = "2560",
            },
            X_000E50_ACSRescanPeriod = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "604800",
                    },
                },
            },
            X_000E50_ACSRescanDelayPolicy = {
                access = "readWrite",
                type = "string",
            },
            X_000E50_ACSRescanDelay = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "10",
                        max = "3600",
                    },
                },
            },
            X_000E50_ACSRescanDelayMaxEvents = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "999",
                    },
                },
            },
            X_000E50_ACSCHFailLockoutPeriod = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "86400",
                    },
                },
            },
            X_000E50_ChannelWidth = {
                access = "readWrite",
                type = "string",
            },
            X_000E50_ShortGuardInterval = {
                access = "readWrite",
                type = "boolean",
            },
            X_000E50_SpaceTimeBlockCoding = {
                access = "readWrite",
                type = "boolean",
            },
            X_000E50_CyclicDelayDiversity = {
                access = "readWrite",
                type = "boolean",
            },

            AutoChannelEnable = {
                access = "readWrite",
                type = "boolean",
            },
            X_000E50_ACSRescan = {
                access = "readWrite",
                type = "boolean",
            },
            X_000E50_ACSBssList = {
                access = "readOnly",
                type = "string",
                max = "16384",
            },
            X_000E50_ChannelMode = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "Auto",
                    "Manual",
                },
            },
            X_000E50_Power = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "4",
                    },
                },
            },
            X_000E50_PowerDefault = {
                access = "readOnly",
                type = "string",
            },
            X_000E50_PowerList = {
                access = "readOnly",
                type = "string",
            },
            X_000E50_PacketsDropped = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            X_000E50_PacketsErrored = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            X_000E50_RemotelyManaged = {
                access = "readOnly",
                type = "boolean",
            },
            X_000E50_UpgradeURL = {
                access = "readWrite",
                type = "string",
            },
            X_000E50_UpgradeCheckPeriod = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "8760", -- one year
                   },
                },
            },
            X_000E50_UpgradeSWVersion = {
                access = "readOnly",
                type = "string",
            },
            X_000E50_BandSteerEnable = {
                access = "readWrite",
                type = "boolean",
            },
        -- TotalAssociations
        -- automatically created when InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.AssociatedDevice.{i}. is loaded
        }
    }
}

local require, mapper = require, mapper
local ipairs, pairs = ipairs, pairs
local register, commitapply = register, commitapply

local uci_helper = mapper("ucihelper")
local common = mapper("nwcommon")
local wlc = require("transformer.shared.WLANConfigurationCommon").getMappings(commitapply)

local conn = mapper("ubus").connect()

local entriesWLANDevice = function(_, parentkey)
  local entries = {}

  local ll_intfs = common.get_lower_layers(parentkey)
  local intfmap = {}

  if ll_intfs then
    for _,v in ipairs(ll_intfs) do
      intfmap[v] = true
    end
  end

  local wlanintf = conn:call("wireless.ssid", "get", {}) or {}
  local wlanradio = conn:call("wireless.radio", "get", {}) or {}

  -- 2 cases: either we have a remotely managed AP in which case we make sure the network entry (filled in by hostapd)
  --          corresponds to the current network
  --          or we have an integrate wireless, in which case we check that it's an interface for that network interface

  for k,v in pairs(wlanintf) do
    -- Remotely managed and the network associated is a LAN network
    local radio = wlanradio[v.radio] or {}
    local isRemote = radio.remotely_managed == 1
    if isRemote then
      local network = uci_helper.get_from_uci({ config = "wireless", sectionname = k, option = "network", extended = true})
      if network == parentkey then
          entries[#entries+1] = k .. "_remote"
      end
    elseif intfmap[k] then
      -- Integrated and the interface belongs to a LAN network
        entries[#entries+1] = k
    end
  end
  table.sort(entries)
  return entries
end

local iface_binding = {config = "wireless", sectionname = "wifi-iface"}

-- For a given radio name (radio_2G for instance), return the wifi-iface sections associated with it in UCI (wl0)
local function getIfacesForRadio(radio)
  local ifaces = {}
  uci_helper.foreach_on_uci(iface_binding, function(s)
    if s["device"] == radio then
      ifaces[#ifaces + 1] = s[".name"]
    end
  end)
  return ifaces
end

local ap_binding = {config = "wireless", sectionname = nil, option = "iface", extended = true}

-- For a given AP name (ap0 for instance), return the wifi-iface section associated with it in UCI (wl0)
local function getIfaceForAP(ap)
  ap_binding.sectionname = ap
  return uci_helper.get_from_uci(ap_binding)
end

local wireless_binding = { config = "wireless" }

local function get_uci_section(sectionname)
  wireless_binding.sectionname = sectionname
  return uci_helper.getall_from_uci(wireless_binding)
end

-- TODO remove this workaround when NG-15901 is implemented
local function handle_state_option(sectionname)
  local ifaces, igd
  local section = get_uci_section(sectionname)
  if section[".type"] == "wifi-iface" then
    ifaces = sectionname
    igd = "Enable"
  elseif section[".type"] == "wifi-ap" then
    ifaces = section["iface"]
    igd = "Enable"
  elseif section[".type"] == "wifi-device" then
    ifaces = getIfacesForRadio(sectionname)
    igd = "RadioEnabled"
  end
  return ifaces, igd
end

local function translate_cb(_, _, _, _, sectionname, option)
  local ifaces
  local igd
  if option == "ssid" then
    ifaces = sectionname
    igd = "SSID"
  elseif option == "channel" then
    ifaces = getIfacesForRadio(sectionname)
    igd = "Channel"
  elseif option == "wpa_psk_key" then
    ifaces = getIfaceForAP(sectionname)
    igd = "KeyPassphrase"
  elseif option == "state" then
    ifaces, igd =  handle_state_option(sectionname)
  end
  if igd and ifaces then
    local events = {}
    if type(ifaces) == "table" then
      for _,v in ipairs(ifaces) do
        events[#events + 1] = { key = v, paramname = igd }
        events[#events + 1] = { key = v.."_remote", paramname = igd }
      end
    else
      events[#events + 1] = { key = ifaces, paramname = igd }
      events[#events + 1] = { key = ifaces.."_remote", paramname = igd }
    end
    if #events > 0 then
      return events
    end
  end
end

local function ubus_event_cb_status(mapping, event, data)
  if data.oper_state and data.name then
    return { { key = data["name"], paramname = "Status" }, { key = data["name"].."_remote", paramname = "Status" } }
  end
end

local function ubus_event_cb_totalassociations(mapping, event, data)
  if ( data["state"]== "Associated" or data["state"] == "Disconnected" ) then
    local ap = data["ap_name"]
    local iface = getIfaceForAP(ap)
    if iface then
      return { { key = iface, paramname = "TotalAssociations" }, { key = iface.."_remote", paramname = "TotalAssociations" } }
    end
  end
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_.add_watchers = function(mapping)
  local uci_evsrc = eventsource("uci")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-iface", nil, "ssid")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-iface", nil, "state")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-device", nil, "channel")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-ap", nil, "wpa_psk_key")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-ap", nil, "state")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-device", nil, "state")

  local ubus_evsrc = eventsource("ubus")
  ubus_evsrc.watch_event(mapping, ubus_event_cb_status, "wireless.ssid")
  ubus_evsrc.watch_event(mapping, ubus_event_cb_totalassociations, "wireless.accesspoint.station")
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_.entries = entriesWLANDevice
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_.getall = wlc.wlan.getall
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_.get = wlc.wlan.get
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_.set = wlc.wlan.set
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_.commit = wlc.wlan.commit
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_.revert = wlc.wlan.revert

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_)

---WPS---
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_ = {
  objectType = {
      name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WPS.",
      access = "readOnly",
      minEntries = 1,
      maxEntries = 1,
      parameters = {
        Enable = {
          access = "readWrite",
          type = "boolean",
        },
        DevicePassword = {
          access = "readWrite",
          type = "unsignedInt"
        },
      }
   }
}

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.set = wlc.wps.set
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.get = wlc.wps.get
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.commit = wlc.wps.commit
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.revert = wlc.wps.revert
register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_)


local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_Stats_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.Stats.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            ErrorsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            ErrorsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            UnicastPacketsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            UnicastPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            DiscardPacketsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            DiscardPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            MulticastPacketsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            MulticastPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            BroadcastPacketsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            BroadcastPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            UnknownProtoPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
        }
    }
}

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_Stats_.getall = wlc.stats.getall
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_Stats_.get = wlc.stats.get

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_Stats_)


--- WEP keys
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WEPKey.{i}.",
        access = "readOnly",
        minEntries = 1, -- TODO: understand why transformer complains about minEntries being 4 (see mapload.lua:84)
        maxEntries = 4,
        parameters = {
            WEPKey = {
                access = "readWrite",
                type = "string",
                max = "128",
            }
        }
    }
}

local function wepkey_cb(mapping, action, config, sectiontype, sectionname, option)
  if option == "wep_key" then
     -- see WLANConfigurationCommon.lua for the reason:
     -- 1) entriesWEPKey(), the key was composed of wifi-iface name(parentkey) + "_wep_" + [1-10]
     -- 2) getWEPKey(), when set uci.wireless.wifi-ap.@?.wep_key,
     --    all of InternetGatewayDevice.LANDevice.i.WLANConfiguration.i.WEPKey.?.WEPKey,
     --    whose parentkey is this wifi-iface, will be changed
     local iface = getIfaceForAP(sectionname)
     if iface then
        local events = {}
        for i = 1,4 do
            events[#events + 1] = { key = iface.."_wep_"..tostring(i), paramname = "WEPKey" }
        end
        return events
     end
  end
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.add_watchers = function(mapping)
  local uci_evsrc = eventsource("uci")
  uci_evsrc.watch(mapping, { set = wepkey_cb }, "wireless", "wifi-ap", nil, "wep_key")
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.entries = wlc.wepkey.entries
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.get = wlc.wepkey.get
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.set = wlc.wepkey.set
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.commit = wlc.wepkey.commit
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.revert = wlc.wepkey.revert

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_)

--- Preshared Keys
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.PreSharedKey.{i}.",
        access = "readOnly",
        minEntries = 1, -- TODO: understand why transformer complains about minEntries being 10 (see mapload.lua:84)
        maxEntries = 10,
        parameters = {
            PreSharedKey = {
                access = "readWrite",
                type = "string",
                max = "64",
            },
            KeyPassphrase = {
                access = "readWrite",
                type = "string",
                max = "63",
            },
            AssociatedDeviceMACAddress = {
                access = "readWrite",
                type = "string",
            }
        }
    }
}

local function presharedkey_cb(mapping, action, config, sectiontype, sectionname, option)
  if option == "wpa_psk_key" then
     -- see WLANConfigurationCommon.lua for the reason:
     -- 1) entriesPreSharedKey(), the key was composed of wifi-iface name(parentkey) + "_psk_" + [1-10]
     -- 2) getPreSharedKey["KeyPassphrase"], when set uci.wireless.wifi-ap.@?.wpa_psk_key
     --    all of InternetGatewayDevice.LANDevice.i.WLANConfiguration.i.PreSharedKey.?.KeyPassphrase,
     --    whose parentkey is this wifi-iface, will be changed
     local iface = getIfaceForAP(sectionname)
     if iface then
        local events = {}
        for i = 1,10 do
            events[#events + 1] = { key = iface.."_psk_"..tostring(i), paramname = "KeyPassphrase" }
        end
        return events
     end
  end
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.add_watchers = function(mapping)
  local uci_evsrc = eventsource("uci")
  uci_evsrc.watch(mapping, { set = presharedkey_cb }, "wireless", "wifi-ap", nil, "wpa_psk_key")
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.entries = wlc.psk.entries
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.get =  wlc.psk.get
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.set = wlc.psk.set
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.commit = wlc.psk.commit
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.revert = wlc.psk.revert

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_)

--- Associated Devices
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.AssociatedDevice.{i}.",
        access = "readOnly",
        numEntriesParameter = "TotalAssociations",
        minEntries = 0,
        maxEntries = math.huge,
        parameters = {
            AssociatedDeviceMACAddress = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
            },
            AssociatedDeviceIPAddress = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "64",
            },
            AssociatedDeviceAuthenticationState = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "boolean",
            },
            LastRequestedUnicastCipher = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "256",
            },
            LastRequestedMulticastCipher = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "256",
            },
            LastPMKId = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "256",
            },
            LastDataTransmitRate = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "4",
            },
            X_000E50_AssociatedDeviceRSSI = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "int",
            },
        }
    }
}

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_.entries = wlc.assoc.entries
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_.get = wlc.assoc.get

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_)

