-- Automatically generated from InternetGatewayDevice:1.14
-- using generator version 2.3
local math = math
local WLANConfiguration = {
    objectType = {
        name = "InternetGatewayDevice.#SUBROOT.WLANConfiguration.{i}.",
        access = "readOnly",
        numEntriesParameter = "LANWLANConfigurationNumberOfEntries",
        minEntries = 0,
        maxEntries = math.huge,
        aliasParameter = "Alias",
        parameters = {
            Enable = {
                access = "readWrite",
                type = "boolean",
            },
            Status = {
                access = "readOnly",
                type = "string",
                enumeration = {
                    "Up",
                    "Error",
                    "Disabled",
                },
            },
            Alias = {
                access = "readWrite",
                activeNotify = "canDeny",
                type = "string",
            },
            Name = {
                access = "readOnly",
                type = "string",
                max = "16",
            },
            BSSID = {
                access = "readOnly",
                type = "string",
            },
            MaxBitRate = {
                access = "readOnly", --readWrite not supported
                type = "string",
                max = "4",
            },
            Channel = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "255",
                    },
                },
            },
            SSID = {
                access = "readWrite",
                type = "string",
                max = "32",
            },
            BeaconType = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "None",
                    "Basic",
                    "11i",
		    "WPAand11i",
		    --[[ Currently not supported
                    "BasicandWPA",
                    "Basicand11i",
                    "BasicandWPAand11i",
		    --]]
                },
            },
            MACAddressControlEnabled = {
                access = "readWrite",
                type = "boolean",
            },
            Standard = {
                access = "readOnly",
                type = "string",
                enumeration = {
                    "a",
                    "b",
                    "g",
                    "g-only",
                    "n",
                },
            },
            WEPKeyIndex = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "4",
                    },
                },
            },
            KeyPassphrase = {
                access = "readWrite",
                hidden = "true",
                type = "string",
                max = "63",
            },
            WEPEncryptionLevel = {
                access = "readOnly",
                list = true,
                max = "64",
                type = "string",
                enumeration = {
                    "Disabled",
                    "40-bit",
                    "104-bit",
                },
            },
            BasicEncryptionModes = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "None",
                    "WEPEncryption",
                },
            },
            BasicAuthenticationMode = {
                access = "readOnly", -- readwrite not supported
                type = "string",
                max = "31",
                enumeration = {
                    "None",
		    --[[ Other values are currently not supported.
		    "EAPAuthentication",
                    "SharedAuthentication",--]]
                },
            },
            WPAEncryptionModes = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "TKIPEncryption",

                    --[[ This should only be queried when beacon type includes WPA and only expose TKIP in WPA
                    "AESEncryption",
                    "TKIPandAESEncryption",
                    --]]
                },
            },
            WPAAuthenticationMode = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "PSKAuthentication",
                    "EAPAuthentication",
                },
            },
            IEEE11iEncryptionModes = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "AESEncryption",
                    --[[ This should only be queried when beacon type includes WPA2 and only expose AES in WPA2
                    "TKIPEncryption",
                    "TKIPandAESEncryption",
                    --]]
                },
            },
            IEEE11iAuthenticationMode = {
                access = "readWrite",
                type = "string",
                max = "31",
                enumeration = {
                    "PSKAuthentication",
                    "EAPAuthentication",
                    -- "EAPandPSKAuthentication", This should only be queried when beacon type includes WPA2 and not allowing dual support
                },
            },
            PossibleChannels = {
                access = "readOnly",
                list = true,
                max = "1024",
                type = "string",
            },
            BasicDataTransmitRates = {
                access = "readWrite",
                list = true,
                max = "256",
                type = "string",
            },
            OperationalDataTransmitRates = {
                access = "readWrite",
                list = true,
                max = "256",
                type = "string",
            },
            PossibleDataTransmitRates = {
                access = "readOnly",
                list = true,
                max = "256",
                type = "string",
            },
            InsecureOOBAccessEnabled = {
                access = "readOnly", -- readWrite currently not supported, hence making readOnly
                type = "boolean",
            },
            BeaconAdvertisementEnabled = {
                access = "readOnly",
                type = "boolean",
            },
            SSIDAdvertisementEnabled = {
                access = "readWrite",
                type = "boolean",
            },
            RadioEnabled = {
                access = "readWrite",
                type = "boolean",
            },
            TransmitPowerSupported = {
                access = "readOnly",
                max = "64",
                type = "string",
            },
            TransmitPower = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                  {
                    min = "25",
                    max = "100",
                  },
                },
            },
            AutoRateFallBackEnabled = {
                -- No lower layer support, hence write functionality is disabled currently
                access = "readOnly",
                type = "boolean",
            },
            LocationDescription = {
                access = "readOnly", -- readWrite currently not supported, hence making readOnly.
                type = "string",
                max = "4096",
            },
            RegulatoryDomain = {
                access = "readWrite",
                type = "string",
                max = "3",
            },
            TotalPSKFailures = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            TotalIntegrityFailures = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            ChannelsInUse = {
                access = "readOnly",
                activeNotify = "canDeny",
                list = true,
                max = "1024",
                type = "string",
            },
            DeviceOperationMode = {
                access = "readOnly", -- readWrite not supported
                type = "string",
                max = "31",
                enumeration = {
                    "InfrastructureAccessPoint",
                --[[other values are not supported currently.
		    "WirelessBridge",
                    "WirelessRepeater",
                    "WirelessStation",--]]
                },
            },
            DistanceFromRoot = {
                access = "readOnly",-- readWrite currently not supported, hence making readOnly
                type = "unsignedInt",
            },
            PeerBSSID = {
                access = "readOnly", -- readWrite currently not supported, hence making readOnly
                type = "string",
            },
            AuthenticationServiceMode = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "None",
                    "LinkAuthentication",
                    "RadiusClient",
                },
            },
            WMMSupported = {
                access = "readOnly",
                type = "boolean",
            },
            UAPSDSupported = {
                access = "readOnly",
                type = "boolean",
            },
            UAPSDEnable = {
                access = "readOnly", -- readWrite not supported
                type = "boolean",
            },
            WMMEnable = {
                access = "readOnly", -- no readWrite since as per TRS "By default a Technicolor Gateway must enable WMM on all radio interfaces"
                type = "boolean",
            },
            TotalBytesSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            TotalBytesReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            TotalPacketsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            TotalPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            X_000E50_ACSState = {
                access = "readOnly",
                type = "string",
            },
            X_000E50_ACSMode = {
                access = "readOnly",
                type = "string",
            },
            X_000E50_ACSCHMonitorPeriod = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "10",
                    },
                },
            },
            X_000E50_ACSScanReport = {
                access = "readOnly",
                type = "string",
                max = "4096",
            },
            X_000E50_ACSScanHistory = {
                access = "readOnly",
                type = "string",
                max = "2560",
            },
            X_000E50_ACSRescanPeriod = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "604800",
                    },
                },
            },
            X_000E50_ACSRescanDelayPolicy = {
                access = "readWrite",
                type = "string",
                -- As per the implementation,it accepts only the following values.
                enumeration = {
                    "always",
                    "nostation",
                    "notraffic",
                },
            },
            X_000E50_ACSRescanDelay = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "10",
                        max = "3600",
                    },
                },
            },
            X_000E50_ACSRescanDelayMaxEvents = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "999",
                    },
                },
            },
            X_000E50_ACSCHFailLockoutPeriod = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "86400",
                    },
                },
            },
            X_000E50_ChannelWidth = {
                access = "readWrite",
                type = "string",
            },
            X_000E50_ShortGuardInterval = {
                access = "readWrite",
                type = "boolean",
            },
            X_000E50_SpaceTimeBlockCoding = {
                access = "readWrite",
                type = "boolean",
            },
            X_000E50_CyclicDelayDiversity = {
                access = "readWrite",
                type = "boolean",
            },
            AutoChannelEnable = {
                access = "readWrite",
                type = "boolean",
            },
            X_000E50_ACSRescan = {
                access = "readWrite",
                type = "boolean",
            },
            X_000E50_ACSBssList = {
                access = "readOnly",
                type = "string",
                max = "16384",
            },
            X_000E50_ChannelMode = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "Auto",
                    "Manual",
                },
            },
            X_000E50_Power = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "4",
                    },
                },
            },
            X_000E50_PowerDefault = {
                access = "readOnly",
                type = "string",
            },
            X_000E50_PowerList = {
                access = "readOnly",
                type = "string",
            },
            X_000E50_PacketsDropped = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            X_000E50_PacketsErrored = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            X_000E50_RemotelyManaged = {
                access = "readOnly",
                type = "boolean",
            },
            X_000E50_UpgradeURL = {
                access = "readWrite",
                type = "string",
            },
            X_000E50_UpgradeCheckPeriod = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "8760", -- one year
                   },
                },
            },
            X_000E50_UpgradeSWVersion = {
                access = "readOnly",
                type = "string",
            },
            X_000E50_BandSteerEnable = {
                access = "readWrite",
                type = "boolean",
            },
            X_000E50_ChannelBandwidth = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "Auto",
                    "20MHz",
                    "20/40MHz",
                },
            },
            X_AutoChannelReselectionTimeout = {
                access = "readWrite",
                type = "unsignedInt",
                description = "Configuration of the timer for auto channel reslection",
                range = {
                    {
                        min = "0",
                        max = "604800",
                    },
                },
            },
            X_AutoChannelReselectionEnable = {
                access = "readWrite",
                type = "boolean",
                description = "Enable or Disable WiFi auto channel reselection Default value: 1",
            },
            X_WPS_V2_ENABLE = {
                access = "readWrite",
                type = "boolean",
                description = "Enable or disable WPS 2.0",
            },
            X_0876FF_AllowedMACAddresses = {
                access = "readWrite",
                list = "true",
                max = "512",
                type = "string",
                description = "List of hardware addresses that are allowed to connect to this connection",
            },
            X_0876FF_DeniedMACAddresses = {
                access = "readWrite",
                list = "true",
                max = "512",
                type = "string",
                description = "List of hardware addresses that are not allowed to connect to this connection",
            },
            X_0876FF_SupportedFrequencyBands = {
                access = "readOnly",
                list = true,
                type = "string",
                enumeration = {
                    "2.4GHz",
                    "5GHz",
                },
                description = "List of frequency bands at which the radio can operate",
            },
            X_0876FF_OperatingFrequencyBand = {
                access = "readOnly",
                type = "string",
                enumeration = {
                    "2.4GHz",
                    "5GHz",
                },
                description = "Indicates the frequency band at which the radio is operating",
            },
            X_0876FF_SupportedStandards = {
                access = "readOnly",
                list = true,
                type = "string",
                enumeration = {
                    "a",
                    "b",
                    "g",
                    "n",
                    "ac",
                },
                description = "List items indicate which IEEE 802.11 standards this Radio instance can support simultaneously",
            },
            X_0876FF_WMMPowerSaveEnabled = {
                access = "readOnly",
                type = "boolean",
                description = "Enables/disables WMM PowerSave",
            },
            X_0876FF_KeyPassphrase = {
                access = "readWrite",
                type = "string",
                max = "63",
                description = "Readable KeyPassphrase",
            },
            X_0876FF_RestoreDefaultKey = {
                access = "readWrite",
                type = "boolean",
                description = "Restore the default WEP/WPA key per SSID",
            },
            X_0876FF_RestoreDefaultWireless = {
                access = "readWrite",
                type= "boolean",
                description = "Restores default wireless settings per interface and accesspoint",
            },
            X_0876FF_DFSAvailable = {
                access = "readOnly",
                type = "boolean",
                description = "Indicates whether the device is both capable and approved for utilizing the DFS band(s) of channels",
            },
            X_0876FF_DFSEnable = {
                access = "readWrite",
                type = "boolean",
                description = "If true, channels designated in the DFS frequency band(s) may be selected by the auto channel selection algorithm"
            },
            X_0876FF_MaxConcurrentDevices = {
                access = "readOnly",
                type = "int",
                description = "Maximum number of concurrent devices that can be connected to the SSID"
            },
            X_000E50_Band = {
                access = "readOnly",
                type = "string",
                enumeration = {
                    "2.4GHz",
                    "5GHz",
                },
                description = "Wireless device frequency band (either 2.4GHz / 5GHz)",
            },
            X_VODAFONE_MACAddressControlMode = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "Off",
                    "Allow",
                    "Deny",
                },
                default = "Off",
                description = "Get/Set the type of MAC address control type",
            },
            X_0876FF_SubnetMask = {
                access = "readOnly",
                type = "string",
                description = "The subnet mask IP address of the secondary SSID subnet feature",
            },
            X_0876FF_SubnetGatewayAddr = {
                access = "readOnly",
                type = "string",
                description = "The gateway IP address of the secondary SSID subnet feature",
            },
            X_0876FF_SubnetEnable = {
                access = "readWrite",
                type = "boolean",
                description = "Enable or Disable the Secondary SSID subnet feature",
            },
            X_0876FF_RadioID = {
                access = "readOnly",
                type = "int",
                description = "Arbitrary integer identifier for each radio. All WLANConfiguration.{i} objects on the same radio must have the same identifier",
            },
            X_0876FF_SubnetMinAddr = {
                access = "readWrite",
                type = "string",
                description = "The first LAN IP address in the DHCP pool to be assigned by the secondary SSID subnet feature",
            },
            X_0876FF_SubnetMaxAddr = {
                access = "readWrite",
                type = "string",
                description = "The last LAN IP address in the DHCP pool to be assigned by the secondary SSID subnet feature",
            },
            X_0876FF_GREInterface = {
                access = "readWrite",
                type = "string",
                description = "The path of the GRE tunnel interface for the corresponding SSID",
            },
            -- TotalAssociations
            -- automatically created when InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.AssociatedDevice.{i}. is loaded
        }
    }
}

local require, mapper = require, mapper
local ipairs = ipairs
local register, commitapply = register, commitapply
local eventsource, tostring = eventsource, tostring

local uci_helper = mapper("ucihelper")
local wlan = require("transformer.shared.WLANConfigurationCommon").getWLANMappings(commitapply)

local wlanconfig = require 'transformer.shared.mappings.lan.wlanconfig'

local dmordering = require "transformer.shared.models.dmordering"

local entriesWLANInterfaces = function(mapping)
  local _, e = wlanconfig.entries()
  return dmordering.sort(e, mapping.objectType.name)
end

local entriesWLANDevice = function(mapping, parentkey)
  local e = wlanconfig.entries(parentkey)
  return dmordering.sort(e, mapping.objectType.name)
end

local iface_binding = {config = "wireless", sectionname = "wifi-iface"}

-- For a given radio name (radio_2G for instance), return the wifi-iface sections associated with it in UCI (wl0)
local function getIfacesForRadio(radio)
  local ifaces = {}
  uci_helper.foreach_on_uci(iface_binding, function(s)
    if s["device"] == radio then
      ifaces[#ifaces + 1] = s[".name"]
    end
  end)
  return ifaces
end

local ap_binding = {config = "wireless", sectionname = nil, option = "iface", extended = true}

-- For a given AP name (ap0 for instance), return the wifi-iface section associated with it in UCI (wl0)
local function getIfaceForAP(ap)
  ap_binding.sectionname = ap
  return uci_helper.get_from_uci(ap_binding)
end

local wireless_binding = { config = "wireless" }

local function get_uci_section(sectionname)
  wireless_binding.sectionname = sectionname
  return uci_helper.getall_from_uci(wireless_binding)
end

-- TODO remove this workaround when NG-15901 is implemented
local function handle_state_option(sectionname)
  local ifaces, igd
  local section = get_uci_section(sectionname)
  if section[".type"] == "wifi-iface" then
    ifaces = sectionname
    igd = "Enable"
  elseif section[".type"] == "wifi-ap" then
    ifaces = section["iface"]
    igd = "Enable"
  elseif section[".type"] == "wifi-device" then
    ifaces = getIfacesForRadio(sectionname)
    igd = "RadioEnabled"
  end
  return ifaces, igd
end

local function translate_cb(_, _, _, _, sectionname, option)
  local ifaces
  local igd
  if option == "ssid" then
    ifaces = sectionname
    igd = "SSID"
  elseif option == "channel" then
    ifaces = getIfacesForRadio(sectionname)
    igd = "Channel"
  elseif option == "wpa_psk_key" then
    ifaces = getIfaceForAP(sectionname)
    igd = "KeyPassphrase"
  elseif option == "state" then
    ifaces, igd =  handle_state_option(sectionname)
  end
  if igd and ifaces then
    local events = {}
    if type(ifaces) == "table" then
      for _,v in ipairs(ifaces) do
        events[#events + 1] = { key = v, paramname = igd }
        events[#events + 1] = { key = v.."_remote", paramname = igd }
      end
    else
      events[#events + 1] = { key = ifaces, paramname = igd }
      events[#events + 1] = { key = ifaces.."_remote", paramname = igd }
    end
    if #events > 0 then
      return events
    end
  end
end

local function ubus_event_cb_status(mapping, event, data)
  if data.oper_state and data.name then
    return { { key = data["name"], paramname = "Status" }, { key = data["name"].."_remote", paramname = "Status" } }
  end
end

local function ubus_event_cb_totalassociations(mapping, event, data)
  if ( data["state"]== "Associated" or data["state"] == "Disconnected" ) then
    local ap = data["ap_name"]
    local iface = getIfaceForAP(ap)
    if iface then
      return { { key = iface, paramname = "TotalAssociations" }, { key = iface.."_remote", paramname = "TotalAssociations" } }
    end
  end
end

WLANConfiguration.add_watchers = function(mapping)
  local uci_evsrc = eventsource("uci")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-iface", nil, "ssid")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-iface", nil, "state")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-device", nil, "channel")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-ap", nil, "wpa_psk_key")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-ap", nil, "state")
  uci_evsrc.watch(mapping, { set = translate_cb }, "wireless", "wifi-device", nil, "state")

  local ubus_evsrc = eventsource("ubus")
  ubus_evsrc.watch_event(mapping, ubus_event_cb_status, "wireless.ssid")
  ubus_evsrc.watch_event(mapping, ubus_event_cb_totalassociations, "wireless.accesspoint.station")
end

WLANConfiguration.entries = entriesWLANDevice
WLANConfiguration.getall = wlan.getall
WLANConfiguration.get = wlan.get
WLANConfiguration.set = wlan.set
WLANConfiguration.commit = wlan.commit
WLANConfiguration.revert = wlan.revert

---WPS---
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_ = {
  objectType = {
    name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WPS.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      DeviceName = {
        access = "readOnly",
        type = "string",
        max = "32",
      },
      DevicePassword = {
        access = "readWrite",
        hidden = "true",
        type = "unsignedInt"
      },
      X_0876FF_DevicePassword = {
        access = "readOnly",
        type = "string",
        description = "Represents the DevicePassword used",
      },
      UUID = {
        access = "readOnly",
        type = "string",
        max = "36",
      },
      ConfigMethodsSupported = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "USBFlashDrive",
          "Ethernet",
          "Label",
          "Display",
          "ExternalNFCToken",
          "IntegratedNFCToken",
          "NFCInterface",
          "PushButton",
          "Keypad",
        },
      },
      ConfigMethodsEnabled = {
        access = "readOnly", -- readWrite currently not supported
        list = true,
        type = "string",
        enumeration = {
          "USBFlashDrive",
          "Ethernet",
          "Label",
          "Display",
          "ExternalNFCToken",
          "IntegratedNFCToken",
          "NFCInterface",
          "PushButton",
          "Keypad",
        },
      },
      ConfigurationState = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Not configured",
          "Configured",
        },
      },
      SetupLockedState = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Unlocked",
          "LockedByLocalManagement",
--[[ TODO: Currently Unlocked and LockedByLocalManagement is only supported
          "LockedByRemoteManagement",
          "PINRetryLimitReached",
--]]
        },
      },
      SetupLock = {
        access = "readWrite",
        type = "boolean",
      },
      X_0876FF_PushButton = {
        access = "readWrite",
        type = "boolean",
        description = "Trigger WPS push button",
      },
      X_000E50_PushButton = {
        access = "readWrite",
        type = "boolean",
        description = "Trigger WPS push button",
      },
      Version = {
        access = "readOnly",
        type = "unsignedInt",
      },
--[[ TODO:
      LastConfigurationError = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "NoError",
          "DecryptionCRCFailure",
          "SignalTooWeak",
          "CouldntConnectToRegistrar",
          "RogueActivitySuspected",
          "DeviceBusy",
          "SetupLocked",
          "MessageTimeout",
          "RegistrationSessionTimeout",
          "DevicePasswordAuthFailure",
        },
      },
      -- RegistrarNumberOfEntries
      -- automatically created when InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WPS.Registrar.{i}. is loaded
      RegistrarEstablished = {
        access = "readOnly",
        type = "boolean",
      },
]]
    }
  }
}

local wps = require("transformer.shared.WLANConfigurationCommon").getWPSMapping(commitapply)

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.set = wps.set
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.get = wps.get
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.getall = wps.getall
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.commit = wps.commit
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.revert = wps.revert
register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_)

local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_Stats_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.Stats.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            ErrorsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            ErrorsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            UnicastPacketsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            UnicastPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            DiscardPacketsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            DiscardPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            MulticastPacketsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            MulticastPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            BroadcastPacketsSent = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            BroadcastPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            UnknownProtoPacketsReceived = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
        }
    }
}

local stats = require("transformer.shared.WLANConfigurationCommon").getWLANStats(commitapply)
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_Stats_.getall = stats.getall
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_Stats_.get = stats.get

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_Stats_)


--- WEP keys
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WEPKey.{i}.",
        access = "readOnly",
        minEntries = 1, -- TODO: understand why transformer complains about minEntries being 4 (see mapload.lua:84)
        maxEntries = 4,
        parameters = {
            WEPKey = {
                access = "readWrite",
                hidden = "true",
                type = "string",
                max = "128",
            },
            X_0876FF_WEPKey = {
                access = "readOnly",
                type = "string",
                max = "128",
                description = "Security passcode for Wi-Fi device",
            }
        }
    }
}

local wepkey = require("transformer.shared.WLANConfigurationCommon").getWEPMapping(commitapply)

local function wepkey_cb(mapping, action, config, sectiontype, sectionname, option)
  if option == "wep_key" then
     -- see WLANConfigurationCommon.lua for the reason:
     -- 1) entriesWEPKey(), the key was composed of wifi-iface name(parentkey) + "_wep_" + [1-10]
     -- 2) getWEPKey(), when set uci.wireless.wifi-ap.@?.wep_key,
     --    all of InternetGatewayDevice.LANDevice.i.WLANConfiguration.i.WEPKey.?.WEPKey,
     --    whose parentkey is this wifi-iface, will be changed
     local iface = getIfaceForAP(sectionname)
     if iface then
        local events = {}
        for i = 1,4 do
            events[#events + 1] = { key = iface.."_wep_"..tostring(i), paramname = "WEPKey" }
        end
        return events
     end
  end
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.add_watchers = function(mapping)
  local uci_evsrc = eventsource("uci")
  uci_evsrc.watch(mapping, { set = wepkey_cb }, "wireless", "wifi-ap", nil, "wep_key")
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.entries = wepkey.entries
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.get = wepkey.get
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.set = wepkey.set
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.commit = wepkey.commit
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.revert = wepkey.revert

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_)

--- Preshared Keys
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.PreSharedKey.{i}.",
        access = "readOnly",
        minEntries = 1, -- TODO: understand why transformer complains about minEntries being 10 (see mapload.lua:84)
        maxEntries = 10,
        parameters = {
            PreSharedKey = {
                access = "readOnly", -- readwrite not supported
                type = "string",
                max = "64",
            },
            KeyPassphrase = {
                access = "readWrite",
                hidden = "true",
                type = "string",
                max = "63",
                min = "8",  -- Added this to line up Device:2 parameter
            },
            AssociatedDeviceMACAddress = {
                access = "readOnly", -- readwrite not supported
                type = "string",
            },
            X_0876FF_PreSharedKey = {
                access = "readOnly",
                type = "string",
                max = "64",
                description = "To authenticate and validate users on Wireless LAN",
            },
            X_0876FF_KeyPassphrase = {
                access = "readOnly",
                type = "string",
                max = "63",
                min = "8",
                description = "An encryption key from a passphrase",
            }
        }
    }
}

local psk = require("transformer.shared.WLANConfigurationCommon").getPSKMapping(commitapply)

local function presharedkey_cb(mapping, action, config, sectiontype, sectionname, option)
  if option == "wpa_psk_key" then
     -- see WLANConfigurationCommon.lua for the reason:
     -- 1) entriesPreSharedKey(), the key was composed of wifi-iface name(parentkey) + "_psk_" + [1-10]
     -- 2) getPreSharedKey["KeyPassphrase"], when set uci.wireless.wifi-ap.@?.wpa_psk_key
     --    all of InternetGatewayDevice.LANDevice.i.WLANConfiguration.i.PreSharedKey.?.KeyPassphrase,
     --    whose parentkey is this wifi-iface, will be changed
     local iface = getIfaceForAP(sectionname)
     if iface then
        local events = {}
        for i = 1,10 do
            events[#events + 1] = { key = iface.."_psk_"..tostring(i), paramname = "KeyPassphrase" }
        end
        return events
     end
  end
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.add_watchers = function(mapping)
  local uci_evsrc = eventsource("uci")
  uci_evsrc.watch(mapping, { set = presharedkey_cb }, "wireless", "wifi-ap", nil, "wpa_psk_key")
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.entries = psk.entries
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.get =  psk.get
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.set = psk.set
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.commit = psk.commit
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.revert = psk.revert

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_)

--- Associated Devices
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.AssociatedDevice.{i}.",
        access = "readOnly",
        numEntriesParameter = "TotalAssociations",
        minEntries = 0,
        maxEntries = math.huge,
        parameters = {
            AssociatedDeviceMACAddress = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
            },
            AssociatedDeviceIPAddress = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "64",
            },
            AssociatedDeviceAuthenticationState = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "boolean",
            },
            LastRequestedUnicastCipher = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "256",
            },
            LastRequestedMulticastCipher = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "256",
            },
            LastPMKId = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "256",
            },
            LastDataTransmitRate = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "4",
            },
            X_Status = {
                access = "readOnly",
                type = "string",
                description = "Indicate current connection status of this client",
                enumeration = {
                    "Up",
                    "Error",
                    "Disabled",
                },
            },
            X_LastDataUplinkRate = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
                description = "Indicate the real uplink data rate of this client",
                range = {
                  {
                   min = "1000",
                   max = "600000",
                 },
               },
             },
             X_LastDataDownlinkRate = {
                 access = "readOnly",
                 activeNotify = "canDeny",
                 type = "unsignedInt",
                 description = "Indicate the real downlink data rate of this client",
                 range = {
                   {
                    min = "1000",
                    max = "600000",
                   },
                 },
             },
             X_000E50_Status = {
                 access = "readOnly",
                 type = "string",
                 description = "Indicate current connection status of this client",
                 enumeration = {
                     "Up",
                     "Error",
                     "Disabled",
                 },
             },
             X_000E50_LastDataUplinkRate = {
                 access = "readOnly",
                 activeNotify = "canDeny",
                 type = "unsignedInt",
                 description = "Indicate the real uplink data rate of this client",
                 range = {
                   {
                    min = "1000",
                    max = "600000",
                   },
                 },
             },
             X_000E50_LastDataDownlinkRate = {
                 access = "readOnly",
                 activeNotify = "canDeny",
                 type = "unsignedInt",
                 description = "Indicate the real downlink data rate of this client",
                 range = {
                   {
                    min = "1000",
                    max = "600000",
                   },
                 },
             },
             X_000E50_AssociatedDeviceRSSI = {
                 access = "readOnly",
                 activeNotify = "canDeny",
                 type = "int",
             },
             X_000E50_LastDisconnectBy = {
                 access = "readOnly",
                 type = "string",
                 description = "Indicates the lastdisconnect",
             },
             X_000E50_LastDisconnectReason = {
                 access = "readOnly",
                 type = "string",
                 description = "Explains the reason for last disconnect",
             },
             X_000E50_TxNoAckFailures = {
                 access = "readOnly",
                 type = "string",
                 description = "Transmitted number of acknowledgement failures",
             },
             X_000E50_TxPhyRate = {
                 access = "readOnly",
                 type = "string",
                 description = "Transmitted physical rate",
             },
             X_000E50_RxPhyRate = {
                 access = "readOnly",
                 type = "string",
                 description = "Received physical rate",
             },
             X_000E50_RSSIHistory = {
                 access = "readOnly",
                 type = "string",
                 description = "History of Received Signal Strength Indication",
             },
             X_000E50_Capabilities = {
                 access = "readOnly",
                 type = "string",
                 description = "Capabilities supported by the associated device",
             },
             X_HostName = {
                 access ="readOnly",
                 type = "string",
                 description = "indicate the hostname of associated device",
             },
             X_Active = {
                 access ="readOnly",
                 type = "boolean",
                 description = "indicates the state of associated device",
             },
             X_OperatingStandard = {
                 access = "readOnly",
                 type = "string",
                 description = "indicates the standard of associated device",
                 enumeration = {
                   "a",
                   "b",
                   "g",
                   "n",
                   "ac",
                 },
             },
        }
    }
}

local assoc = require("transformer.shared.WLANConfigurationCommon").associatedDeviceMapping(commitapply)

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_.entries = assoc.entries
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_.get = assoc.get

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_)

local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_X_Stats_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.AssociatedDevice.{i}.#ROOT.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            Retransmissions = {
               access = "readOnly",
               type = "unsignedInt",
               description = "Show the retransmissions of this WiFi client",
               range = {
                 {
                   min = "0",
                   max = "100",
                 },
               },
             },
             SignalStrength = {
                access = "readOnly",
                type = "int",
                description = "Show the signal strength of this WiFi client",
                range = {
                  {
                   min = "-200",
                   max = "0",
                  },
               },
            },
            BytesSent = {
               access = "readOnly",
               type = "unsignedLong",
            },
            BytesReceived = {
               access = "readOnly",
               type = "unsignedLong",
            },
            PacketsSent = {
               access = "readOnly",
               type = "unsignedLong",
            },
            PacketsReceived = {
               access = "readOnly",
               type = "unsignedLong",
            },
            ErrorsSent = {
               access = "readOnly",
               type = "unsignedInt",
            },
            RetransCount = {
               access = "readOnly",
               type = "unsignedInt",
            },
            FailedRetransCount = {
               access = "readOnly",
               type = "unsignedInt",
            },
            RetryCount = {
               access = "readOnly",
               type = "unsignedInt",
            },
            MultipleRetryCount = {
               access = "readOnly",
               type = "unsignedInt",
            },
        }
    }
}

local X_Stats = require("transformer.shared.WLANConfigurationCommon").getWifiStats(commitapply)

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_X_Stats_.get = X_Stats.get


do
  local duplicator = mapper("multiroot").duplicate
  local duplicates = duplicator(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_X_Stats_, "#ROOT", {"X_Stats", "X_000E50_Stats"})
  for _, dupli in ipairs(duplicates) do
    register(dupli)
  end

  duplicates = duplicator(WLANConfiguration, "#SUBROOT", {
                       "LANDevice.{i}",
                       "LANInterfaces"
                     })
  for _, mapping in ipairs(duplicates) do
    if mapping.objectType.name:match("InternetGatewayDevice.LANDevice") then
      mapping.entries = entriesWLANDevice
    else
      mapping.entries = entriesWLANInterfaces
    end
    register(mapping)
  end
end

