-- Automatically generated from InternetGatewayDevice:1.3
-- using generator version 2.1
local InternetGatewayDevice_LANDevice_i_LANEthernetInterfaceConfig_i_ = {
  objectType = {
    name = "InternetGatewayDevice.LANDevice.{i}.LANEthernetInterfaceConfig.{i}.",
    access = "readOnly",
    numEntriesParameter = "LANEthernetInterfaceNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Up",
          "NoLink",
          "Error",
          "Disabled",
        },
      },
      MACAddress = {
        access = "readOnly",
        type = "string",
      },
      MACAddressControlEnabled = {
        access = "readOnly",  -- readWrite not supported
        type = "boolean",
      },
      MaxBitRate = {
        access = "readOnly",  -- readWrite not supported
        type = "string",
        enumeration = {
          "10",
          "100",
          "1000",
          "Auto",
        },
      },
      DuplexMode = {
        access = "readOnly",  -- readWrite not supported
        type = "string",
        enumeration = {
          "Half",
          "Full",
          "Auto",
        },
      },
    }
  }
}

local common = mapper('nwcommon')
local match, open, execute, pairs = string.match, io.open, os.execute, pairs

local netPath = "/sys/class/net/"

local function firstline(filename)
    local fd, msg = open(filename)
    if not fd then
        -- you could return nil and and error message but that will abort
        -- iterating over all parameters.
        -- so here I opt to just return an empty string.
        return ""
    end
    local result = fd:read("*l")
    fd:close()
    return result
end

local function entriesLANEthernet(mapping, parentkey)
    -- Extract the interfaces whose name start with eth. Those are the ones we need to list
    local intf = {}
    local ll_intfs = common.get_lower_layers(parentkey)

    for _, interface in pairs(ll_intfs) do
        if match(interface, "eth[^%s]+") then
            intf[#intf+1] = interface
        end
    end

    return intf
end

local getLANEthernet = {
    Enable = function(mapping, param, key)
        -- assumes that carrier is not accessible if the interface is down. Behaves this way on broadcom.
        -- if this is not reliable, then we can rely on operstate
        local carrier = firstline(netPath .. key .. "/carrier")
        if carrier == "1" or carrier == "0" then
            return "1"
        end
        return "0"
    end,
    Status = function(mapping, param, key)
        -- assumes that carrier is not accessible if the interface is down. Behaves this way on broadcom.
        -- if this is not reliable, then we can rely on operstate
        local carrier = firstline(netPath .. key .. "/carrier")
        if carrier == "1" then
            return "Up"
        end
        if carrier == "0" then
            return "NoLink"
        end
        return "Disabled"
    end,
    MACAddress = function(mapping, param, key)
        return firstline(netPath .. key .. "/address")
    end,
    MACAddressControlEnabled = "0",
    MaxBitRate = "Auto",
    DuplexMode = "Auto",
}

local setLANEthernet = {
    Enable = function(mapping, param, value, key)
        if(value == "0") then
            execute("ifconfig " .. key .. " down")
        else
            execute("ifconfig " .. key .. " up")
        end
        return true
    end,
}

InternetGatewayDevice_LANDevice_i_LANEthernetInterfaceConfig_i_.entries = entriesLANEthernet
InternetGatewayDevice_LANDevice_i_LANEthernetInterfaceConfig_i_.get = getLANEthernet
InternetGatewayDevice_LANDevice_i_LANEthernetInterfaceConfig_i_.set = setLANEthernet

register(InternetGatewayDevice_LANDevice_i_LANEthernetInterfaceConfig_i_)
