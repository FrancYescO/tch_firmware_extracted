-- Manually generated
local Multi_LED_ = {
  objectType = {
    name = "#ROOT",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "Displays the LED Status",
    parameters = {
      InternetLEDState = {
        access = "readOnly",
        type = "string",
        description = "Displays the status of the internet LED",
      },
      PowerLEDState = {
        access = "readOnly",
        type = "string",
        description = "Displays the status of the Power LED",
      },
      WirelessLEDState = {
        access = "readOnly",
        type = "string",
        description = "Displays the status of the Wireless LED",
      },
      DSLLEDState = {
        access = "readOnly",
        type = "string",
        description = "Displays the status of the DSL LED",
      },
      USBLEDState = {
        access = "readOnly",
        type = "string",
        description = "Displays the status of the USB LED",
      },
      Ethernet1LEDState = {
        access = "readOnly",
        type = "string",
        description = "Displays the status of the Ethernet1 LED",
      },
      Ethernet2LEDState = {
        access = "readOnly",
        type = "string",
        description = "Displays the status of the Ethernet2 LED",
      },
      Ethernet3LEDState = {
        access = "readOnly",
        type = "string",
        description = "Displays the status of the Ethernet3 LED",
      },
      Ethernet4LEDState = {
        access = "readOnly",
        type = "string",
        description = "Displays the status of the Ethernet4 LED",
      },
      WANLEDState = {
        access = "readOnly",
        type = "string",
        description = "Displays the status of the Eth wan LED",
      },
    }
  }
}

local lfs = require("lfs")
local open = io.open
local mapper = mapper
local uciHelper = mapper('ucihelper')
local duplicator = mapper("multiroot").duplicate

local function isLedOrderInverted()
  local prodNum = uciHelper.get_from_uci({config="env", sectionname="var", option="prod_number"})
  if prodNum == "C2100T" or prodNum == "C1100T" or prodNum == "C2000T" then
    return true
  end
  return false
end

local PARAM_MAP = {
  InternetLEDState = "internet",
  PowerLEDState    = "power",
  WirelessLEDState = "wireless",
  DSLLEDState      = "broadband",
  USBLEDState      = "usb",
  WANLEDState      = "wanlan"
}

--TODO: The set of LED's should be determined via configuration or dynamically
local ETH_PARAM_MAP = {
  Ethernet1LEDState = isLedOrderInverted() and "eth3" or "eth0",
  Ethernet2LEDState = isLedOrderInverted() and "eth2" or "eth1",
  Ethernet3LEDState = isLedOrderInverted() and "eth1" or "eth2",
  Ethernet4LEDState = isLedOrderInverted() and "eth0" or "eth3"
}

--- Retrieves the LED status
-- @param param the parameter name
-- @return the led status
local function getLedState(param)
  local path = "/sys/class/leds/"
  local fileName
  for file in lfs.dir(path) do
    if file:match("^"..PARAM_MAP[param]) then
      fileName = path .. file .. "/delay_on"
      if lfs.attributes(fileName, "mode") == "file" then
        local color = file:match(".*:(.*)")
        return color .. "-blink"
      else
        fileName = path .. file .. "/brightness"
        local fd = open(fileName)
        if fd then
          local brightness = fd:read()
          fd:close()
          if tonumber(brightness) > 0 then
            return file:match(".*:(.*)")
          end
        end
      end
    end
  end
  return "off"
end

--- Retrieves the state of the Ethernet
-- @param param the parameter name
-- @return on/off based on the oper state of ethernet
local function getEthLedState(param)
  local fileName = "/sys/class/net/" .. ETH_PARAM_MAP[param] .. "/operstate"
  local fd = open(fileName)
  if fd then
    local state = fd:read()
    fd:close()
    if state == "up" then
      return "on"
    end
  end
  return "off"
end

Multi_LED_.get = function(mapping, param)
  if PARAM_MAP[param] then
    return getLedState(param)
  elseif ETH_PARAM_MAP[param] then
    return getEthLedState(param)
  end
end

local duplicates = duplicator(Multi_LED_, "#ROOT", { "InternetGatewayDevice.DeviceInfo.X_0876FF_LED.", "InternetGatewayDevice.DeviceInfo.X_000E50_LED." })
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
