-- Automatically generated from InternetGatewayDevice:1.4
-- using generator version 2.1

-- "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats."
-- "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Total."
-- "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Showtime."
-- "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.QuarterHour."
-- "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.CurrentDay."

local InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
    }
  }
}

local IGD_WANDevice_i_WANDSLInterfaceConfig_Stats_parameters_ = {
  CRCErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  ErroredSecs = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  SeverelyErroredSecs = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  FECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  ATUCFECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  ATUCCRCErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  LinkRetrain = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  HECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  ATUCHECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  InitTimeouts = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  LossOfFraming = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
}

local InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_Total_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Total.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = IGD_WANDevice_i_WANDSLInterfaceConfig_Stats_parameters_ ,
  }
}

local InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_Showtime_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Showtime.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = IGD_WANDevice_i_WANDSLInterfaceConfig_Stats_parameters_ ,
  }
}

local InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_QuarterHour_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.QuarterHour.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = IGD_WANDevice_i_WANDSLInterfaceConfig_Stats_parameters_ ,
  }
}

local InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_CurrentDay_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.CurrentDay.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = IGD_WANDevice_i_WANDSLInterfaceConfig_Stats_parameters_ ,
  }
}

----------------------------------------------------------
-- Local definitions
----------------------------------------------------------

local xdslctl = require("transformer.shared.xdslctl")
local split_key = mapper("nwcommon").split_key

local function xdslctl_stats(key, section, skey, dir)
  local devtype = split_key(key)
  if devtype == "DSL" then
    return xdslctl.stats(section, skey, dir)
  end
  return "4294967295"
end

local function get_instance(instance, mapping, param, key)
  if param == "CRCErrors" then
      return xdslctl_stats(key, instance, "crc", "ds")
  elseif param == "ErroredSecs" then
      return xdslctl_stats(key, instance, "es", "ds")
  elseif param == "SeverelyErroredSecs" then
      return xdslctl_stats(key, instance, "ses", "ds")
  elseif param == "FECErrors" then
      return xdslctl_stats(key, instance, "fec", "ds")
  elseif param == "ATUCFECErrors" then
      return xdslctl_stats(key, instance, "fec", "us")
  elseif param == "ATUCCRCErrors" then
      return xdslctl_stats(key, instance, "crc", "us")
  elseif param == "LinkRetrain" then
      return xdslctl_stats(key, instance, "retr", "")
  elseif param == "HECErrors" then
      return xdslctl_stats(key, instance, "hec", "ds")
  elseif param == "ATUCHECErrors" then
      return xdslctl_stats(key, instance, "hec", "us")
  elseif param == "InitTimeouts" then
      return xdslctl_stats(key, instance, "retr", "")
  elseif param == "LossOfFraming" then
      return xdslctl_stats(key, instance, "lof", "ds")
  end
  return ""
end

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_Total_.get = function(mapping, param, key)
  return get_instance("total", mapping, param, key)
end

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_Showtime_.get = function(mapping, param, key)
  return get_instance("sincesync", mapping, param, key)
end

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_QuarterHour_.get = function(mapping, param, key)
  return get_instance("currentquarter", mapping, param, key)
end

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_CurrentDay_.get = function(mapping, param, key)
  return get_instance("currentday", mapping, param, key)
end

local function getall_instance(instance, mapping, key)
  local allValues = {
    CRCErrors = "4294967295",
    ErroredSecs = "4294967295",
    SeverelyErroredSecs = "4294967295",
    FECErrors = "4294967295",
    HECErrors = "4294967295",
    ATUCFECErrors = "4294967295",
    ATUCHECErrors = "4294967295",
    ATUCCRCErrors = "4294967295",
    LinkRetrain = "4294967295",
    InitTimeouts = "4294967295",
    LossOfFraming = "4294967295",
  }
  local devtype = split_key(key)
  if devtype == "DSL" then
    local allstats = xdslctl.allstats()
    allValues.CRCErrors = allstats[instance].crc.ds
    allValues.ErroredSecs = allstats[instance].es.ds
    allValues.SeverelyErroredSecs = allstats[instance].ses.ds
    allValues.FECErrors = allstats[instance].fec.ds
    allValues.HECErrors = allstats[instance].hec.ds
    allValues.ATUCFECErrors = allstats[instance].fec.us
    allValues.ATUCHECErrors = allstats[instance].hec.us
    allValues.ATUCCRCErrors = allstats[instance].crc.us
    allValues.LinkRetrain = allstats[instance].retr
    allValues.InitTimeouts = allstats[instance].retr
    allValues.LossOfFraming = allstats[instance].lof.ds
  end
  return allValues
end

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_Total_.getall = function(mapping, key)
  return getall_instance("total", mapping, key)
end

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_Showtime_.getall = function(mapping, key)
  return getall_instance("sincesync", mapping, key)
end

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_QuarterHour_.getall = function(mapping, key)
  return getall_instance("currentquarter", mapping, key)
end

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_CurrentDay_.getall = function(mapping, key)
  return getall_instance("currentday", mapping, key)
end

local function file_exists(path)
  local file = io.open(path, "rb")
  if file ~= nil then
    file.close(file)
    return true
  end
  return false
end

-- register on XDSL platforms
if file_exists("/etc/config/xdsl") == true then
  register(InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_)
  register(InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_Total_)
  register(InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_Showtime_)
  register(InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_QuarterHour_)
  register(InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_CurrentDay_)
end
