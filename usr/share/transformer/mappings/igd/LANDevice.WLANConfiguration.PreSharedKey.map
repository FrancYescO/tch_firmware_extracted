-- Automatically generated from InternetGatewayDevice:1.14
-- using generator version 2.3
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.PreSharedKey.{i}.",
        access = "readOnly",
        minEntries = 1, -- TODO: understand why transformer complains about minEntries being 10 (see mapload.lua:84)
        maxEntries = 10,
        parameters = {
            PreSharedKey = {
                access = "readOnly", -- readwrite not supported
                type = "string",
                max = "64",
            },
            KeyPassphrase = {
                access = "readWrite",
                hidden = "true",
                type = "string",
                max = "63",
                min = "8",  -- Added this to line up Device:2 parameter
            },
            AssociatedDeviceMACAddress = {
                access = "readOnly", -- readwrite not supported
                type = "string",
            },
            X_0876FF_PreSharedKey = {
                access = "readOnly",
                type = "string",
                max = "64",
                description = "To authenticate and validate users on Wireless LAN",
            },
            X_0876FF_KeyPassphrase = {
                access = "readOnly",
                type = "string",
                max = "63",
                min = "8",
                description = "An encryption key from a passphrase",
            }
        }
    }
}

local uciHelper = mapper("ucihelper")
local wlanConfigCommon = require("transformer.shared.WLANConfigurationCommon")
local wirelessBinding = {config = "wireless"}
local bandSteerHelper = require("transformer.shared.bandsteerhelper")
local transactions = {}

local function getFromUci(sectionname, option, default)
  wirelessBinding.sectionname = sectionname
  if option then
    wirelessBinding.option = option
    wirelessBinding.default = default
    return uciHelper.get_from_uci(wirelessBinding)
  end
  return uciHelper.getall_from_uci(wirelessBinding)
end

local function setOnUci(sectionname, option, value, commitapply)
  wirelessBinding.sectionname = sectionname
  wirelessBinding.option = option
  uciHelper.set_on_uci(wirelessBinding, value, commitapply)
  transactions[wirelessBinding.config] = true
end

local function entriesPreSharedKey(mapping, parentKey)
  local entries = {}
  -- The size of this table is fixed with exactly 10 entries
  for i = 1, 10 do
    entries[i] = parentKey .. "psk_" .. i
  end
  return entries
end

local getPreSharedKey =  {
  PreSharedKey = "",
  KeyPassphrase = function(mapping, param, key, parentKey)
  return getFromUci(wlanConfigCommon.getAPFromIface(parentKey), "wpa_psk_key")
  end,
  AssociatedDeviceMACAddress = "",
  X_0876FF_PreSharedKey = "",
  X_0876FF_KeyPassphrase = function(mapping, param, key, parentKey)
  return getFromUci(wlanConfigCommon.getAPFromIface(parentKey), "wpa_psk_key")
end
}

local setPreSharedKey = {
  KeyPassphrase = function(mapping, param, value, key, parentKey)
    local keyNumber = key:match(".*(%d+)")
    if keyNumber == "1" then
      if not bandSteerHelper.isBaseIface(parentKey) and bandSteerHelper.isBandSteerEnabledByIface(parentKey) then
        return nil, "Cannot modify the value when bandsteer is enabled"
      else
        setOnUci(wlanConfigCommon.getAPFromIface(parentKey), "wpa_psk_key", value, commitapply)
        wlanConfigCommon.modifyBSPeerNodeAuthentication("wpa_psk_key", value, parentKey, commitapply)
      end
    else
      return nil, "Error setting KeyPassphrase! Invalid PreSharedKey!"
    end
  end,
}

local function commit()
  for config, changed in pairs(transactions) do
    if changed then
      uciHelper.commit({ config = config })
      transactions[config] = false
   end
end
end

local function revert()
for config, changed in pairs(transactions) do
  if changed then
    uciHelper.revert({ config = config })
    transactions[config] = false
  end
end
transactions = {}
end

local ap_binding = {config = "wireless", sectionname = nil, option = "iface", extended = true}

local function getIfaceForAP(ap)
  ap_binding.sectionname = ap
  return uciHelper.get_from_uci(ap_binding)
end

local function presharedkey_cb(mapping, action, config, sectiontype, sectionname, option)
  if option == "wpa_psk_key" then
     -- see WLANConfigurationCommon.lua for the reason:
     -- 1) entriesPreSharedKey(), the key was composed of wifi-iface name(parentkey) + "_psk_" + [1-10]
     -- 2) getPreSharedKey["KeyPassphrase"], when set uci.wireless.wifi-ap.@?.wpa_psk_key
     --    all of InternetGatewayDevice.LANDevice.i.WLANConfiguration.i.PreSharedKey.?.KeyPassphrase,
     --    whose parentkey is this wifi-iface, will be changed
     local iface = getIfaceForAP(sectionname)
     if iface then
        local events = {}
        for i = 1,10 do
            events[#events + 1] = { key = iface.."_psk_"..tostring(i), paramname = "KeyPassphrase" }
        end
        return events
     end
  end
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.add_watchers = function(mapping)
  local uci_evsrc = eventsource("uci")
  uci_evsrc.watch(mapping, { set = presharedkey_cb }, "wireless", "wifi-ap", nil, "wpa_psk_key")
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.entries = entriesPreSharedKey
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.get =  getPreSharedKey
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.set = setPreSharedKey
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.commit = commit
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_.revert = revert

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_PreSharedKey_i_)
