-- Automatically generated from InternetGatewayDevice:1.14
-- using generator version 2.3
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_ = {
  objectType = {
      name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WEPKey.{i}.",
      access = "readOnly",
      minEntries = 1, -- TODO: understand why transformer complains about minEntries being 4 (see mapload.lua:84)
      maxEntries = 4,
      parameters = {
          WEPKey = {
              access = "readWrite",
              hidden = "true",
              type = "string",
              max = "128",
          },
          X_0876FF_WEPKey = {
              access = "readOnly",
              type = "string",
              max = "128",
              description = "Security passcode for Wi-Fi device",
          }
      }
   }
}

local uciHelper = require("transformer.mapper.ucihelper")
local wlanConfCommon = require("transformer.shared.WLANConfigurationCommon")
local wirelessBinding = { config = "wireless" }
local transactions = {}
local ap_binding = {config = "wireless", sectionname = nil, option = "iface", extended = true}

local function getFromUci(sectionname, option, default)
  wirelessBinding.sectionname = sectionname
  if option then
    wirelessBinding.option = option
    wirelessBinding.default = default
    return uciHelper.get_from_uci(wirelessBinding)
  end
  return uciHelper.getall_from_uci(wirelessBinding)
end

local function setOnUci(sectionname, option, value, commitapply)
  wirelessBinding.sectionname = sectionname
  wirelessBinding.option = option
  uciHelper.set_on_uci(wirelessBinding, value, commitapply)
  transactions[wirelessBinding.config] = true
end

local function getIfaceForAP(ap)
  ap_binding.sectionname = ap
  return uciHelper.get_from_uci(ap_binding)
end

local wepKeys = {}
local wepKeyIndex = {}
uciHelper.foreach_on_uci({ config = "wireless", sectionname = "wifi-ap" }, function(s)
local name = s[".name"]
wepKeyIndex[name] = 1
wepKeys[name] = { "", "", "", "" }
end)

local function entriesWEPKey(mapping, parentkey)
  return { parentkey .. "_wep_1", parentkey .. "_wep_2", parentkey .. "_wep_3", parentkey .. "_wep_4" }
end

local function getWEPKey(mapping, param, key, parentkey)
  return getFromUci(wlanConfCommon.getAPFromIface(parentkey), "wep_key")
end

local function setWEPKey(mapping, param, value, key, parentKey)
  if (#value ~= 5 and #value ~= 10 and #value ~= 13 and #value ~= 26) then
    return nil, "WEP key must be 5, 10, 13 or 26 characters long"
  end
  if (#value == 10 or #value == 26) and (not value:match("^[%x]+$")) then
    return nil, "WEP key of length 10 or 26 can only contain the hexadecimal digits"
  end
  local keyNumber = key:match(".+_wep_(%d+)$")
  local ap = wlanConfCommon.getAPFromIface(parentKey)
  if tonumber(wepKeyIndex[ap]) == tonumber(keyNumber) then
    setOnUci(ap, "wep_key", value, commitapply)
    wepKeys[ap][keyNumber] = value
  end
end

local function wepkey_cb(mapping, action, config, sectiontype, sectionname, option)
  if option == "wep_key" then
     -- see WLANConfigurationCommon.lua for the reason:
     -- 1) entriesWEPKey(), the key was composed of wifi-iface name(parentkey) + "_wep_" + [1-10]
     -- 2) getWEPKey(), when set uci.wireless.wifi-ap.@?.wep_key,
     --    all of InternetGatewayDevice.LANDevice.i.WLANConfiguration.i.WEPKey.?.WEPKey,
     --    whose parentkey is this wifi-iface, will be changed
     local iface = getIfaceForAP(sectionname)
     if iface then
        local events = {}
        for i = 1,4 do
            events[#events + 1] = { key = iface.."_wep_"..tostring(i), paramname = "WEPKey" }
        end
        return events
     end
  end
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.add_watchers = function(mapping)
  local uci_evsrc = eventsource("uci")
  uci_evsrc.watch(mapping, { set = wepkey_cb }, "wireless", "wifi-ap", nil, "wep_key")
end


local function commit()
  for config, changed in pairs(transactions) do
    uciHelper.commit({ config = config })
    transactions[config] = false
  end
end

local function revert()
  for config, changed in pairs(transactions) do
    uciHelper.revert({ config = config })
    transactions[config] = false
  end
  transactions = {}
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.entries = entriesWEPKey
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.get = getWEPKey
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.set = setWEPKey
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.commit = commit
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_.revert = revert

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WEPKey_i_)
