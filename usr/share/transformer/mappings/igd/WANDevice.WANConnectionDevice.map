-- Automatically generated from InternetGatewayDevice:1.3
-- using generator version 2.1

local InternetGatewayDevice_WANDevice_i_WANConnectionDevice_i_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.",
    access = "readWrite",
    numEntriesParameter = "WANConnectionNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      -- WANIPConnectionNumberOfEntries
      -- automatically created when InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}. is loaded
      -- WANPPPConnectionNumberOfEntries
      -- automatically created when InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}. is loaded
    }
  }
}

local wanconnectiondevice = require 'transformer.shared.mappings.wan.wanconnectiondevice'
local xtm_binding = { config = "xtm"}
local mapper, commitapply = mapper, commitapply
local uci_helper = mapper("ucihelper")
local split_key = mapper("nwcommon").split_key
local add_on_uci = uci_helper.add_on_uci
local set_on_uci = uci_helper.set_on_uci
local commit_on_uci = uci_helper.commit
local generate_key = uci_helper.generate_key
local revert_on_uci = uci_helper.revert
local delete_on_uci = uci_helper.delete_on_uci
local key2sectionname = {}

local changes_done = false

local function entries(mapping, parentkey)
  local WANConnectionDevices, keys = wanconnectiondevice.entries(parentkey)
  key2sectionname = keys
  return WANConnectionDevices
end

local function add(mapping, parentkey)
  local devtype = split_key(parentkey)
  local _key = ""
  if devtype == "ETH" or devtype == "MOB" then
    return nil, "only one ETH WANConnectionDevice allowed"
  elseif devtype == "DSL" then
    xtm_binding.sectionname = "atmdevice"
    local sectionname = add_on_uci(xtm_binding, commitapply)
    xtm_binding.sectionname = sectionname
    _key = generate_key()
    xtm_binding.option = "_key"
    set_on_uci(xtm_binding, _key)
    _key = parentkey .. "|" .. _key
    key2sectionname[_key] = sectionname
  end
  changes_done = true
  return _key
end

local function delete(mapping, key)
  xtm_binding.sectionname = key2sectionname[key]
  if nil == xtm_binding.sectionname then
    return nil, "The default WANConnectionDevice can't be deleted"
  end
  xtm_binding.option = nil
  delete_on_uci(xtm_binding, commitapply)
  changes_done = true
  return true
end

local function commit()
  if changes_done then
    commit_on_uci(xtm_binding)
    changes_done = false
  end
end

local function revert()
  if changes_done then
    revert_on_uci(xtm_binding)
    changes_done = false
  end
end

InternetGatewayDevice_WANDevice_i_WANConnectionDevice_i_.get = {
}

InternetGatewayDevice_WANDevice_i_WANConnectionDevice_i_.entries = entries
InternetGatewayDevice_WANDevice_i_WANConnectionDevice_i_.add = add
InternetGatewayDevice_WANDevice_i_WANConnectionDevice_i_.delete = delete
InternetGatewayDevice_WANDevice_i_WANConnectionDevice_i_.commit = commit
InternetGatewayDevice_WANDevice_i_WANConnectionDevice_i_.revert = revert

register(InternetGatewayDevice_WANDevice_i_WANConnectionDevice_i_)
