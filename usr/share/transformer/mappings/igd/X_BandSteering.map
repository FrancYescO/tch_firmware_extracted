-- Manually generated
local InternetGatewayDevice_Services_X_BandSteering_ = {
  objectType = {
    name = "InternetGatewayDevice.Services.X_BandSteering.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
    },
  },
}

local bandSteerHelper = require("transformer.shared.bandsteerhelper")
local isConfigChanged = false
local isBandSteerEnabledByAp = bandSteerHelper.isBandSteerEnabledByAp
local setBandSteerValue = bandSteerHelper.setBandSteerValue
local uci_helper = require("transformer.mapper.ucihelper")
local wirelessBinding = {config = "wireless"}

InternetGatewayDevice_Services_X_BandSteering_.get = {
  Enable = function(mapping, param)
    return isBandSteerEnabledByAp("ap0") and "1" or "0"
  end,
}

InternetGatewayDevice_Services_X_BandSteering_.set = {
  Enable = function(mapping, param, value)
    local bandSteer, errMsg = setBandSteerValue(value, "ap0")
    if not bandSteer then
      return nil, errMsg
    end
    isConfigChanged = true
  end,
}

InternetGatewayDevice_Services_X_BandSteering_.commit = function()
  if isConfigChanged then
    uci_helper.commit(wirelessBinding)
    isConfigChanged = false
  end
end

InternetGatewayDevice_Services_X_BandSteering_.revert = function()
  if isConfigChanged then
    uci_helper.revert(wirelessBinding)
    isConfigChanged = false
  end
end

register(InternetGatewayDevice_Services_X_BandSteering_)
