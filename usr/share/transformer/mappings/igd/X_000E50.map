local Multi_InternetGatewayDevice_Services_ = {
  objectType = {
    name = "#ROOT.",
    access = "readOnly",
    description = "ONO-Wifi service related parameters",
    minEntries = 0,
    maxEntries = 1,
    parameters = {
      Enabled = {
        access = "readWrite",
        type = "boolean",
        default = "false",
        description = "Enables/disables the ONO-Wifi service. If disabled, all ONO-Wifi services must be switched off(SSID's,etc)",
      },
      MaxAssocUsers = {
        access = "readWrite",
        type = "unsignedInt",
        default = "4",
        description = "Maximum number of users that can be associated to all the ONO-Wifi service's WiFi signals,including authenticated and unauthenticated users.",
      },
      MaxAssocUsersSSID = {
        access = "readWrite",
        type = "unsignedInt",
        default = "4",
        description = "Maximum number of users that can be associated to SSID ONO-Wifi service's WiFi signal,including authenticated and unauthenticated users.",
      },
      MaxAssocUsersEAPSSID = {
        access = "readWrite",
        type = "unsignedInt",
        default = "4",
        description = "Maximum number of users that can be associated to EAPSSID ONO-Wifi service's WiFi signal,including authenticated and unauthenticated users.",
      },
      SSID = {
        access = "readWrite",
        type = "string",
        default = "_ONOWiFi",
        description = "The SSID string of ONO-Wifi service with Captive Portal authentication, for the 2.4 GHz signal.",
      },
      SSID_Mac = {
        access = "readOnly",
        type = "string",
        description = "MAC of the SSID",
      },
      SSID_TForwarding = {
        access = "readWrite",
        type = "boolean",
        default = "true",
        description = "Broadcast/multicast block behaviors configuration",
      },
      SSID5 = {
        access = "readWrite",
        type = "string",
        default = "_ONOWiFi",
        description = "Same as above for the 5 GHz signal with Captive Portal authentication.",
      },
      SSID5_Mac = {
        access = "readOnly",
        type = "string",
        description = "MAC of the SSID5",
      },
      SSID5_TForwarding = {
        access = "readWrite",
        type = "boolean",
        default = "true",
        description = "Broadcast/multicast block behaviors configuration",
      },
      EAPSSID = {
        access = "readWrite",
        type = "string",
        default = "_AUTO_ONOWiFi",
        description = "Same as above for the 2.4 GHz signal with EAP.",
      },
      EAPSSID_Mac = {
        access = "readOnly",
        type = "string",
        description = "MAC of the EAPSSID",
      },
      EAPSSID_TForwarding = {
        access = "readWrite",
        type = "boolean",
        default = "true",
        description = "Broadcast/multicast block behaviors configuration",
      },
      EAPSSID5 = {
        access = "readWrite",
        type = "string",
        default = "_AUTO_ONOWiFi",
        description = "Same as above for the 5 GHz signal with EAP.",
      },
      EAPSSID5_Mac = {
        access = "readOnly",
        type = "string",
        description = "MAC of the EAPSSID5",
      },
      EAPSSID5_TForwarding = {
        access = "readWrite",
        type = "boolean",
        default = "true",
        description = "Broadcast/multicast block behaviors configuration",
      },
      EAPServer = {
        access = "readWrite",
        type = "string",
        default = "10.110.4.15",
        description = "AAA RADIUS-servers for EAP",
      },
      EAPServerAuth = {
        access = "readWrite",
        type = "int",
        default = "1812",
        range = {
          {
            min = "0",
            max = "65535",
          },
        },
        description = "Authentication Port Radius",
      },
      EAPServerAcc = {
        access = "readWrite",
        type = "int",
        default = "1813",
        range = {
          {
            min = "0",
            max = "65535",
          },
        },
        description = "Accounting Port Radius",
      },
      EAPServerSecret = {
        access = "readWrite",
        type = "string",
        default = "",
        description = "Pre-shared RADIUS secret for EAP RADIUS-servers",
      },
      BandwidthMinimum = {
        access = "readWrite",
        type = "unsignedInt",
        default = "10",
        description = "Minimum number of MB(Synchronization speed) to enable ONO-Wifi. If the CPE sync speed is lower, the ONO-Wifi service MUST be disabled",
      },
      Bandwidthpercentage = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "0",
            max = "100",
          },
        },
        default = "70",
        description = "Percentage of Bandwidth available for ONO-Wifi service.",
      },
      BandwidthEgress = {
        access = "readWrite",
        type = "unsignedInt",
        default = "0",
        description = "Egress bandwidth limit for ONO-Wifi service in kbit/s. 0 means no limit.",
      },
      UserSelectable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
        description = "This parameter indicates whether user console for ONO-Wifi must be visible in users Web UI. Currently write functionality not supported in DM.",
      },
      ServiceStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Connected",
          "Disconnected",
          "Error",
        },
        description = "Status of the ONO-Wifi Service. Values: 'Connected' or 'Disconnected' or 'Error'.",
      },
      ServiceID = {
        access = "readWrite",
        type = "string",
        default = "",
        description = "Vodafone Service ID. Currently Write functionality not supported in DM.",
      },
      EAP = {
        access = "readOnly",
        type = "string",
        default = "visible",
        enumeration = {
          "visible",
          "hidden",
          "off",
        },
        description = "EAP-mode. Values: 'off' or 'hidden' or 'visible'.",
      },
      EAP5 = {
        access = "readOnly",
        type = "string",
        default = "visible",
        enumeration = {
          "visible",
          "hidden",
          "off",
        },
        description = "EAP-mode. Values: 'off' or 'hidden' or 'visible'.",
      }
    }
  }
}

local string, mapper, commitapply, pairs = string, mapper, commitapply, pairs
local fon_helper = require('transformer.shared.fon_helper')
local posix = require 'tch.posix'
local AF_INET, AF_INET6 = posix.AF_INET, posix.AF_INET6
local uciHelper = mapper("ucihelper")
local greBinding = { config = "gre_hotspotd" }
local wirelessBinding = { config = "wireless" }
local webBinding = { config = "web" }
local transactions = {}
local conn = mapper("ubus").connect()
local getFromUci = uciHelper.get_from_uci
local setOnUci = uciHelper.set_on_uci
local position
local ifnames = {}
local eapAp, eap5Ap

Multi_InternetGatewayDevice_Services_.entries = function(mapping, param, key)
  ifnames = fon_helper.getIfnames()
  eapAp = fon_helper.getAp(ifnames.EAPSSID) or "ap3"
  eap5Ap = fon_helper.getAp(ifnames.EAPSSID5) or "ap5"
  return {""}
end

local function getMaxAssocUsers(mapping, param)
  local max_assoc
  wirelessBinding.option = 'max_assoc'
  local privateAPs = fon_helper.getPrivateAp()
  wirelessBinding.sectionname = privateAPs[1] or ""
  wirelessBinding.option = 'max_assoc'
  max_assoc = getFromUci(wirelessBinding)
  return tostring(max_assoc)
end

local function getAssocUsers(mapping, param)
  local maxUsers
  local interfaceNames = (param == "MaxAssocUsersSSID") and {ifnames.SSID, ifnames.SSID5} or {ifnames.EAPSSID, ifnames.EAPSSID5}
  wirelessBinding.sectionname = "wifi-ap"
  uciHelper.foreach_on_uci(wirelessBinding, function(s)
    wirelessBinding.sectionname = s['.name']
    for _, ifname in pairs(interfaceNames) do
      if s.iface and string.match(s.iface, ifname) then
        maxUsers = s.max_assoc
      end
    end
  end)
  return maxUsers
end

local function getServiceStatus(mappings, param)
  local ap = fon_helper.getAllAp()
  local apDump = conn:call("wireless.accesspoint.station", "get", {})
  for _, accpoint in pairs(ap) do
    local apDetails = apDump[accpoint]
    for _, mac in pairs(apDetails) do
      if mac.state ~= "Disconnected" and mac.assoc_time > 0 then
        return "Connected"
      end
    end
  end
  return "Disconnected"
end

local function getEAPMode(mapping, param)
  local result
  local iface = (param == "EAP") and ifnames.EAPSSID or ifnames.EAPSSID5
  wirelessBinding.sectionname = "wifi-ap"
  uciHelper.foreach_on_uci(wirelessBinding, function(s)
    wirelessBinding.sectionname = s['.name']
    if s.iface and iface and string.match(s.iface, iface) then
      if s.state == "1" then
        result = (s.public == "1") and "visible" or "hidden"
      end
    end
  end)
  return result or "off"
end

local function getWirelessUci(iface, uciOption)
  wirelessBinding.sectionname = iface
  wirelessBinding.option = uciOption
  return getFromUci(wirelessBinding) or ""
end

local function getGreHotspotUci(iface, uciOption)
  greBinding.sectionname = iface
  greBinding.option = uciOption
  return getFromUci(greBinding) or ""
end

local function getMacAddr(iface)
  local ssid = conn:call("wireless.ssid", "get",  { name = iface })
  if ssid and ssid[iface] then
    return ssid[iface].mac_address
  end
  return ""
end

--To check "user" value is present in local table
local function rolesPresent(roles)
  for k, role in pairs(roles) do
    if role == "user" then
      position = k
      return true
    end
  end
  return false
end

-- To read the UserSelectable param from the uci
local function getUserSelectable()
  webBinding.sectionname = "vfwifinetwork"
  webBinding.option = "roles"
  webBinding.default = {}
  local roles = getFromUci(webBinding)
  return rolesPresent(roles) and "1" or "0"
end

Multi_InternetGatewayDevice_Services_.get = {
  Enabled = function(mapping, param)
    return getGreHotspotUci("global", "enable")
  end,
  MaxAssocUsers = function(mapping, param)
    return getMaxAssocUsers(mapping, param) or ""
  end,
  MaxAssocUsersSSID = function(mapping, param)
    return getAssocUsers(mapping, param) or ""
  end,
  MaxAssocUsersEAPSSID = function(mapping, param)
    return getAssocUsers(mapping, param) or ""
  end,
  SSID = function(mapping, param)
    return ifnames.SSID and getWirelessUci(ifnames.SSID, "ssid") or ""
  end,
  SSID5 = function(mapping, param)
    return ifnames.SSID5 and getWirelessUci(ifnames.SSID5, "ssid") or ""
  end,
  EAPSSID = function(mapping, param)
    return ifnames.EAPSSID and getWirelessUci(ifnames.EAPSSID, "ssid") or ""
  end,
  EAPSSID5 = function(mapping, param)
    return ifnames.EAPSSID5 and getWirelessUci(ifnames.EAPSSID5, "ssid") or ""
  end,
  SSID_Mac = function(mapping, param)
    return ifnames.SSID and getMacAddr(ifnames.SSID) or ""
  end,
  SSID5_Mac = function(mapping, param)
    return ifnames.SSID5 and getMacAddr(ifnames.SSID5) or ""
  end,
  EAPSSID_Mac = function(mapping, param)
    return ifnames.EAPSSID and getMacAddr(ifnames.EAPSSID) or ""
  end,
  EAPSSID5_Mac = function(mapping, param)
    return ifnames.EAPSSID5 and getMacAddr(ifnames.EAPSSID5) or ""
  end,
  SSID_TForwarding = function(mapping, param)
    return ifnames.SSID and getWirelessUci(ifnames.SSID, "reliable_multicast") or ""
  end,
  SSID5_TForwarding = function(mapping, param)
    return ifnames.SSID5 and getWirelessUci(ifnames.SSID5, "reliable_multicast") or ""
  end,
  EAPSSID_TForwarding = function(mapping, param)
    return ifnames.EAPSSID and getWirelessUci(ifnames.EAPSSID, "reliable_multicast") or ""
  end,
  EAPSSID5_TForwarding = function(mapping, param)
    return ifnames.EAPSSID5 and getWirelessUci(ifnames.EAPSSID5, "reliable_multicast") or ""
  end,
  EAPServer = function(mapping, param)
    return getWirelessUci(eapAp .. "_auth0", "ip")
  end,
  EAPServerAuth = function(mapping, param)
    return getWirelessUci(eapAp .. "_auth0", "port")
  end,
  EAPServerAcc = function(mapping, param)
    return getWirelessUci(eapAp .. "_acct0", "port")
  end,
  EAPServerSecret = function(mapping, param)
    return getWirelessUci(eapAp .. "_auth0", "secret")
  end,
  BandwidthMinimum = function(mapping, param)
    return getGreHotspotUci("gt0", "min_xdsl_downstream_rate")
  end,
  Bandwidthpercentage = function(mapping, param)
    return getGreHotspotUci("gt0", "upstream_percentage")
  end,
  BandwidthEgress = function(mapping, param)
    return getGreHotspotUci("gt0", "upstream_rate")
  end,
  UserSelectable = function()
    return getUserSelectable()
  end,
  ServiceStatus = function(mapping, param)
    return getServiceStatus(mapping, param) or ""
  end,
  ServiceID = "",
  EAP = function(mapping, param)
    return getEAPMode(mapping, param) or ""
  end,
  EAP5 = function(mapping, param)
    return getEAPMode(mapping, param) or ""
  end
}

local function setAssocUsers(mapping, param, value)
  wirelessBinding.sectionname = "wifi-ap"
  local _, interfaceNames
  if param == "MaxAssocUsers" then
    _, interfaceNames = fon_helper.getPrivateAp()
  else
    interfaceNames = (param == "MaxAssocUsersSSID") and {ifnames.SSID, ifnames.SSID5} or {ifnames.EAPSSID, ifnames.EAPSSID5}
  end
  uciHelper.foreach_on_uci(wirelessBinding, function(s)
    wirelessBinding.sectionname = s['.name']
    for _, ifname in pairs(interfaceNames) do
      if s.iface and s.iface == ifname then
        wirelessBinding.option = "max_assoc"
        setOnUci(wirelessBinding, value, commitapply)
        transactions[wirelessBinding.config] = true
      end
    end
  end)
end

local function setGreHotspotUci(iface, uciOption, value)
  greBinding.sectionname = iface
  greBinding.option = uciOption
  setOnUci(greBinding, value, commitapply)
  transactions[greBinding.config] = true
end

local function setWirelessUci(iface, uciOption, value)
  wirelessBinding.sectionname = iface
  wirelessBinding.option = uciOption
  setOnUci(wirelessBinding, value, commitapply)
  transactions[wirelessBinding.config] = true
end

local function setEAPServer(mapping, param, value)
  local rc = posix.inet_pton(AF_INET, value) or posix.inet_pton(AF_INET6, value) or fon_helper.validateStringIsDomainName(value)
  if not rc then
    return nil, "Invalid value"
  end
  setWirelessUci(eapAp .. "_auth0", "ip", value)
  setWirelessUci(eapAp .. "_acct0", "ip", value)
  setWirelessUci(eap5Ap .. "_auth0", "ip", value)
end

-- To set the UserSelectable param in the uci
-- @param iface value of the sectionname to which the value is to be set in the section
-- @param value value of the option to be set in the section
local function setUserSelectable(iface, value)
  webBinding.sectionname = iface
  webBinding.option = "roles"
  local roles = getFromUci(webBinding) or {}
  if value == "1" and not rolesPresent(roles) then
    roles[#roles + 1] = "user"
    setOnUci(webBinding, roles, commitapply)
    commitapply:newset("InternetGatewayDevice.Services.X_VFWifi.UserSelectable")
  elseif value == "0" and rolesPresent(roles) then
    table.remove(roles, position)
    setOnUci(webBinding, roles, commitapply)
    commitapply:newset("InternetGatewayDevice.Services.X_VFWifi.UserSelectable")
  end
  transactions[webBinding.config] = true
end

Multi_InternetGatewayDevice_Services_.set = {
  Enabled = function(mapping, param, value)
    setGreHotspotUci("global", "enable", value)
  end,
  MaxAssocUsers = function(mapping, param, value)
    setAssocUsers(mapping, param, value)
  end,
  MaxAssocUsersSSID = function(mapping, param, value)
    setAssocUsers(mapping, param, value)
  end,
  MaxAssocUsersEAPSSID = function(mapping, param, value)
    setAssocUsers(mapping, param, value)
  end,
  SSID = function(mapping, param, value)
    return ifnames.SSID and setWirelessUci(ifnames.SSID, "ssid", value)
  end,
  SSID5 = function(mapping, param, value)
    return ifnames.SSID5 and setWirelessUci(ifnames.SSID5, "ssid", value)
  end,
  EAPSSID = function(mapping, param, value)
    return ifnames.EAPSSID and setWirelessUci(ifnames.EAPSSID, "ssid", value)
  end,
  EAPSSID5 = function(mapping, param, value)
    return ifnames.EAPSSID5 and setWirelessUci(ifnames.EAPSSID5, "ssid", value)
  end,
  SSID_TForwarding = function(mapping, param, value)
    return ifnames.SSID and setWirelessUci(ifnames.SSID, "reliable_multicast", value)
  end,
  SSID5_TForwarding = function(mapping, param, value)
    return ifnames.SSID5 and setWirelessUci(ifnames.SSID5, "reliable_multicast", value)
  end,
  EAPSSID_TForwarding = function(mapping, param, value)
    return ifnames.EAPSSID and setWirelessUci(ifnames.EAPSSID, "reliable_multicast", value)
  end,
  EAPSSID5_TForwarding = function(mapping, param, value)
    return ifnames.EAPSSID5 and setWirelessUci(ifnames.EAPSSID5, "reliable_multicast", value)
  end,
  EAPServer = function(mapping, param, value)
    return setEAPServer(mapping, param, value)
  end,
  EAPServerAuth = function(mapping, param, value)
    setWirelessUci(eapAp .. "_auth0", "port", value)
    setWirelessUci(eap5Ap .. "_auth0", "port", value)
  end,
  EAPServerAcc = function(mapping, param, value)
    setWirelessUci(eapAp .. "_acct0", "port", value)
  end,
  EAPServerSecret = function(mapping, param, value)
    setWirelessUci(eapAp .. "_auth0", "secret", value)
    setWirelessUci(eap5Ap .. "_auth0", "secret", value)
    setWirelessUci(eapAp .. "_acct0", "secret", value)
  end,
  BandwidthMinimum = function(mapping, param, value)
    setGreHotspotUci("gt0", "min_xdsl_downstream_rate", value)
  end,
  Bandwidthpercentage = function(mapping, param, value)
    setGreHotspotUci("gt0", "upstream_percentage", value)
  end,
  BandwidthEgress = function(mapping, param, value)
    setGreHotspotUci("gt0", "upstream_rate", value)
  end,
  UserSelectable = function(mapping, param, value)
    setUserSelectable("vfwifinetwork", value)
  end,
  ServiceID = function(mapping, param, value)
    return true
  end,
}

Multi_InternetGatewayDevice_Services_.commit = function()
  for config in pairs(transactions) do
    uciHelper.commit({config = config})
  end
  transactions = {}
end

Multi_InternetGatewayDevice_Services_.revert = function()
  for config in pairs(transactions) do
    uciHelper.revert({config = config})
  end
  transactions = {}
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_InternetGatewayDevice_Services_, "#ROOT", {"InternetGatewayDevice.Services.X_VFWifi", "InternetGatewayDevice.Services.X_000E50_Wifi"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
