-- Automatically generated from InternetGatewayDevice:1.14
-- using generator version 2.3
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_ = {
  objectType = {
    name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WPS.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      DeviceName = {
        access = "readOnly",
        type = "string",
        max = "32",
      },
      DevicePassword = {
        access = "readWrite",
        hidden = "true",
        type = "unsignedInt"
      },
      X_0876FF_DevicePassword = {
        access = "readOnly",
        type = "string",
        description = "Represents the DevicePassword used",
      },
      UUID = {
        access = "readOnly",
        type = "string",
        max = "36",
      },
      ConfigMethodsSupported = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "USBFlashDrive",
          "Ethernet",
          "Label",
          "Display",
          "ExternalNFCToken",
          "IntegratedNFCToken",
          "NFCInterface",
          "PushButton",
          "Keypad",
        },
      },
      ConfigMethodsEnabled = {
        access = "readOnly", -- readWrite currently not supported
        list = true,
        type = "string",
        enumeration = {
          "USBFlashDrive",
          "Ethernet",
          "Label",
          "Display",
          "ExternalNFCToken",
          "IntegratedNFCToken",
          "NFCInterface",
          "PushButton",
          "Keypad",
        },
      },
      ConfigurationState = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Not configured",
          "Configured",
        },
      },
      SetupLockedState = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Unlocked",
          "LockedByLocalManagement",
--[[ TODO: Currently Unlocked and LockedByLocalManagement is only supported
          "LockedByRemoteManagement",
          "PINRetryLimitReached",
--]]
        },
      },
      SetupLock = {
        access = "readWrite",
        type = "boolean",
      },
      X_0876FF_PushButton = {
        access = "readWrite",
        type = "boolean",
        description = "Trigger WPS push button",
      },
      X_000E50_PushButton = {
        access = "readWrite",
        type = "boolean",
        description = "Trigger WPS push button",
      },
      Version = {
        access = "readOnly",
        type = "unsignedInt",
      },
--[[ TODO:
      LastConfigurationError = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "NoError",
          "DecryptionCRCFailure",
          "SignalTooWeak",
          "CouldntConnectToRegistrar",
          "RogueActivitySuspected",
          "DeviceBusy",
          "SetupLocked",
          "MessageTimeout",
          "RegistrationSessionTimeout",
          "DevicePasswordAuthFailure",
        },
      },
      -- RegistrarNumberOfEntries
      -- automatically created when InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WPS.Registrar.{i}. is loaded
      RegistrarEstablished = {
        access = "readOnly",
        type = "boolean",
      },
]]
    }
  }
}

local wirelessBinding = {config = "wireless"}
local ubus = require("ubus")
local conn = ubus.connect()
local floor = math.floor
local uciHelper = mapper("ucihelper")
local wlanConfigCommon = require("transformer.shared.WLANConfigurationCommon")
local transactions = {}

local function getFromUci(sectionname, option, default)
  wirelessBinding.sectionname = sectionname
  if option then
    wirelessBinding.option = option
    wirelessBinding.default = default
    return uciHelper.get_from_uci(wirelessBinding)
  end
  return uciHelper.getall_from_uci(wirelessBinding)
end

local function setOnUci(sectionname, option, value, commitapply)
  wirelessBinding.sectionname = sectionname
  wirelessBinding.option = option
  uciHelper.set_on_uci(wirelessBinding, value, commitapply)
  transactions[wirelessBinding.config] = true
end

local function validatePin(pin)
  -- check whether the last digit of the pin is the the checksum of the others
  local accum = 0
  accum = accum + 3*(floor(pin/10000000)%10)
  accum = accum + (floor(pin/1000000)%10)
  accum = accum + 3*(floor(pin/100000)%10)
  accum = accum + (floor(pin/10000)%10)
  accum = accum + 3*(floor(pin/1000)%10)
  accum = accum + (floor(pin/100)%10)
  accum = accum + 3*(floor(pin/10)%10)
  accum = accum + (pin%10)
  if (accum % 10) == 0 then
    return true
  end
  return nil, "Invalid Pin"
end

local function validateWPSPIN(pin)
  if pin == "" or pin:match("^%d%d%d%d$") then
    return true
  end
  if pin:match("^%d%d%d%d%d%d%d%d$") then
    return validatePin(pin)
  end
  return nil, "Invalid Pin"
end

local function getUUID(key)
  local uuid = wlanConfigCommon.getWirelessUbus("accesspoint", key, "uuid")
  local uuidValue = {}
  local pattern = { uuid:sub(1,8), uuid:sub(9,12), uuid:sub(13,16), uuid:sub(17,20), uuid:sub(21,32) }
  if uuid ~= "" then
    for _, v in ipairs(pattern) do
      uuidValue[ #uuidValue + 1] = v
    end
  end
  return table.concat(uuidValue, "-")
end

local wpsStateMap = {
  configured    = "Configured",
  notconfigured = "Not configured",
}

local function getConfigurationState(key)
  local ap = wlanConfigCommon.getAPFromIface(key)
  local state = getFromUci(ap, "wsc_state")
  if state == "" then
    local data = conn:call("wireless.accesspoint.wps", "get", { name = ap }) or {}
    state = data[ap] and data[ap].wsc_state or ""
  end
  return wpsStateMap[state] or ""
end

local function setDevicePassword(value, key)
  local ap = wlanConfigCommon.getAPFromIface(key)
  local pin = value
  local res, err = validateWPSPIN(value)
  if res then
    conn:call("wireless.accesspoint.wps", "enrollee_pin", { name = ap, value = pin })
  else
    return nil, err
  end
end

local getWPS = {
  Enable = function(mapping, param, key)
    return getFromUci(wlanConfigCommon.getAPFromIface(key), "wps_state")
  end,
  DevicePassword = "0",
  ConfigMethodsSupported = "Label,PushButton",
  X_0876FF_DevicePassword = function(mapping, param, key)
    return getFromUci(wlanConfigCommon.getAPFromIface(key), "wps_ap_pin")
  end,
  UUID = function(mapping, param, key)
    return getUUID(key)
  end,
  ConfigMethodsEnabled = "PushButton",
  ConfigurationState = function(mapping, param, key)
    return getConfigurationState(key)
  end,
  DeviceName = function(mapping, param, key)
    return wlanConfigCommon.getAPFromIface(key)
  end,
  SetupLockedState = function(mapping, param, key)
  local setupLock = getFromUci(wlanConfigCommon.getAPFromIface(key), "wps_ap_setup_locked", "0")
    return setupLock == "1" and "LockedByLocalManagement" or "Unlocked"
  end,
  SetupLock = function(mapping, param, key)
    return getFromUci(wlanConfigCommon.getAPFromIface(key), "wps_ap_setup_locked", "0")
  end,
  X_0876FF_PushButton = "0",
  X_000E50_PushButton = "0",
  Version = "2",
}

local getallWPS = function(mapping, key)
local ap = wlanConfigCommon.getAPFromIface(key)
local apData = getFromUci(ap)
local setupLock = apData.wps_ap_setup_locked or "0"
return {
  Enable = apData.wps_state and apData.wps_state or "",
  X_0876FF_DevicePassword = apData.wps_ap_pin and apData.wps_ap_pin or "",
  SetupLock = setupLock,
  SetupLockedState = setupLock == "1" and "LockedByLocalManagement" or "Unlocked",
  UUID = getUUID(key),
  ConfigurationState = getConfigurationState(key),
  DeviceName = ap
}
end

local function triggerWPSPushButton(value)
  if value == "1" then
    conn:call("wireless", "wps_button", {})
  end
end

local setWPS = {
  Enable = function(mapping, param, value, key)
    local ap = wlanConfigCommon.getAPFromIface(key)
    setOnUci(ap, "wps_state", value, commitapply)
  end,
  DevicePassword = function(mapping, param, value, key)
    return setDevicePassword(value, key)
  end,
  SetupLock = function(mapping, param, value, key)
    setOnUci(wlanConfigCommon.getAPFromIface(key), "wps_ap_setup_locked", value, commitapply)
  end,
  X_0876FF_PushButton = function(mapping, param, value)
    triggerWPSPushButton(value)
  end,
  X_000E50_PushButton = function(mapping, param, value)
    triggerWPSPushButton(value)
  end,
}

local function commit()
  for config, changed in pairs(transactions) do
    if changed then
      uciHelper.commit({ config = config })
      transactions[config] = false
    end
  end
end

local function revert()
  for config, changed in pairs(transactions) do
    if changed then
      uciHelper.revert({ config = config })
      transactions[config] = false
    end
  end
  transactions = {}
end

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.set = setWPS
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.get = getWPS
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.getall = getallWPS
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.commit = commit
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_.revert = revert
register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_WPS_)
