-- Automatically generated from InternetGatewayDevice:1.8
-- using generator version 2.3
local InternetGatewayDevice_Layer2Bridging_ = {
  objectType = {
    name = "InternetGatewayDevice.Layer2Bridging.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      MaxBridgeEntries = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      MaxDBridgeEntries = {
        access = "readOnly",
        type = "unsignedInt",
      },
      MaxQBridgeEntries = {
        access = "readOnly",
        type = "unsignedInt",
      },
      MaxVLANEntries = {
        access = "readOnly",
        type = "unsignedInt",
      },
      MaxFilterEntries = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      MaxMarkingEntries = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      -- BridgeNumberOfEntries
      -- automatically created when InternetGatewayDevice.Layer2Bridging.Bridge.{i}. is loaded
      -- FilterNumberOfEntries
      -- automatically created when InternetGatewayDevice.Layer2Bridging.Filter.{i}. is loaded
      -- MarkingNumberOfEntries
      -- automatically created when InternetGatewayDevice.Layer2Bridging.Marking.{i}. is loaded
      -- AvailableInterfaceNumberOfEntries
      -- automatically created when InternetGatewayDevice.Layer2Bridging.AvailableInterface.{i}. is loaded
    }
  }
}


local InternetGatewayDevice_Layer2Bridging_Bridge_i_ = {
  objectType = {
    name = "InternetGatewayDevice.Layer2Bridging.Bridge.{i}.",
    access = "readOnly", -- readOnly for now
    numEntriesParameter = "BridgeNumberOfEntries",
    enableParameter = "BridgeEnable",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      BridgeKey = {
        access = "readOnly",
        type = "unsignedInt",
      },
      BridgeStandard = {
        access = "readOnly", -- readOnly for now
        type = "string",
        enumeration = {
          "802.1D",
          "802.1Q",
        },
        default = "802.1D",
      },
      BridgeEnable = {
        access = "readOnly", --readOnly for now
        type = "boolean",
        default = "false",
      },
      BridgeStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Disabled",
          "Enabled",
          "Error",
        },
        default = "Disabled",
      },
      BridgeName = {
        access = "readOnly", --readOnly for now
        type = "string",
        max = "64",
        default = "",
      },
      VLANID = {
        access = "readOnly",  -- readOnly for now
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "4094",
          },
        },
        default = "0",
      },
      -- PortNumberOfEntries
      -- automatically created when InternetGatewayDevice.Layer2Bridging.Bridge.{i}.Port.{i}. is loaded
      -- VLANNumberOfEntries
      -- automatically created when InternetGatewayDevice.Layer2Bridging.Bridge.{i}.VLAN.{i}. is loaded
    }
  }
}


local InternetGatewayDevice_Layer2Bridging_Bridge_i_Port_i_ = {
  objectType = {
    name = "InternetGatewayDevice.Layer2Bridging.Bridge.{i}.Port.{i}.",
    access = "readOnly",  -- readOnly for now
    numEntriesParameter = "PortNumberOfEntries",
    enableParameter = "PortEnable",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      PortEnable = {
        access = "readOnly",  --readOnly for now
        type = "boolean",
        default = "false",
      },
      PortInterface = {
        access = "readOnly",  --readOnly for now
        type = "string",
        max = "16",
        default = "",
      },
      PortState = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Disabled",
          "Blocking",
          "Listening",
          "Learning",
          "Forwarding",
          "Broken",
        },
        default = "Disabled",
      },
      PVID = {
        access = "readOnly",  --readOnly for now
        type = "int",
        range = {
          {
            min = "1",
            max = "4094",
          },
        },
        default = "1",
      },
      AcceptableFrameTypes = {
        access = "readOnly", --readOnly for now
        type = "string",
        enumeration = {
          "AdmitAll",
          "AdmitOnlyVLANTagged",
          "AdmitOnlyPrioUntagged",
        },
        default = "AdmitAll",
      },
      IngressFiltering = {
        access = "readOnly",  --readOnly for now
        type = "boolean",
        default = "false",
      },
    }
  }
}


local InternetGatewayDevice_Layer2Bridging_Bridge_i_VLAN_i_ = {
  objectType = {
    name = "InternetGatewayDevice.Layer2Bridging.Bridge.{i}.VLAN.{i}.",
    access = "readOnly",  --readOnly for now
    numEntriesParameter = "VLANNumberOfEntries",
    enableParameter = "VLANEnable",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      VLANEnable = {
        access = "readOnly",  --readOnly for now
        type = "boolean",
        default = "false",
      },
      VLANName = {
        access = "readOnly", --readOnly for now
        type = "string",
        max = "64",
        default = "",
      },
      VLANID = {
        access = "readOnly", --readOnly for now
        type = "int",
        range = {
          {
            min = "1",
            max = "4094",
          },
        },
      },
    }
  }
}


local InternetGatewayDevice_Layer2Bridging_Filter_i_ = {
  objectType = {
    name = "InternetGatewayDevice.Layer2Bridging.Filter.{i}.",
    access = "readWrite",
    numEntriesParameter = "FilterNumberOfEntries",
    enableParameter = "FilterEnable",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      FilterKey = {
        access = "readOnly",
        type = "unsignedInt",
      },
      FilterEnable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      FilterStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Disabled",
          "Enabled",
          "Error",
        },
        default = "Disabled",
      },
      FilterBridgeReference = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
          },
        },
        default = "-1",
      },
      ExclusivityOrder = {
        access = "readWrite",
        type = "unsignedInt",
        default = "0",
      },
      FilterInterface = {
        access = "readWrite",
        type = "string",
        max = "16",
        default = "",
      },
      VLANIDFilter = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
            max = "4094",
          },
        },
        default = "-1",
      },
      AdmitOnlyVLANTagged = {
        access = "readWrite",
        status = "deprecated",
        type = "boolean",
        default = "false",
      },
      EthertypeFilterList = {
        access = "readWrite",
        list = true,
        max = "256",
        type = "unsignedInt",
        default = "",
      },
      EthertypeFilterExclude = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      SourceMACAddressFilterList = {
        access = "readWrite",
        list = true,
        max = "512",
        type = "string",
        default = "",
      },
      SourceMACAddressFilterExclude = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      DestMACAddressFilterList = {
        access = "readWrite",
        list = true,
        max = "512",
        type = "string",
        default = "",
      },
      DestMACAddressFilterExclude = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      SourceMACFromVendorClassIDFilter = {
        access = "readWrite",
        type = "string",
        max = "256",
        default = "",
      },
      SourceMACFromVendorClassIDFilterExclude = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      SourceMACFromVendorClassIDMode = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "Exact",
          "Prefix",
          "Suffix",
          "Substring",
        },
        default = "Exact",
      },
      DestMACFromVendorClassIDFilter = {
        access = "readWrite",
        type = "string",
        max = "256",
        default = "",
      },
      DestMACFromVendorClassIDFilterExclude = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      DestMACFromVendorClassIDMode = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "Exact",
          "Prefix",
          "Suffix",
          "Substring",
        },
        default = "Exact",
      },
      SourceMACFromClientIDFilter = {
        access = "readWrite",
        type = "string",
        max = "256",
        default = "",
      },
      SourceMACFromClientIDFilterExclude = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      DestMACFromClientIDFilter = {
        access = "readWrite",
        type = "string",
        max = "256",
        default = "",
      },
      DestMACFromClientIDFilterExclude = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      SourceMACFromUserClassIDFilter = {
        access = "readWrite",
        type = "string",
        max = "256",
        default = "",
      },
      SourceMACFromUserClassIDFilterExclude = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      DestMACFromUserClassIDFilter = {
        access = "readWrite",
        type = "string",
        max = "256",
        default = "",
      },
      DestMACFromUserClassIDFilterExclude = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
    }
  }
}



local InternetGatewayDevice_Layer2Bridging_Marking_i_ = {
  objectType = {
    name = "InternetGatewayDevice.Layer2Bridging.Marking.{i}.",
    access = "readWrite",
    numEntriesParameter = "MarkingNumberOfEntries",
    enableParameter = "MarkingEnable",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      MarkingKey = {
        access = "readOnly",
        type = "unsignedInt",
      },
      MarkingEnable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      MarkingStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Disabled",
          "Enabled",
          "Error",
        },
        default = "Disabled",
      },
      MarkingBridgeReference = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
          },
        },
        default = "-1",
      },
      MarkingInterface = {
        access = "readWrite",
        type = "string",
        max = "16",
        default = "",
      },
      VLANIDUntag = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      VLANIDMark = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
            max = "4094",
          },
        },
        default = "-1",
      },
      VLANIDMarkOverride = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      EthernetPriorityMark = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
            max = "7",
          },
        },
        default = "-1",
      },
      EthernetPriorityOverride = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
    }
  }
}



local InternetGatewayDevice_Layer2Bridging_AvailableInterface_i_ = {
  objectType = {
    name = "InternetGatewayDevice.Layer2Bridging.AvailableInterface.{i}.",
    access = "readOnly",
    numEntriesParameter = "AvailableInterfaceNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      AvailableInterfaceKey = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      InterfaceType = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
        enumeration = {
          "LANInterface",
          "WANInterface",
          "LANRouterConnection",
          "WANRouterConnection",
        },
      },
      InterfaceReference = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "256",
        type = "string",
        pathRef = true,
      },
    }
  }
}



--implementation of Layer2Bridging. Everything below this line is not part of the auto-generated code


local common = mapper('nwcommon')
local logger = require("transformer.logger")
local log = logger.new("InternetGatewayDevice.Layer2Bridging", 2)
local tprint = require("tch.tableprint")
local gsub, sub, gmatch, match = string.gsub, string.sub, string.gmatch, string.match
local resolve = resolve
local ubus = mapper("ubus").connect()
local uci = mapper('ucihelper')
local pairs = pairs
local ipairs = ipairs
local open = io.open
local format = string.format
local tonumber = tonumber
local tostring = tostring
local floor = math.floor
local concat = table.concat

-- stub implementation currently not used
local function get_network_side_of_interface(interface_name)
    return "wan"
end

-- stub implementation currently not used
local function get_interface_type(interface_name)
    return "8021.D"
end

-- indicator that current bridge info has been read in.
-- will be reset to false on any set operation
local layer2_cached = false

-- table of bridge information as exposed by brctl.
-- brctl show is used ge the requisite information
-- bridge_table[1] -> the name of the bridge
-- bridge_table[2] -> the id of the bridge
-- bridge_table[3] -> a table of ports associated to the bridge
local bridge_table = {}

-- table of bridges. Used as bridge iterator
local bridges = {}

-- table of ports/interfaces. Used a port/interface iterator

local interface_table = {}

-- This function parses a table of tokenized lines (currently obtained from brctl show)
-- When it returns the following will be true :
-- bridge_table will be populated as described above
-- interface_table will be populated with a list of interfaces
-- bridges will be populated with a list of bridges
--bridge_data is a table of tokenized lines
local function parse_bridge_info(bridge_data)
    local num_tokens_in_line = 0
    local bridge_interfaces = {}  -- interfaces associated to the current bridge
    local bridge_name = ""
    local bridge_id = ""
    local line_data = ""
    --indicator that a brige (and interfaces has already been parsed and so now)
    --information can be aggregated into the bridge_table
    local initial_bridge_parsed = false   --indicator that a bridge
    local lbridge_entry_table = {}

        for i, v in pairs(bridge_data) do
            line_data = v
            local tokens_in_line = {}

            local token_index = 0
            local token = ""
            local interface_index = 1
            -- parse out the set of tokens contained in a brctl line
            for token in string.gmatch( line_data,  "[^%s]+") do
                token_index = token_index + 1
                tokens_in_line[token_index] = token
            end
            -- 4 tokens in a line indicates that this a bridge interface line
            if ( #tokens_in_line == 4) then
                if ( initial_bridge_parsed == true ) then
                    lbridge_entry_table[1] = bridge_name
                    lbridge_entry_table[2] = bridge_id
                    lbridge_entry_table[3] = bridge_interfaces
                    table.insert(bridge_table, lbridge_entry_table)
                    lbridge_entry_table = {}
                    bridge_interfaces = {}
                    -- process the current bridge and set of interfaces
                end
                initial_bridge_parsed = true
                --bridge_interfaces = {}
                bridge_name = tokens_in_line[1]
                bridges[#bridges+1] = bridge_name
                bridge_id = tokens_in_line[2]
                bridge_interfaces[#bridge_interfaces+1] = tokens_in_line[4]
                interface_table[#interface_table+1] = tokens_in_line[4]
            else
            -- a single token in a line indicates that this is an interface associated with a bridge interface
            -- i.e a port interface on a bridge
                bridge_interfaces[#bridge_interfaces+1] = tokens_in_line[1]
                interface_table[#interface_table+1] = tokens_in_line[1]
            end
        end
        lbridge_entry_table = {}
        lbridge_entry_table[1] = bridge_name
        lbridge_entry_table[2] = bridge_id
        lbridge_entry_table[3] = bridge_interfaces
        --create an associative entry of the current bridge information
        table.insert(bridge_table, lbridge_entry_table)
end

--uses the brctl application to get information pertaining to the currrent bridge devices on the gateway
-- The data obtained will be pased to parse_bridge_info(() for processing
--
local function get_bridge_info()
    bridges = {}
    bridge_table = {}
    interface_table = {}
    local file_table = {}
    os.execute("brctl show > /tmp/brctl_info  && sync")
    local file_name = "/tmp/brctl_info"
-- read file in and parse
    local file_handle, err_str = io.open(file_name, "r")
        if ( file_handle == nil ) then
            return
        end
-- TODO How do you know that the data contained in the file is valid ??
    local file_iter = file_name and io.lines(file_name)
    local index = 0
        for line in file_iter do
            -- for the proc entry files throw away the first line
            if index ~= 0 then
                file_table[index] = line
            end
                index = index + 1
        end
        parse_bridge_info(file_table)
end



InternetGatewayDevice_Layer2Bridging_.get = {
    MaxBridgeEntries = function (mapping, param, key)
    return "10"
  end,

    MaxDBridgeEntries = function (mapping, param, key)
    return "10"
  end,

    MaxQBridgeEntries = function (mapping, param, key)
    return "0"
  end,

    MaxVLANEntries = function (mapping, param, key)
    return "5"
  end,

    MaxFilterEntries = function(mapping, param, key)
    return "1024"
 end,

    MaxMarkingEntries = function (mapping, param, key)
    return "0"
  end,

    BridgeNumberOfEntries = function (mapping, param, key)
    return #bridges
    end,

  FilterNumberOfEntries = function (mapping, param, key)
    return "2"
  end,

  MarkingNumberOfEntries = function (mapping, param, key)
    return "0"
  end,

  AvailableInterfaceNumberOfEntries = function (mapping, param, key)
    return "4"
  end,
}

register(InternetGatewayDevice_Layer2Bridging_)


InternetGatewayDevice_Layer2Bridging_Bridge_i_.entries = function(mapping, parentkey)
    if ( layer2_cached == false ) then
        get_bridge_info()
        layer2_cached = true
    end
    return bridges
end

InternetGatewayDevice_Layer2Bridging_Bridge_i_.add = function ()
    error ("not implemented")
end

InternetGatewayDevice_Layer2Bridging_Bridge_i_.delete = function ()
    error ("not implemented")
end


InternetGatewayDevice_Layer2Bridging_Bridge_i_.get = {
    Alias = function (mapping, param, key)
        return "Alias" .. key
    end,

    BridgeKey = function (mapping, param, key)
      for value, name in pairs(bridges) do
        if name == key then
            return tostring(value)
        end
      end
      return ""
    end,

    BridgeStandard = function (mapping, param, key)
        return "802.1D"
    end,

    BridgeEnable = function (mapping, param, key)
        return "true"
    end,

    BridgeStatus = function (mapping, param, key)
        return "Enabled"
    end,

    BridgeName = function (mapping, param, key)
        return  key
    end,

    VLANID = function (mapping, param, key)
        return "0"
    end,
}


InternetGatewayDevice_Layer2Bridging_Bridge_i_Port_i_.add = function ()
    error ("not implemented")
end

InternetGatewayDevice_Layer2Bridging_Bridge_i_Port_i_.delete = function ()
    error ("not implemented")
end


InternetGatewayDevice_Layer2Bridging_Bridge_i_Port_i_.get = {
    PortEnable = function (mapping, param, key)
        return "true"
    end,

    Alias = function (mapping, param, key)
        return "alias_" .. key
    end,

    PortInterface = function (mapping, param, key)
        return key
    end,

    PortState = function (mapping, param, key)
        return "Forwarding"
    end,

    PVID = function (mapping, param, key)
        return "1"
    end,

    AcceptableFrameTypes = function (mapping, param, key)
        return  "AdmitAll"
    end,

    IngressFiltering = function (mapping, param, key)
        return "0"
    end
}

-- iterate over the bridge_table and find the list of ports associated to a given bridge
InternetGatewayDevice_Layer2Bridging_Bridge_i_Port_i_.entries = function(mapping,parentkey)
    local bridge_name = ""
    local port_table = {}
    for i,v in pairs(bridge_table) do
        -- bridge_table contains a table of bridge entries.
        -- bridge_table[1] is the bridge name
        -- bridge_table[3] is the table of ports associated to this bridge ( obtained from get_bridge_info() )
        bridge_name = v[1]
            if  bridge_name == parentkey then
                port_table = v[3]
            end
    end
    return port_table
end

--  VLANs not yet implemented
local bridge_vlan_table = {}
InternetGatewayDevice_Layer2Bridging_Bridge_i_VLAN_i_.entries = function(mapping, parentkey)
    return bridge_vlan_table
end

InternetGatewayDevice_Layer2Bridging_Bridge_i_VLAN_i_.get = {
    VLANEnable = function (mapping, param, key)
        return "true"
    end,

    Alias = function (mapping, param, key)
        return "Alias" .. key
    end,

    VLANName = function (mapping, param, key)
        return "VLAN"..key
    end,

    VLANID = function (mapping, param, key)
        -- as all bridges are currently 802.1D bridges
        return "0"
    end,
}



register(InternetGatewayDevice_Layer2Bridging_Bridge_i_)
register(InternetGatewayDevice_Layer2Bridging_Bridge_i_Port_i_)
register(InternetGatewayDevice_Layer2Bridging_Bridge_i_VLAN_i_)

-- Not yet implemented
--register(InternetGatewayDevice_Layer2Bridging_Filter_i_)
--register(InternetGatewayDevice_Layer2Bridging_Marking_i_)
--register(InternetGatewayDevice_Layer2Bridging_AvailableInterface_i_)






