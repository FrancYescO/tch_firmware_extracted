-- Manually generated
local firewall_Config_ = {
  objectType = {
    name = "InternetGatewayDevice.Firewall.Config.",
    access = "readOnly",
    description = "Object to customize the firewall config according to CTL specific requirements",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
    }
  }
}

register(firewall_Config_)

local X_0876FF_IPv6Firewall_ = {
  objectType = {
    name = "InternetGatewayDevice.X_0876FF_IPv6Firewall.",
    access = "readOnly",
    description = "Object to customize the ipv6 family of firewall config according to CTL specific requirements",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
    }
  }
}

register(X_0876FF_IPv6Firewall_)

local X_0876FF_IPv6Firewall_Config_ = {
  objectType = {
    name = "InternetGatewayDevice.X_0876FF_IPv6Firewall.Config.",
    access = "readOnly",
    description = "Object to customize the ipv6 family of firewall config according to CTL specific requirements",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
    }
  }
}

register(X_0876FF_IPv6Firewall_Config_)

local InternetGatewayDevice_Multi_ = {
  objectType = {
    name = "InternetGatewayDevice.#ROOT.{i}.",
    access = "readOnly",
    description = "Object to customize the firewall config according to CTL specific requirements",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      AddressingType = {
        access = "readOnly",
        type = "string",
        description = "Denotes the addressing type of the rules, Private or Public",
        enumeration = {
            "PrivateSubnet",
            "PublicSubnet",
            "Both",
        }
      },
      X_0876FF_StealthMode = {
        access = "readWrite",
        type = "boolean",
        description = "Denotes whether the modem will respond to all unsolicited WAN traffic including pings",
      },
      LastChange = {
        access = "readOnly",
        type = "dateTime",
        description = "Denotes the timestamp of the last change time if any parameters were changed",
      },
      Config = {
        access = "readOnly",
        type = "string",
        description = "Denotes the selected configuration of the firewall low, high, off, user",
        enumeration = {
            "High",
            "Low",
            "X_000E50_User",
            "Off",
            "X_000E50_Lax",
        }
      },
      InboundConfig = {
        access = "readWrite",
        type = "string",
        description = "Denotes the configuration for inbound traffic Accept or Drop",
        enumeration = {
            "Allow",
            "Block",
        }
      },
      OutboundConfig = {
        access = "readWrite",
        type = "string",
        description = "Denotes the configuration for outbound traffic Accept or Drop",
        enumeration = {
            "Allow",
            "Block",
        }
      },
    }
  }
}

local commitapply, os, mapper = commitapply, os, mapper
local nwCommon = mapper("nwcommon")
local ipv4ToNum = nwCommon.ipv4ToNum
local uciHelper = mapper('ucihelper')
local getFromUci = uciHelper.get_from_uci
local setOnUci = uciHelper.set_on_uci
local firewallBinding = { config = "firewall" }
local keyToSectionName = {}
local lastModifiedTime, lastModifiedTimeIPv6
local keyGenerated, configChanged, stealthModeChanged, stealthModeIPv6Changed

-- List of firewall section which has to be considered for generating the entries
local rules = {
  ["rule"]       = true,
  ["highrule"]   = true,
  ["normalrule"] = true,
  ["laxrule"]    = true,
  ["userrule"]   = true,
}

-- List of applicable firewall configuration levels
local config = {
  ["high"]		= "High",
  ["normal"]		= "Medium",
  ["user"]		= "Medium",
  ["lax"]		= "Low",
}

local function typeIPv6(mapping)
  if mapping.objectType.name:match("^InternetGatewayDevice.X_0876FF_IPv6Firewall") then
    return true
  end
  return false
end

-- Function to generate the entries or keys
-- Each rule in firewall section (highrule, normalrule, laxrule, userrule, rule) are considered as an entry
InternetGatewayDevice_Multi_.entries = function(mapping)
  local entries = {}
  local result
  for rule in pairs(rules) do
    firewallBinding.sectionname = rule
    result = uciHelper.foreach_on_uci(firewallBinding, function(s)
      local key = s._key
      if (not typeIPv6(mapping) and s.family ~= "ipv6") or (typeIPv6(mapping) and s.family == "ipv6") then
        if not key then
          firewallBinding.sectionname = s[".name"]
          key = uciHelper.generate_key_on_uci(firewallBinding)
          keyGenerated = true
        end
        entries[#entries + 1] = key
        keyToSectionName[key] = s[".name"]
      end
    end)
  end
  if keyGenerated == true then
    if result then
      uciHelper.commit_keys(firewallBinding)
    else
      uciHelper.revert_keys(firewallBinding)
    end
    keyGenerated = false
  end
  return entries
end

-- Function to check if the given ip address is in private subnet
local function ipv4PrivateIPValidation(ipaddr)
  local ip = ipv4ToNum(ipaddr)
  if (ipv4ToNum("192.168.0.0") >= ip and ip <= ipv4ToNum("192.168.255.255")) or (ipv4ToNum("172.16.0.0") >= ip and ip <= ipv4ToNum("172.31.255.255")) or (ipv4ToNum("10.0.0.0") >= ip and ip <= ipv4ToNum("10.255.255.255")) then
    return "PrivateSubnet"
  end
  return "PublicSubnet"
end

-- Function to check whether input ipv6 address is a valid global unicast address or public address
-- @ipaddr #string, IPv6 Address
-- @return #boolean, returns true if ipaddr is valid global unicast address or public address
-- If ipv6 address starts with binary 001x, then it is a global unicast address or public address
-- (e.g) if ipv6 address starts with 2 or 3 (binary 0010 or 0011 respectively)
-- Reference : https://technet.microsoft.com/en-us/library/cc757359%28v=ws.10%29.aspx
local function ipv6PublicIPValidation(ipaddr)
  return ipaddr and ipaddr:match("^[23]")
end

-- Function to get Inbound or outbound configurations for the given zone
local function getInOrOutboundConfig(param, key)
  local result
  firewallBinding.sectionname = keyToSectionName[key]
  firewallBinding.option = "src"
  firewallBinding.default = nil
  local zoneName = getFromUci(firewallBinding)
  firewallBinding.sectionname = "zone"
  uciHelper.foreach_on_uci(firewallBinding, function(s)
    if s.name == zoneName then
      result = param == "InboundConfig" and s.input or s.output
      return false
    end
  end)
  return result == "ACCEPT" and "Allow" or "Block"
end

-- Function to get custom firewall configuration parameters for CTL specific requirements
InternetGatewayDevice_Multi_.get = {
  AddressingType = function(mapping, param, key)
    firewallBinding.sectionname = keyToSectionName[key]
    local ruleDetails = uciHelper.getall_from_uci(firewallBinding)
    if ruleDetails.dest == "lan" and ruleDetails.dest_ip then
      return typeIPv6(mapping) and (ipv6PublicIPValidation(ruleDetails.dest_ip) and "PublicSubnet" or "PrivateSubnet") or ipv4PrivateIPValidation(ruleDetails.dest_ip)
    elseif ruleDetails.src == "lan" and ruleDetails.src_ip then
      return typeIPv6(mapping) and (ipv6PublicIPValidation(ruleDetails.src_ip) and "PublicSubnet" or "PrivateSubnet") or ipv4PrivateIPValidation(ruleDetails.src_ip)
    end
    --TODO:Currently, default addressing type is taken as PrivateSubnet
    return "PrivateSubnet"
  end,
  X_0876FF_StealthMode = function(mapping, param, key)
    firewallBinding.sectionname = typeIPv6(mapping) and "stealth_mode_ipv6" or "stealth_mode"
    firewallBinding.option = "enabled"
    firewallBinding.default = "1"
    return getFromUci(firewallBinding)
  end,
  LastChange = function(mapping, param, key)
    -- Last modified time of X_0876FF_StealthMode
    return typeIPv6(mapping) and (lastModifiedTimeIPv6 or "") or (lastModifiedTime or "")
  end,
  Config = function(mapping, param, key)
    firewallBinding.sectionname = "fwconfig"
    firewallBinding.option = "acs_admin_config"
    firewallBinding.default = nil
    if getFromUci(firewallBinding) == "" then
      firewallBinding.option = "level"
      local level = getFromUci(firewallBinding)
      return level ~= "" and (config[level] or "") or "Off"
    end
    -- If `Disabled`, report the administrative configuration
    return getFromUci(firewallBinding)
  end,
  InboundConfig = function(mapping, param, key)
    return getInOrOutboundConfig(param, key)
  end,
  OutboundConfig = function(mapping, param, key)
    return getInOrOutboundConfig(param, key)
  end,
}

-- Function to set Inbound or outbound configurations for the given zone
local function setInOrOutboundConfig(param, value, key)
  firewallBinding.sectionname = keyToSectionName[key]
  firewallBinding.option = "src"
  firewallBinding.default = nil
  local zoneName = getFromUci(firewallBinding)
  firewallBinding.sectionname = "zone"
  uciHelper.foreach_on_uci(firewallBinding, function(s)
    if s.name == zoneName then
      firewallBinding.sectionname = s[".name"]
      firewallBinding.option = param == "InboundConfig" and "input" or "output"
      value = value == "Allow" and "ACCEPT" or "DROP"
      setOnUci(firewallBinding, value, commitapply)
      return false
    end
  end)
  configChanged = true
end

-- Function to get custom firewall configuration parameters for CTL specific requirements
InternetGatewayDevice_Multi_.set = {
  X_0876FF_StealthMode = function(mapping, param, value, key)
    firewallBinding.sectionname = typeIPv6(mapping) and "stealth_mode_ipv6" or "stealth_mode"
    firewallBinding.option = "enabled"
    setOnUci(firewallBinding, value, commitapply)
    configChanged = true
    if typeIPv6(mapping) then
      stealthModeIPv6Changed = true
    else
      stealthModeChanged = true
    end
  end,
  InboundConfig = function(mapping, param, value, key)
    setInOrOutboundConfig(param, value, key)
  end,
  OutboundConfig = function(mapping, param, value, key)
    setInOrOutboundConfig(param, value, key)
  end,
}

InternetGatewayDevice_Multi_.commit = function()
  if configChanged == true then
    if stealthModeChanged == true then
      lastModifiedTime = os.date("%FT%TZ", os.time()) or lastModifiedTime
    elseif stealthModeIPv6Changed == true then
      lastModifiedTimeIPv6 = os.date("%FT%TZ", os.time()) or lastModifiedTimeIPv6
    end
    uciHelper.commit(firewallBinding)
    configChanged = false
    stealthModeChanged = false
    stealthModeIPv6Changed = false
  end
end

InternetGatewayDevice_Multi_.revert = function()
  if configChanged == true then
    uciHelper.revert(firewallBinding)
    configChanged = false
  end
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(InternetGatewayDevice_Multi_, "#ROOT", {"Firewall.Config.X_0876FF_Custom", "X_0876FF_IPv6Firewall.Config.X_0876FF_Custom"})
for _, dupli in ipairs(duplicates) do
  if dupli.objectType.name:match("^InternetGatewayDevice.X_0876FF_IPv6Firewall") then
    dupli.objectType.parameters["Config"] = nil
  end
  register(dupli)
end
