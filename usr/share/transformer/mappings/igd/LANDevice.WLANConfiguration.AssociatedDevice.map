-- Automatically generated from InternetGatewayDevice:1.14
-- using generator version 2.3
local InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_ = {
    objectType = {
        name = "InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.AssociatedDevice.{i}.",
        access = "readOnly",
        numEntriesParameter = "TotalAssociations",
        minEntries = 0,
        maxEntries = math.huge,
        parameters = {
            AssociatedDeviceMACAddress = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
            },
            AssociatedDeviceIPAddress = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "64",
            },
            AssociatedDeviceAuthenticationState = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "boolean",
            },
            LastRequestedUnicastCipher = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "256",
            },
            LastRequestedMulticastCipher = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "256",
            },
            LastPMKId = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "256",
            },
            LastDataTransmitRate = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "4",
            },
            X_Status = {
                access = "readOnly",
                type = "string",
                description = "Indicate current connection status of this client",
                enumeration = {
                    "Up",
                    "Error",
                    "Disabled",
                },
            },
            X_LastDataUplinkRate = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
                description = "Indicate the real uplink data rate of this client",
                range = {
                  {
                   min = "1000",
                   max = "600000",
                 },
               },
             },
             X_LastDataDownlinkRate = {
                 access = "readOnly",
                 activeNotify = "canDeny",
                 type = "unsignedInt",
                 description = "Indicate the real downlink data rate of this client",
                 range = {
                   {
                    min = "1000",
                    max = "600000",
                   },
                 },
             },
             X_000E50_Status = {
                 access = "readOnly",
                 type = "string",
                 description = "Indicate current connection status of this client",
                 enumeration = {
                     "Up",
                     "Error",
                     "Disabled",
                 },
             },
             X_000E50_LastDataUplinkRate = {
                 access = "readOnly",
                 activeNotify = "canDeny",
                 type = "unsignedInt",
                 description = "Indicate the real uplink data rate of this client",
                 range = {
                   {
                    min = "1000",
                    max = "600000",
                   },
                 },
             },
             X_000E50_LastDataDownlinkRate = {
                 access = "readOnly",
                 activeNotify = "canDeny",
                 type = "unsignedInt",
                 description = "Indicate the real downlink data rate of this client",
                 range = {
                   {
                    min = "1000",
                    max = "600000",
                   },
                 },
             },
             X_000E50_AssociatedDeviceRSSI = {
                 access = "readOnly",
                 activeNotify = "canDeny",
                 type = "int",
             },
             X_000E50_LastDisconnectBy = {
                 access = "readOnly",
                 type = "string",
                 description = "Indicates the lastdisconnect",
             },
             X_000E50_LastDisconnectReason = {
                 access = "readOnly",
                 type = "string",
                 description = "Explains the reason for last disconnect",
             },
             X_000E50_TxNoAckFailures = {
                 access = "readOnly",
                 type = "string",
                 description = "Transmitted number of acknowledgement failures",
             },
             X_000E50_TxPhyRate = {
                 access = "readOnly",
                 type = "string",
                 description = "Transmitted physical rate",
             },
             X_000E50_RxPhyRate = {
                 access = "readOnly",
                 type = "string",
                 description = "Received physical rate",
             },
             X_000E50_RSSIHistory = {
                 access = "readOnly",
                 type = "string",
                 description = "History of Received Signal Strength Indication",
             },
             X_000E50_Capabilities = {
                 access = "readOnly",
                 type = "string",
                 description = "Capabilities supported by the associated device",
             },
             X_HostName = {
                 access ="readOnly",
                 type = "string",
                 description = "indicate the hostname of associated device",
             },
             X_Active = {
                 access ="readOnly",
                 type = "boolean",
                 description = "indicates the state of associated device",
             },
             X_OperatingStandard = {
                 access = "readOnly",
                 type = "string",
                 description = "indicates the standard of associated device",
                 enumeration = {
                   "a",
                   "b",
                   "g",
                   "n",
                   "ac",
                 },
             },
             X_000E50_ConnectionTime = {
               access = "readOnly",
               type = "unsignedInt",
               description = "Time in seconds since the device was associated",
             },
             X_000E50_SNR = {
               access = "readOnly",
               type = "int",
               description = "An indicator of SNR on the uplink from the associated device to the access point, measured in dB"
             },
        }
    }
}

local wlanConfigCommon = require("transformer.shared.WLANConfigurationCommon")
local uciHelper = mapper("ucihelper")
local wirelessBinding = {config = "wireless"}
local conn = mapper("ubus").connect()

local function getFromUci(sectionname, option, default)
  wirelessBinding.sectionname = sectionname
  if option then
    wirelessBinding.option = option
    wirelessBinding.default = default
    return uciHelper.get_from_uci(wirelessBinding)
  end
  return uciHelper.getall_from_uci(wirelessBinding)
end

local paramMap = {
  AssociatedDeviceAuthenticationState = "state",
  LastRequestedUnicastCipher    = "encryption",
  LastDataTransmitRate          = "tx_data_rate_history",
  X_LastDataUplinkRate          = "tx_phy_rate",
  X_000E50_LastDataUplinkRate   = "tx_phy_rate",
  X_LastDataDownlinkRate        = "rx_phy_rate",
  X_000E50_LastDataDownlinkRate = "rx_phy_rate",
  X_000E50_AssociatedDeviceRSSI = "rssi",
  X_000E50_LastDisconnectBy     = "last_disconnect_by",
  X_000E50_LastDisconnectReason = "last_disconnect_reason",
  X_000E50_TxNoAckFailures      = "tx_noack_failures",
  X_000E50_TxPhyRate            = "tx_phy_rate",
  X_000E50_RxPhyRate            = "rx_phy_rate",
  X_000E50_RSSIHistory          = "rssi_history",
  X_000E50_Capabilities         = "capabilities",
  X_000E50_ConnectionTime       = "assoc_time",
  X_000E50_SNR                  = "rssi"
}

local defaultValueMap = {
  AssociatedDeviceAuthenticationState = "",
  LastRequestedUnicastCipher    = "",
  LastDataTransmitRate          = "",
  X_LastDataUplinkRate          = "0",
  X_000E50_LastDataUplinkRate   = "0",
  X_LastDataDownlinkRate        = "0",
  X_000E50_LastDataDownlinkRate = "0",
  X_000E50_AssociatedDeviceRSSI = "0",
  X_000E50_LastDisconnectBy     = "0",
  X_000E50_LastDisconnectReason = "0",
  X_000E50_TxNoAckFailures      = "0",
  X_000E50_TxPhyRate            = "0",
  X_000E50_RxPhyRate            = "0",
  X_000E50_RSSIHistory          = "0",
  X_000E50_Capabilities         = "",
  X_000E50_ConnectionTime       = "0",
  X_000E50_SNR                  = "0"
}

local function getStationInfo(_, param, key, parentKey)
  local macAddress = key:match("_sta_([%da-fA-F:]+)$") or ""
  if key:match("_sta_") then
    return wlanConfigCommon.getStationDataFromIface(parentKey, macAddress, paramMap[param], defaultValueMap[param]) or {}
  elseif key:match("_wds") then
    return wlanConfigCommon.getDataFromWDS(key, paramMap[param], defaultValueMap[param])
  end
end

local function getStatus(mapping, param, key)
  local ssid = key:match("^(%S+)_sta*") or key:match("^(%S+)_wds*")
  ssid = ssid:gsub("_remote", "") or ssid
  local ssiddata = ssid and wlanConfigCommon.getWirelessUbus("ssid", ssid)
  local state = ssiddata and ssiddata["oper_state"]
  return state and tostring(state) == "1" and "Up" or "Down"
end

local function getSNR(param, key, parentKey)
    local noiseValue
    local rssi = getStationInfo(nil, param, key, parentKey)
    local channelStats = conn:call("wireless.radio.acs.channel_stats", "get", {})
    if channelStats then
      for _, v in pairs(channelStats) do
        noiseValue = v.noise
      end
    end
    local noise = noiseValue and noiseValue or "0"
    local SNRValue = tonumber(rssi)-tonumber(noise)
    return SNRValue and tostring(SNRValue) or "0"
end

local entriesAssociatedDevice = function(mapping, parentKey)
  local entries = {}
  local ssid = getFromUci(parentKey, "ssid")
  local stationInfo = wlanConfigCommon.getStationDataFromIface(parentKey)
  if stationInfo then
    for mac, data in pairs(stationInfo) do
      if data.state:match("Associated") and data.last_ssid == ssid then
        entries[#entries + 1] = parentKey .. "_sta_" .. mac
      end
    end
  end
  -- To include the Repeaters listed in wireless.wds
  local wdsDevices = conn:call("wireless.wds", "get", {}) or {}
  local ssidData = conn:call("wireless.ssid", "get", {}) or {}
  local iface = parentKey:gsub("_remote", "")
  local macAddress = ssidData and ssidData[iface] and ssidData[iface]['mac_address']
  if macAddress and wdsDevices then
    for wdsIdx, wdsDev in pairs(wdsDevices) do
      if wdsDev['local_mac_address'] == macAddress and wdsDev['mac_address'] then
        entries[#entries + 1] = parentKey .. "_" .. wdsIdx .. "_" .. wdsDev['mac_address']
      end
    end
  end
  return entries
end

-- Extender's MAC Address may differ in 'hostmanager.device' and 'wireless.wds'
local function modifyMAC(mac)
  local firstOctets, lastOctet = mac:match("([%x%x%:]+)(%x%x)$")
  if not firstOctets and not lastOctet then
    firstOctets = (tonumber(mac, 16) - 1)
    firstOctets = string.format("%02x", tonumber(firstOctets))
    return firstOctets
  else
    lastOctet = (tonumber(lastOctet, 16) - 1) % 256
    if lastOctet == 255 then
      firstOctets = modifyMAC(string.sub(firstOctets, 1, #firstOctets - 1)).. ":"
    end
    lastOctet = string.format("%02x", tonumber(lastOctet))
  end
  return tostring(firstOctets .. lastOctet)
end

local getAssociatedDevice = {
  AssociatedDeviceMACAddress = function(mapping, param, key)
    return key:match("([%da-fA-F:]+)$") or ""
  end,
  AssociatedDeviceIPAddress = function(mapping, param, key)
    local macAddress = key:match("([%da-fA-F:]+)$") or ""
    macAddress = key:match("_wds") and modifyMAC(macAddress) or macAddress
    local hostData = conn:call("hostmanager.device", "get", { ["mac-address"] = macAddress }) or {}
    local ipv4Address = {}
    local ipv6Address = {}
    for _, data in pairs(hostData) do
      ipv4Address = data.ipv4 or {}
      ipv6Address = data.ipv6 or {}
    end
    for _, info in pairs(ipv4Address) do
      if info.state and (info.state == "connected" or info.state == "stale") then
        return info.address or ""
      end
    end
    for _, ip6Info in pairs(ipv6Address) do
      if ip6Info.state and (ip6Info.state == "connected" or ip6Info.state == "stale") then
        return ip6Info.address or ""
      end
    end
    return ""
  end,
  AssociatedDeviceAuthenticationState = function(mapping, param, key, parentKey)
    local state = getStationInfo(nil, param, key, parentKey)
    return state:match("Authenticated") and "1" or "0"
  end,
  LastRequestedUnicastCipher = getStationInfo,
  LastRequestedMulticastCipher = "",
  LastPMKId = "",
  LastDataTransmitRate = function(mapping, param, key, parentKey)
    local txRate = getStationInfo(nil, param, key, parentKey)
    return txRate:match("%d+") or ""
  end,
  X_OperatingStandard = function(mapping, param, key, parentKey)
    local macAddress = key:match("([%da-fA-F:]+)$") or ""
    macAddress = key:match("_wds") and modifyMAC(macAddress) or macAddress
    local operatingStandard = ""
    if key:match("_sta_") then
      operatingStandard = wlanConfigCommon.getStationDataFromIface(parentKey, macAddress, "capabilities")
    elseif key:match("_wds") then
      operatingStandard = wlanConfigCommon.getDataFromWDS(key, "capabilities", "")
    end
    return operatingStandard and operatingStandard:match("802.11(%a+)") or ""
  end,
  X_HostName = function(mapping, param, key, parentKey)
    local macAddress = key:match("([%da-fA-F:]+)$") or ""
    macAddress = key:match("_wds") and modifyMAC(macAddress) or macAddress
    local hostData = conn:call("hostmanager.device", "get", { ["mac-address"] = macAddress }) or {}
    for _, data in pairs(hostData) do
      return data.hostname or ""
    end
    return ""
  end,
  X_Active = function(mapping, param, key, parentKey)
    local macAddress = key:match("([%da-fA-F:]+)$") or ""
    macAddress = key:match("_wds") and modifyMAC(macAddress) or macAddress
    local hostData = conn:call("hostmanager.device", "get", { ["mac-address"] = macAddress }) or {}
    for _, data in pairs(hostData) do
      return data.state and data.state:match("connected") and "1" or "0"
    end
    return "0"
  end,
  X_000E50_SNR = function(mapping, param, key, parentKey)
    return getSNR(param, key, parentKey)
  end,
  X_000E50_ConnectionTime = getStationInfo,
  X_Status = getStatus,
  X_000E50_Status = getStatus,
  X_LastDataUplinkRate = getStationInfo,
  X_000E50_LastDataUplinkRate = getStationInfo,
  X_LastDataDownlinkRate = getStationInfo,
  X_000E50_LastDataDownlinkRate = getStationInfo,
  X_000E50_AssociatedDeviceRSSI  = getStationInfo,
  X_000E50_LastDisconnectBy = getStationInfo,
  X_000E50_LastDisconnectReason = getStationInfo,
  X_000E50_TxNoAckFailures = getStationInfo,
  X_000E50_TxPhyRate = getStationInfo,
  X_000E50_RxPhyRate = getStationInfo,
  X_000E50_RSSIHistory = getStationInfo,
  X_000E50_Capabilities = getStationInfo,
}

InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_.entries = entriesAssociatedDevice
InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_.get = getAssociatedDevice

register(InternetGatewayDevice_LANDevice_i_WLANConfiguration_i_AssociatedDevice_i_)
