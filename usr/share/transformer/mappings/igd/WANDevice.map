-- Automatically generated from InternetGatewayDevice:1.3
-- using generator version 2.1
local InternetGatewayDevice_WANDevice_i_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.",
    access = "readOnly",
    numEntriesParameter = "WANDeviceNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      -- WANConnectionNumberOfEntries
      -- automatically created when InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}. is loaded
    }
  }
}

local uciHelper = mapper("ucihelper")

local activedevice = require "transformer.shared.models.igd.activedevice"

-- get all WANDevices marked as WAN
local ethernet_binding = { config = "ethernet", sectionname = "port" }
local xdsl_binding = { config = "xdsl", sectionname = "xdsl" }
local gponl3_binding = { config = "gponl3", sectionname = "interface" }
local mobile_binding = { config = "network", sectionname = "interface" }
--local mobiledongle_binding = { config = "mobiledongle", sectionname = "cardinfo" }

InternetGatewayDevice_WANDevice_i_.entries = function()
  local interfaces = {}
  -- check whether DSL is present on the board
  uciHelper.foreach_on_uci(xdsl_binding, function(s)
    -- iterate over all DSL ports (all - it could be a bonding board)
    interfaces[#interfaces + 1] = "DSL|" .. s['.name']
  end)
  -- check all Ethernet ports if the wan flag is set/not set
  uciHelper.foreach_on_uci(ethernet_binding, function(s)
    -- iterate over all Ethernet ports and check the 'wan' option
    if s['wan'] == '1' then
      interfaces[#interfaces + 1] = "ETH|" .. s['.name']
    end
  end)
  local veip = {}
  uciHelper.foreach_on_uci(gponl3_binding, function(s)
    -- iterate over all Ethernet ports and check the 'wan' option
    if s["l3dev"] and not veip[s["l3dev"]] then
      veip[s["l3dev"]] = true
      interfaces[#interfaces + 1] = "ETH|" .. s["l3dev"]
    end
  end)
  uciHelper.foreach_on_uci(mobile_binding, function(s)
    if s.proto and s.proto == "mobiled" then
      if s.ifname and s.ifname ~= "" then
        local f = io.open("/sys/class/net/" .. s.ifname, "r")
        if f then
          interfaces[#interfaces+1]="ETH|" .. s.ifname
          f:close()
        end
      end
    end
  end)
  for _, intf in pairs(activedevice.getActiveDevices()) do
    interfaces[#interfaces+1] = "ACTIVE|"..intf
  end
  --In the future, the dynamical mobiledongle can be discovered via section "cardinfo".
    --local mobiledongle_binding = {config="mobiledongle", sectionname="public", option="model"}
    --local dongleName = uciHelper.get_from_uci(mobiledongle_binding)
    --if  dongleName ~= "" then
    --  interfaces[#interfaces+1]='USB| .. dongleName'
    --end
  return interfaces
end

InternetGatewayDevice_WANDevice_i_.get = {
}

register(InternetGatewayDevice_WANDevice_i_)
