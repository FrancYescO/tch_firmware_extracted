-- Manually generated
local Multi_NUD_={
  objectType = {
    name = "#ROOT",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
	description = "Enable or Disable the NUD test with BR",
      },
      Result = {
        access = "readOnly",
        type = "string",
	description = "Result of the NUD Test",
        enumeration = {
          "Pass",
          "Fail",
        },
      },
      RTT = {
        access = "readOnly",
        type = "int",
	description = "RTT in milliseconds of a successful NUD test from the CE to BR and back",
      },
      PayloadLength = {
        access = "readWrite",
        type = "int",
        default = "0",
        description = "Size of the Payload sent by the CE to the BR",
      },
    }
  }
}

local ipairs, mapper = ipairs, mapper
local nudHelper = require('transformer.shared.nudhelper')
local commitapply = commitapply

local uciBindingParamMap = {
  Enable = "enable",
  Result = "result",
  RTT = "rtt",
  PayloadLength = "payload",
}

nudHelper.startup()
nudHelper.clear_ping_results()

-- Fetch the requested param from uci
local function getFromNudHelper(mapping, param)
  return nudHelper.uci_nud_get(uciBindingParamMap[param])
end

-- set the param specifed via set function in helper file
local function setOnNudHelper(mapping, param, value)
  nudHelper.uci_nud_set(uciBindingParamMap[param], value, commitapply)
end

Multi_NUD_.get = {
  Enable = getFromNudHelper,
  Result = getFromNudHelper,
  RTT = getFromNudHelper,
  PayloadLength = getFromNudHelper,
}

Multi_NUD_.set = {
  Enable = setOnNudHelper,
  PayloadLength = function(mapping, param, value)
    if value > "0" then
      setOnNudHelper(mapping, param, value)
    else
      return nil, "Error setting PayloadLength! Invalid Value!"
    end
  end,
}

Multi_NUD_.commit = nudHelper.uci_nud_commit
Multi_NUD_.revert = nudHelper.uci_nud_revert

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_NUD_, "#ROOT", { "InternetGatewayDevice.X_0876FF_NUD.", "InternetGatewayDevice.X_000E50_NUD." })
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
