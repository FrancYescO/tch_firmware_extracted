-- Automatically generated from InternetGatewayDevice:1.4
-- using generator version 2.1
local WANIPConnection = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.",
    access = "readOnly",  -- readWrite currently not supported
    numEntriesParameter = "WANIPConnectionNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      Reset = {
        access = "readOnly",  -- readWrite currently not supported
        type = "boolean",
        default = "false",
      },
      ConnectionStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Unconfigured",
          "Connecting",
          "Connected",
          "PendingDisconnect",
          "Disconnecting",
          "Disconnected",
        },
      },
      PossibleConnectionTypes = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "Unconfigured",
          "IP_Routed",
          "IP_Bridged",
        },
      },
      ConnectionType = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
        enumeration = {
          "Unconfigured",
          "IP_Routed",
          "IP_Bridged",
        },
      },
      Name = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      Uptime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LastConnectionError = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "ERROR_NONE",
          "ERROR_COMMAND_ABORTED",
          "ERROR_NOT_ENABLED_FOR_INTERNET",
          "ERROR_USER_DISCONNECT",
          "ERROR_ISP_DISCONNECT",
          "ERROR_IDLE_DISCONNECT",
          "ERROR_FORCED_DISCONNECT",
          "ERROR_NO_CARRIER",
          "ERROR_IP_CONFIGURATION",
          "ERROR_UNKNOWN",
        },
        default = "ERROR_NONE",
      },
      AutoDisconnectTime = {
        access = "readOnly",  -- readWrite currently not supported
        type = "unsignedInt",
      },
      IdleDisconnectTime = {
        access = "readOnly",  -- readWrite currently not supported
        type = "unsignedInt",
      },
      WarnDisconnectDelay = {
        access = "readOnly",  -- readWrite currently not supported
        type = "unsignedInt",
      },
      RSIPAvailable = {
        access = "readOnly",
        type = "boolean",
      },
      NATEnabled = {
        access = "readWrite",
        type = "boolean",
      },
      AddressingType = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
        enumeration = {
          "DHCP",
          "Static",
        },
      },
      ExternalIPAddress = {
        access = "readWrite",
        type = "string",
      },
      SubnetMask = {
        access = "readWrite",
        type = "string",
      },
      DefaultGateway = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
      },
      DNSEnabled = {
        access = "readOnly",  -- readWrite currently not supported
        type = "boolean",
        default = "true",
      },
      DNSOverrideAllowed = {
        access = "readOnly",  -- readWrite currently not supported
        type = "boolean",
        default = "false",
      },
      DNSServers = {
        access = "readOnly",  -- readWrite currently not supported
        list = true,
        max = "64",
        type = "string",
      },
      MaxMTUSize = {
        access = "readOnly",  -- readWrite currently not supported
        type = "unsignedInt",
        range = {
          {
            min = "1",
            max = "1540",
          },
        },
      },
      MACAddress = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
      },
      MACAddressOverride = {
        access = "readOnly",  -- readWrite currently not supported
        type = "boolean",
      },
      ConnectionTrigger = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
        enumeration = {
          "OnDemand",
          "AlwaysOn",
          "Manual",
        },
        default = "OnDemand",
      },
      RouteProtocolRx = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
        enumeration = {
          "Off",
          "RIPv1",
          "RIPv2",
          "OSPF",
        },
        default = "Off",
      },
      ShapingRate = {
        access = "readOnly",  -- readWrite currently not supported
        type = "int",
        range = {
          {
            min = "-1",
          },
        },
        default = "-1",
      },
      ShapingBurstSize = {
        access = "readOnly",  -- readWrite currently not supported
        type = "unsignedInt",
        default = "0",
      },
      X_000E50_IPv6_Enable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      X_000E50_VLANID = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
            max = "4095",
          },
        },
      },
      X_000E50_ExternalIPv6Address = {
        access = "readOnly",
        type = "string",
      },
      -- PortMappingNumberOfEntries
      -- automatically created when InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.PortMapping.{i}. is loaded
    }
  }
}


----------------------------------------------------------
-- Local definitions
-- -------------------------------------------------------
--
local format = string.format
local concat = table.concat
local uci_helper = mapper("ucihelper")
local set_on_uci = uci_helper.set_on_uci
local delete_on_uci = uci_helper.delete_on_uci
local add_on_uci = uci_helper.add_on_uci
local commitapply = commitapply
local match = string.match
local pairs, ipairs, tostring, tonumber, type = pairs, ipairs, tostring, tonumber, type
local common = mapper("nwcommon")
local interface2zone = common.interface2zone
local split_key = common.split_key
local connection = require 'transformer.shared.wanconnection'

local proto2addrtype = {static = "Static", dhcp = "DHCP"}

local transactions = {}
local firewall_binding = {config = "firewall"}

local init_value_for_static_ip = "_SET_BY_CWMP_SCRIPT_"
local netmask_value_for_static_ip = "255.255.255.255"
----------------------------------------------------------
-- Mapper implementation
----------------------------------------------------------

connection.SetConnectionList(WANIPConnection, 'ip', commitapply)

local intf_info = {}
local function get_intf_info(intf)
  local info = intf_info[intf]
  if not info then
    info = {}
    intf_info[intf] = info
  end
  return info
end

local function ip_intf_event(mapping, intf, msg)
  local trigger = false
  local addresses = msg["ipv4-address"]
  local old_ip = intf.ipv4
  local old_mask = intf.ipv4mask
  if addresses and #addresses <= 1 then
    local addr = addresses[1] or {}
    trigger = (old_ip ~= addr.address) or (old_mask ~= addr.mask)
    intf.ipv4 = addr.address
    intf.ipv4mask = addr.mask
  else
    -- no or multiple addresses
    trigger = true
    intf.ipv4 = nil
    intf.ipv4mask = nil
  end

  local events = {}

  if trigger then
    if msg.interface and type(msg.interface) == "string" then
      local keys = query_keys(mapping)
      local pattern = "^" .. msg["interface"]
      for _, keyset in ipairs(keys) do
        local key = keyset[1]
        if match(key, pattern) then
          events[#events + 1] = { key = key, paramname = "ExternalIPAddress" }
        end
      end
    end
  end

  return events
end

local function intf_action(mapping, intf, msg)
  local action = msg.action
  local events = {}

  if intf.action ~= action then
    intf.action = action
    if msg.interface and type(msg.interface) == "string" then
      local keys = query_keys(mapping)
      local pattern = "^" .. msg["interface"]
      for _, keyset in ipairs(keys) do
        local key = keyset[1]
        if match(key, pattern) then
          events[#events + 1] = { key = key, paramname = "DNSServers" }
          events[#events + 1] = { key = key, paramname = "ConnectionStatus" }
        end
      end
    end
  end

  return events
end

local function network_interface_event(mapping, event, msg)
  local intf = get_intf_info(msg.interface)

  if msg["ipv4-address"] then
    return ip_intf_event(mapping, intf, msg)
  end
  if msg["action"] then
    return intf_action(mapping, intf, msg)
  end
end

WANIPConnection.add_watchers = function(mapping)
  local ubus_evsrc = eventsource("ubus")
  ubus_evsrc.watch_event(mapping, network_interface_event, "network.interface")
end

WANIPConnection.entries = function(mapping, parentkey)
  return mapping._conn:getKeys(parentkey)
end

local networkproto_binding = {config="network", option = "proto"}
WANIPConnection.get = {
  MACAddress = function(mapping, param, key)
    return mapping._conn:getPhysicalInfo(key, "address", "L3") or ""
  end,
  MaxMTUSize = function(mapping, param, key)
    return mapping._conn:getPhysicalInfo(key, "mtu", "L3") or ""
  end,
  MACAddressOverride = "0",
  AddressingType = function(mapping, param, key)
    local v = mapping._conn:getInterfaceOption(key, 'proto')
    return proto2addrtype[v] or ""
  end,
  Enable = function(mapping, param, key, parentkey)
    if mapping._conn:isActive(key) then
      if mapping._conn:getPhysicalInfo(key, "operstate")=="up" then
        return '1'
      end
    end
    return "0"
  end,
  Reset = "0",
  ConnectionStatus = function(mapping, param, key)
    -- TODO: can't we get this via common.getIntfInfo() instead of
    -- having to use ubus calls (which are slower)?
    local i = mapping._conn:getInterfaceStatus(key)
    if i then
      if i.up then
        return "Connected"
      elseif i.pending then
        return "Connecting"
      end
    end
    return "Disconnected"
  end,
  PossibleConnectionTypes = "IP_Routed",
  ConnectionType = "IP_Routed",
  Name = function(mapping, param, key)
    return mapping._conn:getName(key)
  end,
  LastConnectionError = function(mapping, param, key, parentkey)
    if mapping._conn:getPhysicalInfo(key, "operstate")=="up" then
      return "ERROR_NONE"
    end
    if mapping._conn:getPhysicalInfo(key, "carrier")~="1" then
      return "ERROR_NO_CARRIER"
    end
    return "ERROR_UNKNOWN"
  end,
  RSIPAvailable = "0",
  ExternalIPAddress = function(mapping, param, key)
    local v = mapping._conn:getInterfaceStatus(key)
    v = v and v['ipv4-address']
    v = v and v[1]
    return (v and v['address']) or ""
  end,
  SubnetMask = function(mapping, param, key)
    local v = mapping._conn:getInterfaceStatus(key)
    v = v and v['ipv4-address']
    v = v and v[1]
    return common.netmask2mask(v and v['mask']) or ""
  end,
  DNSOverrideAllowed = "0",
  Uptime = function(mapping, param, key)
    local status = mapping._conn:getInterfaceStatus(key)
    if status and status.uptime then
      return tostring(status.uptime)
    end
    return "0"
  end,
  DNSServers = function(mapping, param, key)
    local v = mapping._conn:getInterfaceStatus(key)
    v = v and v['dns-server']
    if v then
      return concat(v, ",")
    end
    return ""
  end,
  DefaultGateway = function(mapping, param, key)
    local v = mapping._conn:getInterfaceStatus(key)
    v = v and v['route']
    if v then
      for _, route in pairs(v) do
        if (route['target'] == '0.0.0.0' and route['mask'] == 0) then
          return route['nexthop']
        end
      end
    end
    return ""
  end,
  DNSEnabled = "1",
  RouteProtocolRx = "Off",
  NATEnabled = function(mapping, param, key)
    local zoneinfo = interface2zone((split_key(key)))
    if (zoneinfo and zoneinfo.masq) == "1" then
      return "1"
    end
    return "0"
  end,
  AutoDisconnectTime = "0",
  IdleDisconnectTime = "0",
  WarnDisconnectDelay = "0",
  ConnectionTrigger = "AlwaysOn",
  ShapingRate = "-1",
  ShapingBurstSize = "0",
  X_000E50_IPv6_Enable = function(mapping, param, key)
    local conn = mapping._conn
    if conn:getInterfaceDhcp6(key) then
      return conn:getInterfaceOption(key, "ipv6", "1")
    end
    return "0"
  end,
  X_000E50_VLANID = function(mapping, param, key)
    local d = mapping._conn.entries[key]
    if d and d.vlanid then
      return d.vlanid
    end
    return '-1'
  end,
  X_000E50_ExternalIPv6Address = function(mapping, param, key)
    local v = mapping._conn:getInterfaceStatus(key)
    v = v and v['ipv6-address']
    v = v and v[1]
    return (v and v['address']) or ""
  end,
}

-- TODO: add getall() implementation

local function isValidIPAddress(value)
  local v = {match(value or "", "^(%d+)%.(%d+)%.(%d+)%.(%d+)$")}
  if #v == 4 then
    for _, val in ipairs(v) do
      if tonumber(val)>255 then
        return
      end
    end
    return true
  end
end

local function interface2section(interfacename, section)
  local firewall_section_binding = {config="firewall", sectionname = section}
  local result
  uci_helper.foreach_on_uci(firewall_section_binding, function(s)
    if (s.network == nil and s.name == interfacename) then
      result = s
      return false
    end
    if (type(s.network) == "table") then
      for _, section_interfacename in pairs(s.network) do
        if (section_interfacename == interfacename) then
          result = s
          return false
        end
      end
    end
  end)
  return result
end

local function setFwConfigInternal(value,enabled)

  -- set all cone enteries and enabled
  firewall_binding.sectionname = "cone"
  uci_helper.foreach_on_uci(firewall_binding,function(s)
      firewall_binding.sectionname = s[".name"]
      firewall_binding.option = "src_dip"
      set_on_uci(firewall_binding,value)
      firewall_binding.option = "enabled"
      set_on_uci(firewall_binding,enabled)
  end)

  -- set redirect src_dip and enabled
  local info = interface2section("SNAT_wan_zone","redirect")
  firewall_binding.sectionname = info[".name"]
  firewall_binding.option = "src_dip"
  set_on_uci(firewall_binding, value)
  firewall_binding.option = "enabled"
  set_on_uci(firewall_binding, enabled)

  --set rule dest_ip and enabled
  local info = interface2section("MARK_WAN_TO_LAN","rule")
  firewall_binding.sectionname = info[".name"]
  firewall_binding.option = "dest_ip"
  set_on_uci(firewall_binding, value)
  firewall_binding.option = "enabled"
  set_on_uci(firewall_binding, enabled, commitapply)
end


local function removeFwConfig(value,key,enabled)

  setFwConfigInternal(value,enabled)
  local info = interface2zone(split_key(key))
  firewall_binding.sectionname = info[".name"]
  firewall_binding.option = "output"
  set_on_uci(firewall_binding,"DROP",commitapply)
  firewall_binding.sectionname = "forwarding"
  firewall_binding.option = nil
  uci_helper.foreach_on_uci(firewall_binding,function(s)
      if 'lan' == s.src and 'wan'== s.dest then
        firewall_binding.sectionname = s[".name"]
        delete_on_uci(firewall_binding, commitapply)
        return false
      end
  end)
end

local function setFwConfig(value,key,enabled)

  setFwConfigInternal(value,enabled)
  local info = interface2zone(split_key(key))
  firewall_binding.sectionname = info[".name"]
  firewall_binding.option = "output"
  set_on_uci(firewall_binding,"ACCEPT",commitapply)
  local found = 0
  firewall_binding.sectionname = "forwarding"
  firewall_binding.option = nil
  uci_helper.foreach_on_uci(firewall_binding,function(s)
      if 'lan' == s.src and 'wan'== s.dest then
      found = 1
      return false
      end
  end)

  if found == 0 then
      local name = add_on_uci(firewall_binding,commitapply)
      if name then
          local src = "lan"
          local dest = "wan"
          firewall_binding.sectionname = name
          firewall_binding.option = "src"
          set_on_uci(firewall_binding,src,commitapply)
          firewall_binding.option = "dest"
          set_on_uci(firewall_binding,dest,commitapply)
      end
  end
end

WANIPConnection.set = {
  Enable = function(mapping, param, value, key)
    local conn = mapping._conn
    local entry = conn.entries[key]
    if not entry.wanconfig then
      local config = conn:setInterfaceOption(key, "auto", value)
    else
      if value ~= mapping.get.Enable(mapping, param, key) then
        return nil, "Device under wansensing control"
      end
    end
  end,

  Name = function(mapping, param, value, key)
    local config = mapping._conn:setName(key, value)
  end,

  NATEnabled  = function(mapping, param, value, key)
    local zoneinfo = interface2zone(split_key(key))
    local section = "@zone[" .. zoneinfo[".index"] .. "]"
    local binding = {config = "firewall", sectionname = section, option = "masq", extended = true}
    set_on_uci(binding, value, commitapply)
    mapping._conn.transactions[binding.config] = true
  end,

  SubnetMask = function(mapping, param, value, key)
    local conn = mapping._conn
    local v = conn:getInterfaceOption(key, 'proto')
    if v == "static" then
      if  isValidIPAddress(value) then
        local config = conn:setInterfaceOption(key, "netmask", value)
      else
        return nil, format("%s is not a valid subnet mask", value or "nil")
      end
    else
      return nil, format("the interface proto is %s instead of static", v)
    end
  end,

  ExternalIPAddress = function(mapping, param, value, key)
    local conn = mapping._conn
    local v = conn:getInterfaceOption(key, 'proto')
    if  v == "static" then
      if  isValidIPAddress(value) then
        conn:setInterfaceOption(key, 'ipaddr', value)
        conn:setInterfaceOption(key, 'netmask', netmask_value_for_static_ip)
        local enabled = "1"
        conn:setInterfaceOption(key, 'auto', enabled)

        setFwConfig(value, key, enabled)
        mapping._conn.transactions[firewall_binding.config] = true
      elseif value == "" then
        local enabled = "0"
        conn:setInterfaceOption(key, 'ipaddr', init_value_for_static_ip)
        conn:setInterfaceOption(key, 'netmask', init_value_for_static_ip)
        conn:setInterfaceOption(key, 'auto', enabled)

        removeFwConfig(init_value_for_static_ip, key, enabled)
        mapping._conn.transactions[firewall_binding.config] = true
      else
        return nil, format("%s is not a valid IP address", value or "nil")
      end
    else
      return nil, format("the interface proto is %s instead of static", v)
    end
  end,

  X_000E50_IPv6_Enable = function(mapping, param, value, key)
    local conn = mapping._conn
    if conn:getInterfaceDhcp6(key) then
      local config = conn:setInterfaceOption(key, 'ipv6', value)
      if not config then
        return nil, "device not active and no sensing device specified"
      end
      return true
    end
    return nil, "IPv6 is not supported on this WANIPConnection"
  end,

  X_000E50_VLANID = function(mapping, param, value, key, parentkey)
    local config, error = mapping._conn:setVlan(key, value)
    if not config and error then
      return nil, error
    end
  end,
}

WANIPConnection.commit = connection.commit
WANIPConnection.revert = connection.revert

register(WANIPConnection)


-- Automatically generated from InternetGatewayDevice:1.3
-- using generator version 2.1
local WANIPConnection_Stats = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      EthernetBytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetBytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  },
  parent = WANIPConnection
}

local stats_map = {
  EthernetBytesSent = "tx_bytes",
  EthernetBytesReceived = "rx_bytes",
  EthernetPacketsSent = "tx_packets",
  EthernetPacketsReceived = "rx_packets"
}

WANIPConnection_Stats.get = function(mapping, param, key)
  local conn = mapping.parent._conn
  local option = stats_map[param]
  if option then
    return conn:getPhysicalInfo(key, option, "L3") or ""
  end
  return ""
end

register(WANIPConnection_Stats)
