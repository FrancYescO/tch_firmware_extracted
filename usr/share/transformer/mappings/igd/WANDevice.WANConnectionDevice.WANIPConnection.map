-- Automatically generated from InternetGatewayDevice:1.4
-- using generator version 2.1
local WANIPConnection = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.",
    access = "readOnly",  -- readWrite currently not supported
    numEntriesParameter = "WANIPConnectionNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      Reset = {
        access = "readOnly",  -- readWrite currently not supported
        type = "boolean",
        default = "false",
      },
      ConnectionStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Unconfigured",
          "Connecting",
          "Connected",
          "PendingDisconnect",
          "Disconnecting",
          "Disconnected",
        },
      },
      PossibleConnectionTypes = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "Unconfigured",
          "IP_Routed",
          "IP_Bridged",
        },
      },
      ConnectionType = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
        enumeration = {
          "Unconfigured",
          "IP_Routed",
          "IP_Bridged",
        },
      },
      Name = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      Uptime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LastConnectionError = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "ERROR_NONE",
          "ERROR_COMMAND_ABORTED",
          "ERROR_NOT_ENABLED_FOR_INTERNET",
          "ERROR_USER_DISCONNECT",
          "ERROR_ISP_DISCONNECT",
          "ERROR_IDLE_DISCONNECT",
          "ERROR_FORCED_DISCONNECT",
          "ERROR_NO_CARRIER",
          "ERROR_IP_CONFIGURATION",
          "ERROR_UNKNOWN",
        },
        default = "ERROR_NONE",
      },
      AutoDisconnectTime = {
        access = "readOnly",  -- readWrite currently not supported
        type = "unsignedInt",
      },
      IdleDisconnectTime = {
        access = "readOnly",  -- readWrite currently not supported
        type = "unsignedInt",
      },
      WarnDisconnectDelay = {
        access = "readOnly",  -- readWrite currently not supported
        type = "unsignedInt",
      },
      RSIPAvailable = {
        access = "readOnly",
        type = "boolean",
      },
      NATEnabled = {
        access = "readWrite",
        type = "boolean",
      },
      AddressingType = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "DHCP",
          "Static",
        },
      },
      ExternalIPAddress = {
        access = "readWrite",
        type = "string",
      },
      SubnetMask = {
        access = "readWrite",
        type = "string",
      },
      DefaultGateway = {
        access = "readWrite",
        type = "string",
      },
      DNSEnabled = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      DNSOverrideAllowed = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      DNSServers = {
        access = "readWrite",
        list = true,
        max = "64",
        type = "string",
      },
      MaxMTUSize = {
        access = "readOnly",  -- readWrite currently not supported
        type = "unsignedInt",
        range = {
          {
            min = "1",
            max = "1540",
          },
        },
      },
      MACAddress = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
      },
      MACAddressOverride = {
        access = "readOnly",  -- readWrite currently not supported
        type = "boolean",
      },
      ConnectionTrigger = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
        enumeration = {
          "OnDemand",
          "AlwaysOn",
          "Manual",
        },
        default = "OnDemand",
      },
      RouteProtocolRx = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
        enumeration = {
          "Off",
          "RIPv1",
          "RIPv2",
          "OSPF",
        },
        default = "Off",
      },
      ShapingRate = {
        access = "readOnly",  -- readWrite currently not supported
        type = "int",
        range = {
          {
            min = "-1",
          },
        },
        default = "-1",
      },
      ShapingBurstSize = {
        access = "readOnly",  -- readWrite currently not supported
        type = "unsignedInt",
        default = "0",
      },
      X_000E50_IPv6_Enable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      X_000E50_VLANID = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
            max = "4095",
          },
        },
      },
      X_0876FF_IGMPProxy = {
        access = "readWrite",
        type = "boolean",
        description = "Enables/Disables IGMP Proxy",
        default = "1",
      },
      X_000E50_ExternalIPv6Address = {
        access = "readOnly",
        type = "string",
      },
      X_HostName = {
        access = "readWrite",
        type = "string",
      },
      X_QoSEnable = {
        access = "readWrite",
        type = "boolean",
        default = "true",
        description = "To enable or disable the QoS for the interface"
      },
      X_WANDHCPOption12 = {
        access = "readWrite",
        type = "string",
        description = "Vodafone specific parameter which describes the hostname of the DHCP client"
      },
      X_000E50_QoSEnable = {
        access = "readWrite",
        type = "boolean",
        default = "true",
        description = "To enable or disable the QoS for the interface",
      },
      -- PortMappingNumberOfEntries
      -- automatically created when InternetGatewayDevice.WANDevice.{i}.
      -- WANConnectionDevice.{i}.WANIPConnection.{i}.PortMapping.{i}. is loaded
    }
  }
}


----------------------------------------------------------
-- Local definitions
-- -------------------------------------------------------
--
local inet = require "tch.inet"
local isValidIP = inet.isValidIPv4
local pairs, ipairs, tostring, type = pairs, ipairs, tostring, type
local mapper, register, table, string = mapper, register, table, string
local open, format, match, commitapply, lower = io.open, string.format, string.match, commitapply, string.lower
local uci_helper = mapper("ucihelper")
local set_on_uci = uci_helper.set_on_uci
local get_from_uci = uci_helper.get_from_uci
local delete_on_uci = uci_helper.delete_on_uci
local add_on_uci = uci_helper.add_on_uci
local common = mapper("nwcommon")
local interface2zone = common.interface2zone
local intfDiagHelper = require("transformer.shared.intfdiaghelper")
local intfDiagBinding = { config = "intfdiag" }
local getIntfStats = common.getIntfStats
local wanconnection = require 'transformer.shared.wanconnection'
local igmpBinding = { config = "igmpproxy", sectionname = "globals", option = "state" }
local networkBinding = { config = "network" }
local xtmconnection = require 'transformer.shared.models.igd.xtmconnection'
local device_key = xtmconnection.resolve_key
local bit = require("bit")

local proto2addrtype = {static = "Static", dhcp = "DHCP", dhcpv6 = "DHCPv6", mobiled = "Static"}
local qosBinding = { config = "qos" }

----------------------------------------------------------
-- Mapper implementation
----------------------------------------------------------

local connection = wanconnection.Connection('ip', commitapply)

local intf_info = {}
local function get_intf_info(intf)
  local info = intf_info[intf]
  if not info then
    info = {}
    intf_info[intf] = info
  end
  return info
end

local function getQoSEnable(mapping, param, key)
  qosBinding.sectionname = mapping._conn:getName(key)
  qosBinding.option = "enable"
  qosBinding.default = "1"
  return get_from_uci(qosBinding)
end

local function getDNSOverrideAllowed(mapping, param, key)
  networkBinding.sectionname = mapping._conn:getName(key)
  networkBinding.option = "peerdns"
  networkBinding.default = "1"
  return get_from_uci(networkBinding)
end

local function getDNSEnabled(mapping, param, key)
  networkBinding.sectionname = mapping._conn:getName(key)
  networkBinding.option = "reqopts"
  local reqOptions = get_from_uci(networkBinding)
  if reqOptions then
    for opt in reqOptions:gmatch("%d+") do
      if opt == "6" then
        return "1", reqOptions
      end
    end
    return "0", reqOptions
  end
end

local function ip_intf_event(mapping, intf, msg)
  local trigger
  local addresses = msg["ipv4-address"]
  local old_ip = intf.ipv4
  local old_mask = intf.ipv4mask
  if addresses and #addresses <= 1 then
    local addr = addresses[1] or {}
    trigger = (old_ip ~= addr.address) or (old_mask ~= addr.mask)
    intf.ipv4 = addr.address
    intf.ipv4mask = addr.mask
  else
    -- no or multiple addresses
    trigger = true
    intf.ipv4 = nil
    intf.ipv4mask = nil
  end

  local events = {}

  if trigger then
    if msg.interface and type(msg.interface) == "string" then
      local keys = query_keys(mapping)
      local pattern = "^" .. msg["interface"]
      for _, keyset in ipairs(keys) do
        local key = keyset[1]
        if match(key, pattern) then
          events[#events + 1] = { key = key, paramname = "ExternalIPAddress" }
        end
      end
    end
  end

  return events
end

local function get_ipv6_intf(msg)
  local ipv6_intf
  if msg.interface then
    local binding = {config="network", sectionname=msg.interface, option="ifname"}
    local ifname = get_from_uci(binding)
    binding.option = "device"
    local device = get_from_uci(binding)
    ipv6_intf = ifname and ifname:match("^@(.*)") or device and device:match("^@(.*)") or msg.interface
  end
  return ipv6_intf
end

local function ipv6_event(mapping, intf, msg)
  local events = {}
  local ipv6_intf = get_ipv6_intf(msg)
  if ipv6_intf and msg.interface then
    local keys = query_keys(mapping)
    local pattern = "^" .. ipv6_intf .. "|"
    for _, keyset in ipairs(keys) do
      local key = keyset[1]
      if match(key, pattern) then
        if ipv6_intf ~= msg.interface then
          events[#events + 1] = { key = key, paramname = "X_000E50_ExternalIPv6Address" }
        else
          events[#events + 1] = { key = key, paramname = "ExternalIPAddress" }
        end
      end
    end
  end
  return events
end

local function intf_action(mapping, intf, msg)
  local action = msg.action
  local events = {}

  if intf.action ~= action then
    intf.action = action
    if msg.interface and type(msg.interface) == "string" then
      local ipv6_intf = get_ipv6_intf(msg)
      if ipv6_intf and ipv6_intf ~= msg.interface then
        events = ipv6_event(mapping, intf, msg)
        if #events > 0 then
          return events
        end
      end
      local keys = query_keys(mapping)
      local pattern = "^" .. msg["interface"]
      for _, keyset in ipairs(keys) do
        local key = keyset[1]
        if match(key, pattern) then
          events[#events + 1] = { key = key, paramname = "DNSServers" }
          events[#events + 1] = { key = key, paramname = "ConnectionStatus" }
        end
      end
    end
  end
  return events
end

local function network_interface_event(mapping, event, msg)
  local intf = get_intf_info(msg.interface)
  if msg["ipv4-address"] then
    return ip_intf_event(mapping, intf, msg)
  end
  if msg["ipv6-address"] then
    return ipv6_event(mapping, intf, msg)
  end
  if msg["action"] then
    return intf_action(mapping, intf, msg)
  end
end

WANIPConnection.add_watchers = function(mapping)
  local ubus_evsrc = eventsource("ubus")
  ubus_evsrc.watch_event(mapping, network_interface_event, "network.interface")
end

WANIPConnection.entries = function(mapping, parentkey)
  local conn, keys = connection:load(parentkey)
  mapping._cache = mapping._cache or {}
  mapping._cache[parentkey] = conn
  local devices = {}
  for _, key in ipairs(keys) do
    devices[#devices + 1] = conn:getDevice(key)
  end
  intfDiagHelper.startup(devices)
  return keys
end

local getters = {
  MACAddress = function(mapping, param, key)
    return mapping._conn:getPhysicalInfo(key, "address", "L3") or ""
  end,
  MaxMTUSize = function(mapping, param, key)
    return mapping._conn:getPhysicalInfo(key, "mtu", "L3") or ""
  end,
  MACAddressOverride = "0",
  AddressingType = function(mapping, param, key)
    local v = mapping._conn:getInterfaceOption(key, 'proto')
    return proto2addrtype[v] or ""
  end,
  Enable = function(mapping, param, key, parentkey)
    return  mapping._conn:getInterfaceOption(key, 'auto', '1', '0')
  end,
  Reset = "0",
  ConnectionStatus = function(mapping, param, key)
    -- TODO: can't we get this via common.getIntfInfo() instead of
    -- having to use ubus calls (which are slower)?
    local i = mapping._conn:getInterfaceStatus(key)
    if i then
      if i.up then
        return "Connected"
      elseif i.pending then
        return "Connecting"
      end
    end
    return "Disconnected"
  end,
  PossibleConnectionTypes = "IP_Routed",
  ConnectionType = "IP_Routed",
  Name = function(mapping, param, key)
    return mapping._conn:getName(key)
  end,
  LastConnectionError = function(mapping, param, key, parentkey)
    if mapping._conn:getPhysicalInfo(key, "operstate")=="up" then
      return "ERROR_NONE"
    end
    if mapping._conn:getPhysicalInfo(key, "carrier")~="1" then
      return "ERROR_NO_CARRIER"
    end
    return "ERROR_UNKNOWN"
  end,
  RSIPAvailable = "0",
  ExternalIPAddress = function(mapping, param, key)
    local v = mapping._conn:getInterfaceStatus(key)
    local ipv4 = v and v['ipv4-address'] and v['ipv4-address'][1] and v['ipv4-address'][1]['address']
    local ipv6 = v and v['ipv6-address'] and v['ipv6-address'][1] and v['ipv6-address'][1]['address']
    return ipv4 or ipv6 or ""
  end,
  SubnetMask = function(mapping, param, key)
    local v = mapping._conn:getInterfaceStatus(key)
    local ipv4mask = v and v['ipv4-address'] and v['ipv4-address'][1] and v['ipv4-address'][1]['mask']
    local ipv6mask = v and v['ipv6-address'] and v['ipv6-address'][1] and v['ipv6-address'][1]['mask']
    return ipv4mask and common.netmask2mask(ipv4mask) or ipv6mask and tostring(ipv6mask) or ""
  end,
  DNSOverrideAllowed = getDNSOverrideAllowed,
  Uptime = function(mapping, param, key)
    local status = mapping._conn:getInterfaceStatus(key)
    if status and status.uptime then
      return tostring(status.uptime)
    end
    return "0"
  end,
  DNSServers = function(mapping, param, key)
    local v = mapping._conn:getInterfaceStatus(key)
    v = v and v['dns-server']
    if v then
      return table.concat(v, ",")
    end
    return ""
  end,
  DefaultGateway = function(mapping, param, key)
    local v = mapping._conn:getInterfaceStatus(key)
    v = v and v['route']
    if v then
      for _, route in pairs(v) do
        if ((route['target'] == '0.0.0.0' or route['target'] == '::') and route['mask'] == 0) then
          return route['nexthop']
        end
      end
    end
    return ""
  end,
  DNSEnabled = getDNSEnabled,
  RouteProtocolRx = "Off",
  NATEnabled = function(mapping, param, key)
    local interface = mapping._conn:getInterface(key)
    local zoneinfo = interface2zone(interface)
    if (zoneinfo and zoneinfo.masq) == "1" then
      return "1"
    end
    return "0"
  end,
  AutoDisconnectTime = "0",
  IdleDisconnectTime = "0",
  WarnDisconnectDelay = "0",
  ConnectionTrigger = "AlwaysOn",
  ShapingRate = "-1",
  ShapingBurstSize = "0",
  X_000E50_IPv6_Enable = function(mapping, param, key)
    local conn = mapping._conn
    return conn:getInterfaceOption(key, "ipv6", "1")
  end,
  X_000E50_VLANID = function(mapping, param, key)
    local d = mapping._conn.entries[key]
    if d and d.vlanid then
      return d.vlanid
    end
    return '-1'
  end,
  X_000E50_ExternalIPv6Address = function(mapping, param, key)
    local conn = mapping._conn
    local interface = conn:getInterfaceDhcp6(key)
    if interface then
      local v = common.get_ubus_interface_status(interface)
      v = v and v['ipv6-address']
      v = v and v[1]
      return (v and v['address']) or ""
    end
    return ""
  end,
  X_0876FF_IGMPProxy = function()
    igmpBinding.default = "1"
    return get_from_uci(igmpBinding)
  end,
  X_HostName = function(mapping, param, key)
    return mapping._conn:getInterfaceOption(key, "x_hostname")
  end,
  X_QoSEnable = getQoSEnable,
  X_000E50_QoSEnable = getQoSEnable,
  X_WANDHCPOption12 = function(mapping, param, key)
    return mapping._conn:getInterfaceOption(key, "hostname")
  end,
}

WANIPConnection.get = function(mapping, param, key, parentKey)
	-- this function is a hack to get around the lack of cache support from transformer
	-- and to avouid rewriting everything now
	local value
	local err = "no getter"
	mapping._conn = mapping._cache[parentKey]
	local f = getters[param]
	if type(f)=='string' then
		value = f
		err = nil
	elseif f then
		value, err = f(mapping, param, key, parentKey)
	end
	mapping._conn = nil
	return value, err
end

-- TODO: add getall() implementation
local function setQosEnable(mapping, param, value, key)
  local name = mapping._conn:getName(key)
    qosBinding.sectionname = name
    local qosParams = uci_helper.getall_from_uci(qosBinding)
    local sectionFound = next(qosParams)
    -- create an interface section and set the option if the section does not exist
    if not sectionFound then
      qosBinding.option = nil
      set_on_uci(qosBinding, "interface")
      mapping._conn.transactions[qosBinding.config] = true
    end
    qosBinding.option = "enable"
    set_on_uci(qosBinding, value, commitapply)
    mapping._conn.transactions[qosBinding.config] = true
end

local function setDNSOverrideAllowed(mapping, param, value, key)
    networkBinding.sectionname = mapping._conn:getName(key)
    networkBinding.option = "peerdns"
    set_on_uci(networkBinding, value, commitapply)
    mapping._conn.transactions[networkBinding.config] = true
end

local function setDNSEnabled(mapping, param, value, key)
  local isDNSEnabled, reqOptions = getDNSEnabled(mapping, param, key)
  local dnsOptions = ""
  if bit.bxor(isDNSEnabled, value) == 1 then
    if value == "0" then
      for opt in reqOptions:gmatch("%d+") do
        if opt ~= "6" then
          dnsOptions = dnsOptions and dnsOptions == "" and opt or dnsOptions .. " " .. opt
        end
      end
    else
      dnsOptions = reqOptions and reqOptions == "" and "6" or reqOptions .." 6"
    end
  else
    dnsOptions = reqOptions
  end
  networkBinding.sectionname = mapping._conn:getName(key)
  networkBinding.option = "reqopts"
  set_on_uci(networkBinding, dnsOptions, commitapply)
  mapping._conn.transactions[networkBinding.config] = true
end

local uci_route = {config="network", sectionname="route"}
local function set_route_option(routename, option, value)
  uci_route.sectionname = routename
  uci_route.option = option
  set_on_uci(uci_route, value, commitapply)
end

local function get_default_route_for_interface(interface)
  local default_route
  uci_route.sectionname = "route"
  uci_helper.foreach_on_uci(uci_route, function(route)
    if route.interface==interface then
      if (route.target=='0.0.0.0' and (route.netmask=='0.0.0.0' or route.netmask=='0')) then
        default_route = route['.name']
        return false
      end
    end
  end)
  return default_route
end

local function new_static_route_for_interface(interface, gateway)
  uci_route.sectionname = "route"
  local name = add_on_uci(uci_route, commitapply)
  if name then
    uci_route.sectionname = name
    local data = {
      _key = uci_helper.generate_key(),
      interface = interface,
      target = "0.0.0.0",
      netmask = "0.0.0.0",
      gateway = gateway,
      metric = "1",
    }
    for option, value in pairs(data) do
      set_route_option(name, option, value)
    end
  end
end

local setters = {
  Enable = function(mapping, param, value, key)
    local conn = mapping._conn
    local entry = conn.entries[key]
    if not entry.wanconfig or entry.wanconfig.acs_control == "1" then
      conn:setInterfaceOption(key, "auto", value)
    else
      if value ~= mapping.get.Enable(mapping, param, key) then
        return nil, "Device under wansensing control"
      end
    end
  end,

  Name = function(mapping, param, value, key)
    mapping._conn:setName(key, value)
  end,

  NATEnabled  = function(mapping, param, value, key)
    local interface = mapping._conn:getInterface(key)
    local zoneinfo = interface2zone(interface)
    local section = "@zone[" .. zoneinfo[".index"] .. "]"
    local binding = {config = "firewall", sectionname = section, option = "masq", extended = true}
    set_on_uci(binding, value, commitapply)
    mapping._conn.transactions[binding.config] = true
  end,

  SubnetMask = function(mapping, param, value, key)
    local conn = mapping._conn
    local v = conn:getInterfaceOption(key, 'proto')
    if v == "static" then
      if isValidIP(value) then
        conn:setInterfaceOption(key, "netmask", value)
      else
        return nil, format("%s is not a valid subnet mask", value or "nil")
      end
    else
      return nil, format("the interface proto is %s instead of static", v)
    end
  end,

  AddressingType = function(mapping, param, value, key)
    local conn = mapping._conn
    local proto = conn:getInterfaceOption(key, 'proto')
    local newproto = lower(value)
    if proto == "static" and newproto == "dhcp" then
       conn:setInterfaceOption(key, 'ipaddr', "")
       conn:setInterfaceOption(key, 'netmask', "")
    end
    conn:setInterfaceOption(key, "proto", newproto)
  end,

  ExternalIPAddress = function(mapping, param, value, key)
    local conn = mapping._conn
    local v = conn:getInterfaceOption(key, 'proto')
    if  v == "static" then
      if value == "" or isValidIP(value) then
        conn:setInterfaceOption(key, 'ipaddr', value)
        local enable = (value == "") and 0 or 1
        conn:setInterfaceOption(key, 'auto', enable)
      else
        return nil, format("%s is not a valid IP address", value or "nil")
      end
    else
      return nil, format("the interface proto is %s instead of static", v)
    end
  end,

  DefaultGateway = function(mapping, param, value, key)
    local conn = mapping._conn
    local v = conn:getInterfaceOption(key, 'proto')
    if v=="static" then
      if value == '' or isValidIP(value) then
        local interface = mapping._conn:getInterface(key)
        local current_route = get_default_route_for_interface(interface)
        if current_route then
          -- existing default route found for interface, update it
          set_route_option(current_route, "gateway", value)
        else
          -- no default route section found for interface, create one
          new_static_route_for_interface(interface, value)
        end
        mapping._conn.transactions["network"] = true

        -- wan interface has to be brought up again explicitly for 6rd interface to use the new default route
        local file_handler = open("/tmp/.wan_intf","w")
        if file_handler then
          file_handler:write(interface)
          file_handler:close()
          commitapply:newset("InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.DefaultGateway")
        else
          return nil, "unexpected write error"
        end
      else
        return nil, format("%s is not a valid IP address", value or "nil")
      end
    else
      return nil, format("the interface proto is %s instead of static", v)
    end
  end,

  X_000E50_IPv6_Enable = function(mapping, param, value, key)
    local conn = mapping._conn
    local config = conn:setInterfaceOption(key, 'ipv6', value)
    if not config then
      return nil, "device not active and no sensing device specified"
    end
    return true
  end,
  DNSServers  = function(mapping, param, value, key)
    local interface = mapping._conn:getInterface(key)
    local binding = {config = "network", sectionname = interface, option = "dns"}
    --if value is null, delete the dns settings on uci
    if value == ""  then
        delete_on_uci(binding, commitapply)
    end
    --set dnsserver list on uci
    local dns_tb = {}
    for dns in value:gmatch("[^,]+") do
        table.insert(dns_tb, dns)
    end
    set_on_uci(binding, dns_tb, commitapply)
    mapping._conn.transactions[binding.config] = true
  end,
  X_000E50_VLANID = function(mapping, param, value, key, parentkey)
    local config, error = mapping._conn:setVlan(key, value)
    if not config and error then
      return nil, error
    end
  end,
  X_0876FF_IGMPProxy = function(_, _, value)
    set_on_uci(igmpBinding, value, commitapply)
    uci_helper.commit(igmpBinding)
  end,
  X_HostName = function(mapping, param, value, key)
    mapping._conn:setInterfaceOption(key, "x_hostname", value)
  end,
  X_QoSEnable = setQosEnable,
  X_000E50_QoSEnable = setQosEnable,
  X_WANDHCPOption12 = function(mapping, param, value, key)
    mapping._conn:setInterfaceOption(key, "hostname", value)
  end,
  DNSOverrideAllowed = setDNSOverrideAllowed,
  DNSEnabled = setDNSEnabled,
}

WANIPConnection.set = function(mapping, param, value, key, parentKey)
	-- this function is a hack to get around the lack of cache support from transformer
	-- and to avouid rewriting everything now
	mapping._conn = mapping._cache[parentKey]
	local result
	local err = "no setter"
	local f = setters[param]
	if f then
		result, err = f(mapping, param, value, key, parentKey)
	end
	mapping._conn = nil
	return result, err
end


WANIPConnection.commit = function(mapping)
	connection:commit()
	mapping._cache = nil
end

WANIPConnection.revert = function(mapping)
	connection:revert()
	mapping._cache = nil
end

register(WANIPConnection)


-- Automatically generated from InternetGatewayDevice:1.3
-- using generator version 2.1
local WANIPConnection_Stats = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      EthernetBytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetBytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetErrorsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetErrorsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetDiscardPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetDiscardPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetMulticastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetBroadcastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetBroadcastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetUnicastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetUnicastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetMulticastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EthernetUnknownProtoPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      X_0876FF_DiagnosticsState = {
        access = "readWrite",
        type = "string",
        description = "Indicates availability of diagnostic data",
        enumeration = {
          "None",
          "Canceled",
          "Requested",
          "Complete",
          "Error_Internal",
        },
      },
      X_0876FF_DiagnosticsInterval = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Diagnostic Operation Interval time",
      },
      X_0876FF_UnicastReceivedDataRate = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Unicast Received Data Rate in kbps",
      },
      X_0876FF_UnicastSentDataRate = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Unicast Sent Data Rate in kbps",
      },
      X_0876FF_MulticastSentDataRate = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Multicast Sent Data Rate in kbps",
      },
      X_0876FF_MulticastReceivedDataRate = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Multicast Received Data Rate in kbps",
      },
    }
  },
  parent = WANIPConnection
}

local stats_map = {
  EthernetBytesSent = "tx_bytes",
  EthernetBytesReceived = "rx_bytes",
  EthernetPacketsSent = "tx_packets",
  EthernetPacketsReceived = "rx_packets",
  EthernetErrorsSent = "tx_errors",
  EthernetErrorsReceived = "rx_errors",
  EthernetDiscardPacketsSent = "tx_dropped",
  EthernetDiscardPacketsReceived = "rx_dropped"
}

local stats_map_ext = {
  EthernetUnicastPacketsSent = "tx_unicast",
  EthernetUnicastPacketsReceived = "rx_unicast",
  EthernetMulticastPacketsSent = "txpckt",
  EthernetMulticastPacketsReceived = "multicast",
  EthernetBroadcastPacketsSent = "tx_broadcast",
  EthernetBroadcastPacketsReceived = "rx_broadcast",
  EthernetUnknownProtoPacketsReceived = "rxerr",
}

local paramNameToOption = {
  X_0876FF_DiagnosticsState = "state",
  X_0876FF_DiagnosticsInterval = "interval",
  X_0876FF_UnicastReceivedDataRate = "unicastReceivedDataRate",
  X_0876FF_UnicastSentDataRate = "unicastSentDataRate",
  X_0876FF_MulticastSentDataRate = "multicastSentDataRate",
  X_0876FF_MulticastReceivedDataRate = "multicastReceivedDataRate",
}

WANIPConnection_Stats.get = function(mapping, param, key, parentKey)
  local conn = mapping.parent._cache[parentKey]
  if stats_map[param] then
    return conn:getPhysicalInfo(key, stats_map[param], "L3", "0")
  elseif stats_map_ext[param] then
    local devname = conn:getDevice(key)
    if devname then
      return getIntfStats(device_key(devname), stats_map_ext[param], "0")
    end
  elseif paramNameToOption[param] then
    local devName = conn:getDevice(key)
    if devName then
      intfDiagBinding.sectionname = devName
      intfDiagBinding.option = paramNameToOption[param]
      intfDiagBinding.default = "0"
      return get_from_uci(intfDiagBinding)
    end
  end
  return "0"
end

WANIPConnection_Stats.set = function(mapping, param, value, key, parentKey)
  if paramNameToOption[param] then
    local devName = mapping.parent._cache[parentKey]:getDevice(key)
    intfDiagBinding.sectionname = devName
    intfDiagBinding.option = paramNameToOption[param]
    return intfDiagHelper.intfDiagSet(intfDiagBinding, value, commitapply)
  end
end

WANIPConnection_Stats.commit = intfDiagHelper.intfDiagCommit
WANIPConnection_Stats.revert = intfDiagHelper.intfDiagRevert

register(WANIPConnection_Stats)
