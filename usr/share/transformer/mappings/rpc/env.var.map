local env_var_ = {
  objectType = {
    name = "rpc.env.var.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
        unlockedstatus = {
            access = "readWrite",
            type = "boolean",
        },
        unlockGUIbutton = {
            access = "readWrite",
            type = "boolean",
        },
    },
  }
}

local envBinding = { config = "env", sectionname = "var" }
local uciHelper = mapper("ucihelper")
local configChanged

env_var_.get = {
	unlockedstatus = function(mapping, param, key)
			return uciHelper.get_from_uci({ config = "env", sectionname = "var", option = "unlockedstatus" }) or ""
		end,
	unlockGUIbutton = function(mapping, param, key)
			return uciHelper.get_from_uci({ config = "env", sectionname = "var", option = "unlockGUIbutton" }) or ""
		end
}

env_var_.set = {
	unlockedstatus = function(mapping, param, value, key)
		if tostring(value) == "1" then
		----create new password for admin user with get_access_key 1
			local check = string.format("name=$(uci get web.%s.name); ackey=$(/usr/bin/get_access_key 2>&1); SRP=$(newsrpuser -f -u $name -p $ackey); echo $SRP","usr_admin")
			local handle = io.popen(check)
			local srp = handle:read("*a")
			handle:close()
			local srp2 = string.gsub(srp, "%s", "_")
			local handle = io.popen("SRP="..srp2.."; SALT=$(echo $SRP | cut -d_ -f1); echo $SALT")
			local salt = handle:read("*a")
			handle:close()
			local handle = io.popen("SRP="..srp2.."; VERIFIER=$(echo $SRP | cut -d_ -f2); echo $VERIFIER")
			local verifier = handle:read("*a")
			handle:close()	
			uciHelper.set_on_uci({ config = "web", sectionname = "usr_admin" , option = "srp_salt"}, string.gsub(salt, "%s", ""), commitapply)
			uciHelper.set_on_uci({ config = "web", sectionname = "usr_admin" , option = "srp_verifier"}, string.gsub(verifier, "%s", ""), commitapply)
			uciHelper.set_on_uci({ config = "web", sectionname = "usr_admin" , option = "password_reminder"}, "1", commitapply)
			uciHelper.set_on_uci({ config = "web", sectionname = "usr_admin" , option = "role"}, "unlocked", commitapply)
			
			uciHelper.set_on_uci({ config = "wansensing", sectionname = "global" , option = "enable"}, "0", commitapply)
			local wanIfname = uciHelper.get_from_uci({config = "network", sectionname = "wan", option = "ifname"})
			local sfpState = uciHelper.get_from_uci({config = "env", sectionname = "rip", option = "sfp"}) or ""
			
			if wanIfname ~= "eth4" and wanIfname ~= "waneth4" and wanIfname ~= "ptm0" and wanIfname ~= "wanptm0" and wanIfname ~= "atmwan" and wanIfname ~= 'pppoe-wan' then
				uciHelper.set_on_uci({ config = "network", sectionname = "wan" , option = "ifname"}, "wanptm0", commitapply)
				uciHelper.set_on_uci({ config = "network", sectionname = "lan" , option = "pppoerelay"}, "wanptm0", commitapply)
				if sfpState == "1" then
					uciHelper.set_on_uci({ config = "ethernet", sectionname = "globals" , option = "eth4lanwanmode"}, "1", commitapply)
				end
			end
---TCOMITAGW-2226 start
			local wwanIfState = uciHelper.get_from_uci({config = "network", sectionname = "wwan", option = "auto"})
			local cwmpdIface = uciHelper.get_from_uci({config = "cwmpd", sectionname = "cwmpd_config", option = "interface"})
			if wwanIfState == "1" then
				uciHelper.set_on_uci({ config = "network", sectionname = "wwan" , option = "auto"}, "0", commitapply)
			end
			if cwmpdIface ~= "wan" then
				uciHelper.set_on_uci({ config = "cwmpd", sectionname = "cwmpd_config" , option = "interface"}, "wan", commitapply)
			end
---TCOMITAGW-2226 end
 						
			os.execute("/etc/init.d/nginx restart")
		--------	
		end
		uciHelper.set_on_uci({ config = "env", sectionname = "var", option = "unlockedstatus" }, value, commitapply)
		return true
	end,
	unlockGUIbutton = function(mapping, param, value, key)
		uciHelper.set_on_uci({ config = "env", sectionname = "var", option = "unlockGUIbutton" }, value, commitapply)
		return true
	end
}
--env_.get = get

env_var_.commit = function()
    uciHelper.commit({ config = "env", sectionname = "var"})
	uciHelper.commit({ config = "web"})
	uciHelper.commit({ config = "network"})
	uciHelper.commit({ config = "ethernet"})
	uciHelper.commit({ config = "wansensing"})
	uciHelper.commit({ config = "cwmpd"})		
end

env_var_.revert = function()
    uciHelper.revert({ config = "env", sectionname = "var"})
	uciHelper.revert({ config = "web"})
	uciHelper.revert({ config = "network"})
	uciHelper.revert({ config = "ethernet"})	
	uciHelper.revert({ config = "wansensing"})
	uciHelper.revert({ config = "cwmpd"})	
end

register(env_var_)