local env_var_ = {
  objectType = {
    name = "rpc.env.var.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
        unlockedstatus = {
            access = "readWrite",
            type = "boolean",
            description = "Unlock gateway to configure other ISP"
        },
        unlockGUIbutton = {
            access = "readWrite",
            type = "boolean",
            description = "Show GUI button to unlock"
        },
    },
  }
}

local networkBinding = { config = "network" }
local envBinding = { config = "env" }
local systemBinding = { config = "system" }
local wansensingBinding = { config = "wansensing" }
local webBinding = { config = "web" }
local ethernetBinding = { config = "ethernet" }
local cwmpBinding = { config = "cwmpd" }
local dhcpBinding = { config = "dhcp" }
local systemBinding = { config = "system" }
local webserviceBinding = { config = "webservice" }
local uciHelper = mapper("ucihelper")
local transactions = {}

local function getFromUci(binding, sectionname, option)
  binding.sectionname = sectionname
  binding.option = option
  return uciHelper.get_from_uci(binding) or ""
end

local function setUciValue(binding, sectionname, option, value)
  binding.sectionname = sectionname
  binding.option = option
  uciHelper.set_on_uci(binding, value, commitapply)
  transactions[binding.config] = true
end

env_var_.get = {
  unlockedstatus = function(mapping, param, key)
    return getFromUci(envBinding, "var", "unlockedstatus")
  end,
  unlockGUIbutton = function(mapping, param, key)
    return getFromUci(envBinding, "var", "unlockGUIbutton")
  end
}

local function setUnlockStatus(value)
  local unlockGUIbutton = getFromUci(envBinding, "var", "unlockGUIbutton")
  if value == "1" and unlockGUIbutton == "1" then
    ----create new password for admin user with get_access_key 1
    local check = string.format("name=$(uci get web.%s.name); ackey=$(/usr/bin/get_access_key 2>&1); SRP=$(newsrpuser -f -u $name -p $ackey); echo $SRP","usr_admin")
    local handle = io.popen(check)
    local srp = handle:read("*a")
    handle:close()
    local srp2 = string.gsub(srp, "%s", "_")
    local handle = io.popen("SRP="..srp2.."; SALT=$(echo $SRP | cut -d_ -f1); echo $SALT")
    local salt = handle:read("*a")
    handle:close()
    local handle = io.popen("SRP="..srp2.."; VERIFIER=$(echo $SRP | cut -d_ -f2); echo $VERIFIER")
    local verifier = handle:read("*a")
    handle:close()
    setUciValue(webBinding, "usr_admin", "srp_salt", string.gsub(salt, "%s", ""))
    setUciValue(webBinding, "usr_admin", "srp_verifier", string.gsub(verifier, "%s", ""))
    setUciValue(webBinding, "usr_admin", "password_reminder", "1")
    setUciValue(webBinding, "usr_admin", "role", "ispuser")
    setUciValue(wansensingBinding, "global", "enable", "0")
    setUciValue(networkBinding, "public_lan", "auto", "0")
    setUciValue(webserviceBinding, "admin", "role", "disabled")
    setUciValue(dhcpBinding, "dnsmasq", "addmac", "0")
    setUciValue(dhcpBinding, "dnsmasq", "cachesize", "")
    local currentl2 = getFromUci(wansensingBinding, "global", "l2type")
    if currentl2 == "" then
      setUciValue(networkBinding, "wan", "ifname", "wanptm0")
      setUciValue(networkBinding, "lan", "pppoerelay", {"wanptm0"})
    end
    local wwanIfState = getFromUci(networkBinding, "wwan", "auto")
    if wwanIfState == "1" then
      setUciValue(networkBinding, "wwan", "auto", "0")
    end
    local sfpState = getFromUci(envBinding, "rip", "sfp") or ""
    if sfpState == "1" and currentl2 ~= "ETH" then
      setUciValue(ethernetBinding,"globals","eth4lanwanmode","1")
    end
    setUciValue(cwmpBinding, "cwmpd_config", "state", "0")
    setUciValue(systemBinding, "acotel", "enabled", "0")
    os.execute("sleep 2")
    os.execute(". /lib/functions/TIM_lib.sh; TIM_unmount")
    setUciValue(systemBinding, "mabr", "enabled", "0")
    setUciValue(envBinding, "var", "unlockedstatus", value)
  end
end

env_var_.set = {
  unlockedstatus = function(mapping, param, value, key)
    setUnlockStatus(value)
  end,
  unlockGUIbutton = function(mapping, param, value, key)
    setUciValue(envBinding, "var", "unlockGUIbutton", value)
  end
}

env_var_.commit = function()
  for config in pairs(transactions) do
    uciHelper.commit({config = config})
  end
  transactions = {}
end

env_var_.revert = function()
  for config in pairs(transactions) do
    uciHelper.revert({config = config})
  end
  transactions = {}
end

register(env_var_)
