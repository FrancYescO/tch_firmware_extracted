-- Manuall generated
local multiap_eth = {
  objectType = {
    name = "rpc.multiap.eth.@.",
    numEntriesParameter = "ETHNumberOfEntries",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      MacAddress = {
        access = "readOnly",
        type = "string"
      },
    },
  }
}

local conn = mapper("ubus").connect()
local uciHelper = mapper("ucihelper")
local get_from_uci = uciHelper.get_from_uci
local multiapBinding = { config = "multiap" }
local lower = string.lower

local function getUciParam(sectionName)
  multiapBinding.sectionname = sectionName
  multiapBinding.option = "macaddress"
  return get_from_uci(multiapBinding)
end

multiap_eth.entries = function()
  local entries = {}
  local data = conn:call("multiap.controller.agent_info", "get", {}) or {}
  local agentMac = lower(getUciParam("agent"))
  if agentMac ~= "" then
    for agentMAC, agentData in pairs(data) do
      if agentMAC == agentMac then
        for clients, ethData in pairs(agentData) do
          if clients == "eth_clients" then
            for _, ethClient in pairs(ethData) do
              entries[#entries + 1] = ethClient
            end
          end
        end
      end
    end
  end
  return entries
end

multiap_eth.get = function(mapping, param, key)
  if param == "MacAddress" then
    return key
  end
end

register(multiap_eth)
