local register, tostring, table = register, tostring, table;
local open = io.open

local sys_class_net_stats_ = {
  objectType = {
    name = "sys.class.net.@.statistics.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
		collisions = {
	        access = "readOnly",
	        type = "string",
        },
		multicast = {
	        access = "readOnly",
	        type = "string",
        },
        
		rx_bytes = {
	        access = "readOnly",
	        type = "string",
        },       
		rx_compressed	 = {
	        access = "readOnly",
	        type = "string",
        },
		rx_crc_errors = {
	        access = "readOnly",
	        type = "string",
        },    
		rx_dropped = {
	        access = "readOnly",
	        type = "string",
        },            
		rx_errors = {
	        access = "readOnly",
	        type = "string",
        },        
		rx_fifo_errors = {
	        access = "readOnly",
	        type = "string",
        },
		rx_frame_errors = {
	        access = "readOnly",
	        type = "string",
        },
		rx_length_errors = {
	        access = "readOnly",
	        type = "string",
        },
		rx_missed_errors = {
	        access = "readOnly",
	        type = "string",
        },
		rx_over_errors = {
	        access = "readOnly",
	        type = "string",
        },
		rx_packets = {
	        access = "readOnly",
	        type = "string",
        },
		tx_aborted_errors = {
	        access = "readOnly",
	        type = "string",
        },
		tx_bytes = {
	        access = "readOnly",
	        type = "string",
        },
		tx_carrier_errors = {
	        access = "readOnly",
	        type = "string",
        },
		tx_compressed = {
	        access = "readOnly",
	        type = "string",
        },
		tx_dropped = {
	        access = "readOnly",
	        type = "string",
        },
		tx_errors = {
	        access = "readOnly",
	        type = "string",
        },
		tx_fifo_errors = {
	        access = "readOnly",
	        type = "string",
        },
		tx_heartbeat_errors = {
	        access = "readOnly",
	        type = "string",
        },
		tx_packets = {
	        access = "readOnly",
	        type = "string",
        },
		tx_window_errors = {
	        access = "readOnly",
	        type = "string",
        },

    },
  }
}

local function firstline(filename)
    local fd, msg = open(filename)
    if not fd then
        -- you could return nil and and error message but that will abort
        -- iterating over all parameters.
        -- so here I opt to just return an empty string.
        return ""
    end
    local result = fd:read("*l")
    if result == nil then
    	result = ""
    end
    fd:close()
    return result
end

local function get(mapping, paramName, key)
	return firstline("/sys/class/net/" .. key .. "/statistics/" .. paramName)
end


sys_class_net_stats_.get = get
register(sys_class_net_stats_)

