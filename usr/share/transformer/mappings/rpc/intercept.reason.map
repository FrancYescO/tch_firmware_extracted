local intercept_reason_ = {
	objectType = {
		name = 'rpc.intercept.reason.@.',
		access = 'readWrite',
		numEntriesParameter = "reasonNumberOfEntries",
		minEntries = 0,
		maxEntries = math.huge,
		parameters = {
			reason = {
				access = "readOnly",
				type = "string"
			},
			persist = {
				access = "readWrite",
				type = "boolean"
			},
			duration = {
				access = "readWrite",
				type = "string"
			}
		}
	}
}

local conn = mapper("ubus").connect()
if not conn then
	return nil, "Failed to connect to UBUS"
end

function intercept_reason_.getall(mapping, key)
	local ubus_data = conn:call("intercept", "status", {}) or {}
	if ubus_data.reasons then
		for reason_name, reason in pairs(ubus_data.reasons) do
			if reason_name == key then
				reason.reason = reason_name
				if reason.persist then
					reason.persist = tostring(reason.persist)
				else
					reason.persist = "0"
				end
				if reason.duration then
					reason.duration = tostring(reason.duration)
				else
					reason.duration = ""
				end
				return reason
			end
		end
	end
	return { reason = key, persist = "0", duration = "" }
end

function intercept_reason_.get(mapping, paramName, key)
	return intercept_reason_.getall(mapping, key)[paramName] or ""
end

function intercept_reason_.set(mapping, paramName, paramValue, key)
	local data = { reason = key }
	data[paramName] = paramValue
	conn:call("intercept", "add_reason", data)
	return true
end

function intercept_reason_.entries(mapping)
	local ubus_data = conn:call("intercept", "status", {}) or {}
	local reasons = {}
	if ubus_data.reasons then
		for reason_name, reason in pairs(ubus_data.reasons) do
			table.insert(reasons, reason_name)
		end
	end
	return reasons
end

function intercept_reason_.add(mapping, key)
	conn:call("intercept", "add_reason", { reason = key })
	return key
end

function intercept_reason_.delete(mapping, key)
    conn:call("intercept", "del_reason", { reason = key })
    return true
end

register(intercept_reason_)
