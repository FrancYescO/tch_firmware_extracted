-- Manuall generated
local multiap_device_i_ = {
  objectType = {
    name = "rpc.multiap.device.@.",
    numEntriesParameter = "ExtenderNumberOfEntries",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      al_mac = {
        access = "readOnly",
        type = "string"
      },
      ip_address = {
        access = "readOnly",
        type = "string"
      },
      state = {
        access = "readOnly",
        type = "unsignedInt"
      },
      status = {
        access = "readOnly",
        type = "unsignedInt"
      },
      backhaul_interface_type = {
        access = "readOnly",
        type = "string"
      },
      parent = {
        access = "readOnly",
        type = "string"
      },
      neighbors = {
        access = "readOnly",
        type = "string"
      },
      manufacturer_name = {
        access = "readOnly",
        type = "string"
      },
      serial_number = {
        access = "readOnly",
        type = "string"
      },
      rssi = {
        access = "readOnly",
        type = "unsignedInt"
      },
      phyrate = {
        access = "readOnly",
        type = "unsignedInt"
      },
      radio_count = {
        access = "readOnly",
        type = "unsignedInt"
      },
      device_name = {
        access = "readOnly",
        type = "string"
      },
      SoftwareVersion = {
        access = "readOnly",
        type = "string",
        max = "64"
      },
      LastContactTime = {
        access = "readOnly",
        type = "dateTime"
      },
      ManufacturerOUI = {
        access = "readOnly",
        type = "string",
        min = "6",
        max = "6"
      },
      ProductClass = {
        access = "readOnly",
        type = "string",
        max = "64"
      },
      BackhaulMACAddress = {
        access = "readOnly",
        type = "string",
        max = "17"
      },
      BackhaulBytesSent = {
        access = "readOnly",
        type = "unsignedLong"
      },
      BackhaulBytesReceived = {
        access = "readOnly",
        type = "unsignedLong"
      },
      BackhaulLinkUtilization = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            max = "100",
          },
        },
      },

    },
  }
}

local conn = mapper("ubus").connect()
local uciHelper = mapper("ucihelper")
local get_from_uci = uciHelper.get_from_uci
local lower = string.lower
local multiapBinding = { config = "multiap" }
local concat = table.concat
local data

local paramMap = {
  state = "status",
  backhaul_interface_type = "backhaul_info",
  status = "status",
  parent = "parent",
  neighbors = "neighbors",
  manufacturer_name = "manufacturer_name",
  serial_number = "serial_number",
  rssi = "rssi",
  phyrate = "phyrate",
  radio_count = "radio_count",
  SoftwareVersion = "os_version",
  LastContactTime = "time_since_query",
  ProductClass = "product_type",
  BackhaulMACAddress = "interface_mac",
  BackhaulBytesSent = "bytes_sent",
  BackhaulBytesReceived = "bytes_recvd",
  BackhaulLinkUtilization = "link_utilisation"

}

local function getUciParam(sectionName)
  multiapBinding.sectionname = sectionName
  multiapBinding.option = "macaddress"
  return uciHelper.get_from_uci(multiapBinding)
end

multiap_device_i_.entries = function()
  local entries = {}
  data = conn:call("multiap.controller.agent_info", "get", {}) or {}
  local agentMac = lower(getUciParam("agent"))
  local controllerMac = lower(getUciParam("controller"))
  for mac in pairs(data) do
    if mac ~= agentMac and mac ~= controllerMac then
      entries[#entries + 1] = mac
    end
  end
  return entries
end

local function getManufacturerOui(key)
 local host_data = conn:call("hostmanager.device", "get", {}) or {}
  for _, host in pairs(host_data) do
    local mac = host["mac-address"]
    local agent_mac = data[key] and data[key]["local_interfaces"]
    for param, value in pairs(agent_mac or {}) do
      if mac and mac == value then
        for _, ipdata in pairs(host["ipv4"]) do
          if ipdata["dhcp"] then
            return ipdata["dhcp"]["manufacturer-oui"] and ipdata["dhcp"]["manufacturer-oui"] or ""
          end
        end
      end
    end
  end
  return ""
end

multiap_device_i_.get = function(mapping, param, key)
  if param == "al_mac" then
    return key
  elseif param == "device_name" then
    local agentMac = key:match("([^%:]+)$") or ""
    return "agent_" .. agentMac
  elseif param == "ip_address" then
    local interfaces = data[key]["local_interfaces"] or {}
    local ipaddr = {}
    if next(interfaces) then
      for _, mac in ipairs(interfaces) do
        local host_data = conn:call("hostmanager.device", "get", { ["mac-address"] = mac }) or {}
        if next(host_data) then
          for ip,_ in pairs(host_data) do
            for _, idx in pairs(host_data[ip]["ipv4"]) do
              ipaddr[#ipaddr+1] = idx["address"] or ""
            end
          end
        end
      end
    end
    return concat(ipaddr,",")
  elseif param == "ManufacturerOUI" then
    return getManufacturerOui(key) or ""
  elseif paramMap[param] then
    local result = data[key] and data[key][paramMap[param]] or ""
    if param == "state" then
      return result == "ONBOARDED" and "1" or "0"
    elseif param == "status" then
      return result == "ONBOARDED" and "Onboarding success" or ( result == "ONBOARDING" and "Onboarding") or "Onboarding failed"
    elseif param == "backhaul_interface_type" and result then
      return result["interface_type"] or ""
    end
    return type(result) == "table" and table.concat(result, ",") or tostring(result)
  end
end

register(multiap_device_i_)
