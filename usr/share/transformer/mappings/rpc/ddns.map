local register = register;
local uci_helper = mapper("ucihelper")
local open, popen, strmatch = io.open, io.popen, string.match

local ddns_ = {
    objectType = {
        name = 'rpc.ddns.',
        access = 'readOnly',
        minEntries = 1,
        maxEntries = 1,
        parameters = {
	      status = {
	        access = "readOnly",
	        type = "string"
	      },

        }
    }
}

ddns_.get = {
  status = function(mapping, param, key)
    local state = "connecting"
    local services = {}
    local ddns_binding = {config = "ddns", sectionname = "service"}

    uci_helper.foreach_on_uci(ddns_binding, function(s)
        services[#services + 1] = s['.name']
    end)

    -- Currently we only support one service
    if services[1] then
        --special process for namecheap,zoneedit,easydns,free
        local errFile = "/var/run/ddns/" .. services[1] .. ".err"
        local datFile = "/var/run/ddns/" .. services[1] .. ".dat"
        local cmdResult = nil
        local handle = popen('cat ' .. errFile)
        if handle then
            local cmdResult = handle:read("*a")
            handle:close()
            if "" ~= cmdResult then
                return cmdResult
            else
                --special process for namecheap,zoneedit,easydns,free
                local errString = "cat " .. datFile .. "| grep "
                local errInfo = {errString .. '".*401"',
                                 errString .. '".*TEXT=" | sed -n "s/.*TEXT=\\"\\(.*\\)\\" ZONE.*/\\1/gp"',
                                 errString .. '".*Err1" | sed -n "s/.*Err1>\\(.*\\)<\\/Err1.*/\\1/gp"',
                                 errString .. '"^.*fail"',
                                 errString .. '".*nohost"',
                                 errString .. '".*badauth"',
                                 errString .. '".*200 OK"',
                                 errString .. '".*ERR Not authenticated"',
                                 errString .. '".*HTTP Basic: Access denied"',
                                 errString .. '".*500"',
                                 errString .. '".*notify NG"',
                                }
                for _, v in ipairs(errInfo) do
                    handle = popen(v)
                    if handle then
                        cmdResult = handle:read("*a")
                        handle:close()
                        if "" ~= cmdResult then
                            if strmatch(v, "401") or strmatch(v, "500") or strmatch(v, "notify NG") then
                                return "Failed to Authenticate"
                            end

                            if strmatch(v, "200") then
                                return "IP not changed"
                            end

                            return cmdResult
                        end
                    end
                end
            end

            state = "No error received from server"
        end
    end
    return state
  end
}

register(ddns_)
