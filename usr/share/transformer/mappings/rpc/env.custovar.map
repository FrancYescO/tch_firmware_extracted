local env_custovar_ = {
  objectType = {
    name = "rpc.env.custovar.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
        ONTmode = {
            access = "readWrite",
            type = "boolean",
            description = "Unlock gateway to configure other ISP"
        },
        ONTmodeGUIbutton = {
            access = "readWrite",
            type = "boolean",
            description = "Show GUI button to unlock"
        },
    },
  }
}

local networkBinding = { config = "network" }
local envBinding = { config = "env" }
local wansensingBinding = { config = "wansensing" }
local webBinding = { config = "web" }
local ethernetBinding = { config = "ethernet" }
local wlBinding = { config = "wireless" }
local mmpbxBinding = { config = "mmpbx" }
local cwmpBinding = { config = "cwmpd" }
local dhcpBinding = { config = "dhcp"}
local webserviceBinding = { config = "webservice" }
local sambaBinding = { config = "samba" }
local dlnaBinding = { config = "dlnad" }
local printerBinding = { config = "printersharing" }
local mobiledBinding = { config = "mobiled" }
local ddnsBinding = { config = "ddns" }
local gponBinding = { config = "gpon"}
local gponL3Binding = { config = "gponl3"}
local buttonBinding = { config = "button"}
local uciHelper = mapper("ucihelper")
local transactions = {}

local uci_cursor = require("uci")
local uci = uci_cursor.cursor()
local format = string.format
local logger = require("transformer.logger")
local log = logger.new("mylog", 2)

local function getFromUci(binding, sectionname, option)
  binding.sectionname = sectionname
  binding.option = option
  return uciHelper.get_from_uci(binding) or ""
end

local function setUciValue(binding, sectionname, option, value)
  binding.sectionname = sectionname
  binding.option = option
  uciHelper.set_on_uci(binding, value, commitapply)
  transactions[binding.config] = true
end

env_custovar_.get = {
  ONTmode = function(mapping, param, key)
    return getFromUci(envBinding, "custovar", "ONTmode")
  end,
  ONTmodeGUIbutton = function(mapping, param, key)
    return getFromUci(envBinding, "custovar", "ONTmodeGUIbutton")
  end
}

local function setUnlockStatus(value)
  local tabDDNS = {}
  local DDNSdata = uci:get_all("ddns")
  local ONTmodeGUIbutton = getFromUci(envBinding, "custovar", "ONTmodeGUIbutton")

  for i,v in pairs(DDNSdata) do
    if v[".type"] == "service" then
      tabDDNS[#tabDDNS + 1] = i
    end
  end

  if value == "1" and ONTmodeGUIbutton == "1" then

	--loop for eth0, eth1 and eth2 disabled in ONT mode
    for i=0,2,1 do
      setUciValue(ethernetBinding, string.format("eth%d", i), "enable", "0")
    end

    for i,v in ipairs(tabDDNS) do
      setUciValue(ddnsBinding, v, "enabled", "0")
    end

    --bridged
    setUciValue(networkBinding, "lan", "ifname", "eth0_0 eth1_0 eth2_0")
    setUciValue(networkBinding, "wan", "ifname", "eth3 veip0_1")
	setUciValue(networkBinding, "lan", "ipaddr", "")
    setUciValue(networkBinding, "lan", "netmask", "")
    setUciValue(networkBinding, "wan", "proto", "none")
    setUciValue(networkBinding, "wan", "type", "bridge")
    setUciValue(networkBinding, "wan", "auto", "1") --not necessary?
    setUciValue(gponBinding, "uni_3", "bridge", "wan")
    setUciValue(gponBinding, "uni_3", "type", "ont")
    setUciValue(gponL3Binding, "veip0_1", "mode", "bridged")
    --end bridged

    setUciValue(wansensingBinding, "global", "enable", "0")
    setUciValue(wlBinding, "radio_2G", "state", "0")
    setUciValue(wlBinding, "radio_5G", "state", "0")
    setUciValue(mmpbxBinding, "global", "enabled", "0")
    setUciValue(cwmpBinding, "cwmpd_config", "state", "0")
    setUciValue(dhcpBinding, "lan", "dhcpv6", "disabled")
    setUciValue(dhcpBinding, "lan", "dhcpv4", "disabled")
    setUciValue(dhcpBinding, "Guest", "dhcpv6", "disabled")
    setUciValue(dhcpBinding, "Guest", "dhcpv4", "disabled")
    setUciValue(sambaBinding, "samba", "enabled", "0")
    setUciValue(dlnaBinding, "config", "enabled", "0")
    setUciValue(printerBinding, "config", "enabled", "0")
    setUciValue(mobiledBinding, "device_defaults", "enabled", "0")
    setUciValue(mobiledBinding, "platform", "power_on", "0")
    setUciValue(buttonBinding, "wifi", "handler", "")
    setUciValue(buttonBinding, "line", "handler", "")
    setUciValue(buttonBinding, "wps", "handler", "")
    setUciValue(envBinding, "custovar", "ONTmode", value)
 end
end


env_custovar_.set = {
  ONTmode = function(mapping, param, value, key)
    setUnlockStatus(value)
  end,
  ONTmodeGUIbutton = function(mapping, param, value, key)
    setUciValue(envBinding, "custovar", "ONTmodeGUIbutton", value)
  end
}

env_custovar_.commit = function()
  for config in pairs(transactions) do
    uciHelper.commit({config = config})
  end
  for config in pairs(transactions) do
    if config == "gponl3" then
	
      os.execute("/etc/init.d/gpon-uni reload")
      os.execute("/etc/init.d/gpon-ethwan reload")
      os.execute("/etc/init.d/gponl3 reload")
      os.execute("/etc/init.d/network restart")
      os.execute("/etc/init.d/ledfw restart")
	  
      os.execute("/bin/gponctl stop")
	  
      os.execute("/bin/gponctl start")
	  
    end
  end
  transactions = {}
end

env_custovar_.revert = function()
  for config in pairs(transactions) do
    uciHelper.revert({config = config})
  end
  transactions = {}
end

register(env_custovar_)
