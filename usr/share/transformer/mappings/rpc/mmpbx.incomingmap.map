-----------------------------------
--- rpc.mmpbx.sip_incomingmap.@. ------
-----------------------------------
local mmpbx_incoming_map = {
    objectType = {
      name = "rpc.mmpbx.sip_incomingmap.@.",
      access = "readOnly",
      minEntries = 0,
      maxEntries = math.huge,
      parameters = {
          PhoneNumber = {
              access = "readOnly",
              type = "string",
          },
          fxs_dev_0 = {
              access = "readWrite",
              type = "boolean",
          },
          fxs_dev_1 = {
              access = "readWrite",
              type = "boolean",
          },
          dect_dev_0 = {
              access = "readWrite",
              type = "boolean",
          },
          dect_dev_1 = {
              access = "readWrite",
              type = "boolean",
          },
          dect_dev_2 = {
              access = "readWrite",
              type = "boolean",
          },
          dect_dev_3 = {
              access = "readWrite",
              type = "boolean",
          },
          dect_dev_4 = {
              access = "readWrite",
              type = "boolean",
          },
          dect_dev_5 = {
              access = "readWrite",
              type = "boolean",
          },
      }
    }
}

local uci_helper = mapper("ucihelper")
local sipnet_binding = { config="mmpbxrvsipnet" }
local mmpbx_binding = { config="mmpbx" }
local transactions = {}
local foreach_on_uci = uci_helper.foreach_on_uci
local get_from_uci = uci_helper.get_from_uci
local set_on_uci = uci_helper.set_on_uci
local delete_on_uci = uci_helper.delete_on_uci
local add_on_uci = uci_helper.add_on_uci

mmpbx_incoming_map.entries =  function()
    local entries = {}
    sipnet_binding.sectionname = "profile"
    foreach_on_uci(sipnet_binding, function(s)
       entries[#entries+1] = s['.name']
    end)
    return entries
end

mmpbx_incoming_map.get = function(mapping, param, key)
    if param == "PhoneNumber" then
        sipnet_binding.sectionname = key
        sipnet_binding.option = "uri"
        return get_from_uci(sipnet_binding)
    else
        local devices = {}
        mmpbx_binding.sectionname = "incoming_map"
        foreach_on_uci(mmpbx_binding, function(s)
          if s.profile == key and type(s.device) == "table" then
              devices = s.device
              return false
          end
        end)

        for _, dev in ipairs(devices) do
          if dev == param then
	    return "1"
	  end
	end
	return "0"
    end
end

local function add_incomingmap(profile, device)
    mmpbx_binding.sectionname = "incoming_map"
    mmpbx_binding.option = nil
    local binding = {config = "mmpbx"}
    binding.sectionname = nil
    local uci_devices ={}
    local add_dev = true
    foreach_on_uci(mmpbx_binding, function(s)
        if s.profile == profile then
            binding.sectionname = s[".name"]
            uci_devices = s["device"]
            return false
        end
    end)

    if not binding.sectionname then
        local section = add_on_uci(mmpbx_binding)
        binding.sectionname = section
        binding.option = "profile"
        set_on_uci(binding, profile, commitapply)
    else
	for _, uci_dev in ipairs(uci_devices) do
	    if uci_dev == device then
		add_dev = false
		break
	    end
	end
    end

    if add_dev then
	uci_devices[#uci_devices + 1] = device
	binding.option = "device"
	set_on_uci(binding, uci_devices, commitapply)
	transactions[binding.config] = true
    end

    return true
end

local function delete_incomingmap(profile, device)
    mmpbx_binding.sectionname = "incoming_map"
    mmpbx_binding.option = nil
    local binding = {config = "mmpbx"}
    binding.sectionname = nil
    local uci_devices ={}
    local del_dev = false
    foreach_on_uci(mmpbx_binding, function(s)
        if s.profile == profile then
            binding.sectionname = s[".name"]
            uci_devices = s["device"]
            return false
        end
    end)

    if binding.sectionname then  --Maps for profile exist
	for i, uci_dev in ipairs(uci_devices) do
	    if uci_dev == device then -- Map for given device exist
		del_dev = true
		table.remove(uci_devices, i)
		break
	    end
	end
	if del_dev then
	    if #uci_devices == 0 then
		binding.option = nil
		delete_on_uci(binding, commitapply)
	    else
		binding.option = "device"
		set_on_uci(binding, uci_devices, commitapply)
	    end
	    transactions[binding.config] = true
	end
    end

    return true
end

mmpbx_incoming_map.set = function(mapping, param, value, key)
    if(value == "1") then
	add_incomingmap(key, param)
    else
	delete_incomingmap(key, param)
    end
end

mmpbx_incoming_map.commit = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.commit(binding)
    end
end

mmpbx_incoming_map.revert = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.revert(binding)
    end
end

register(mmpbx_incoming_map)
