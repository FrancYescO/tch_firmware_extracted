local command_session_ = {
  objectType = {
    name = "Command.Session.@.",
    access = "readWrite",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      start_time = {
        access = "readOnly",
        type = "string",
      },
    },
  }
}

local lfs = require("lfs")
local posix = require("tch.posix")
local sigkill = posix.SIGKILL
local kill = posix.kill
local open = io.open

local sessions = {}

command_session_.entries = function(mapping)
  local entries = {}
  for name, session in pairs(sessions) do
    entries[#entries + 1] = name
  end
  return entries
end

command_session_.get = function(mapping, paramname, key)
  if sessions[key] and sessions[key][paramname] then
    return sessions[key][paramname]
  end
  return nil, "parameter not found"
end

command_session_.set = function(mapping, paramname, paramvalue, key)
  if sessions[key] and sessions[key][paramname] then
    sessions[key][paramname] = paramvalue
    return true
  end
  return nil, "set not supported"
end

command_session_.add = function(mapping, name)
  local ok, errmsg
  if lfs.attributes("/cgroups/cpumemblk/clash", "mode") ~= "directory" then
    ok, errmsg = lfs.mkdir("/cgroups/cpumemblk/clash")
    if not ok then
      return nil, errmsg
    end
    local fd
    fd, errmsg = open("/cgroups/cpumemblk/clash/cpu.cfs_period_us", "w")
    if not fd then
      return nil, errmsg
    end
    fd:write("50000")
    fd:close()
    fd, errmsg = open("/cgroups/cpumemblk/clash/memory.limit_in_bytes", "w")
    if not fd then
      return nil, errmsg
    end
    fd:write("64M")
    fd:close()
    fd, errmsg = open("/cgroups/cpumemblk/clash/memory.use_hierarchy", "w")
    if not fd then
      return nil, errmsg
    end
    fd:write("1")
    fd:close()
  end
  ok, errmsg = lfs.mkdir("/cgroups/cpumemblk/clash/"..name)
  if not ok then
    return nil, errmsg
  end
  sessions[name] = {
    start_time = os.date(),
  }
  return name
end

command_session_.delete = function(mapping, key)
  local cgroup_path = "/cgroups/cpumemblk/clash/"..key
  local ok = true
  local fd, errmsg = open(cgroup_path.."/tasks")
  if fd then
    for pid in fd:lines() do
      kill(pid, sigkill)
    end
    fd:close()
  end
  ok, errmsg = lfs.rmdir(cgroup_path)
  if not ok then
    -- Give cgroups time to catch up to the killed tasks
    os.execute("sleep 1")
    ok, errmsg = lfs.rmdir(cgroup_path)
  end
  sessions[key] = nil
  return ok, errmsg
end

register(command_session_)
