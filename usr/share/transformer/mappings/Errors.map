local Tests_Errors = {
  objectType = {
    name = "Tests.Errors.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
    }
  }
}

register(Tests_Errors)

local Tests_Errors_MI_nil_parameter = {
  objectType = {
    name = "Tests.Errors.MI_nil_parameter.{i}.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      param1 = {
        access = "readOnly",
        type = "string"
      },
    }
  }
}

Tests_Errors_MI_nil_parameter.entries = function()
  return { "1" }
end

Tests_Errors_MI_nil_parameter.get = function()
  return nil, "some_error"
end

register(Tests_Errors_MI_nil_parameter)

local Tests_Errors_MI_error_parameter = {
  objectType = {
    name = "Tests.Errors.MI_error_parameter.{i}.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      param1 = {
        access = "readOnly",
        type = "string"
      },
    }
  }
}

Tests_Errors_MI_error_parameter.entries = function()
  return { "1" }
end

Tests_Errors_MI_error_parameter.get = function()
  error("a real error")
end

register(Tests_Errors_MI_error_parameter)

local Tests_Errors_MI_error_entries = {
  objectType = {
    name = "Tests.Errors.MI_error_entries.{i}.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      param1 = {
        access = "readOnly",
        type = "string"
      }
    }
  }
}
Tests_Errors_MI_error_entries.entries = function()
  error("entries() error")
end
Tests_Errors_MI_error_entries.get = function()
  return "param1"
end

register(Tests_Errors_MI_error_entries)

local Tests_Errors_MI_nil_entries = {
  objectType = {
    name = "Tests.Errors.MI_nil_entries.{i}.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      param1 = {
        access = "readOnly",
        type = "string"
      }
    }
  }
}
Tests_Errors_MI_nil_entries.entries = function()
  return nil, "entries error"
end
Tests_Errors_MI_nil_entries.get = function()
  return "param1"
end

register(Tests_Errors_MI_nil_entries)
