-- Manually generated
local Device_WiFi_AccessPoint_i_Multi_ = {
  objectType = {
    name = "Device.WiFi.AccessPoint.{i}.#VENDOR.",
    access = "readOnly", -- currently readWrite not supported
    description = "Configuration of wifi access point",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Mode = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "Disabled",
          "WhiteList",
          "BlackList",
        },
        default = "Disabled",
        description = "Access control list mode used",
      },
    }
    -- MACAddressesNumberOfEntries (Automatically generated by transformer)
  }
}

local mapper, ipairs, register = mapper, ipairs, register
local uciHelper = mapper("ucihelper")
local setOnUci = uciHelper.set_on_uci
local getFromUci = uciHelper.get_from_uci
local wirelessBinding = {config = "wireless"}
local isConfigChanged = false
local commitApply = commitapply

local modeMap = {
  Disabled = "disabled",
  BlackList = "unlock",
  WhiteList = "lock",
  disabled = "Disabled",
  unlock = "BlackList",
  lock = "WhiteList",
}

local function getMode(mapping, param, parentKey)
  wirelessBinding.sectionname = parentKey
  wirelessBinding.option = "acl_mode"
  local aclMode = getFromUci(wirelessBinding)
  return modeMap[aclMode] or "Disabled"
end

Device_WiFi_AccessPoint_i_Multi_.get = {
  Mode = getMode,
}

Device_WiFi_AccessPoint_i_Multi_.set = {
  Mode = function(mapping, param, value, parentKey)
    wirelessBinding.sectionname = parentKey
    wirelessBinding.option = "acl_mode"
    if modeMap[value] then
      setOnUci(wirelessBinding,modeMap[value],commitApply)
      isConfigChanged = true
    end
  end
}

Device_WiFi_AccessPoint_i_Multi_.commit = function()
  if isConfigChanged then
    uciHelper.commit(wirelessBinding)
    isConfigChanged = false
  end
end

Device_WiFi_AccessPoint_i_Multi_.revert = function()
  if isConfigChanged then
    uciHelper.revert(wirelessBinding)
    isConfigChanged = false
  end
end

-- Manually generated
local Device_WiFi_AccessPoint_i_Multi_MACAddresses_i_ = {
  objectType = {
    name = "Device.WiFi.AccessPoint.{i}.#VENDOR.MACAddresses.{i}.",
    access = "readOnly", -- currently readWrite not supported
    description = "Wifi accesspoint mac addresses",
    numEntriesParameter = "MACAddressesNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      MACAddress = {
        access = "readWrite",
        type = "string",
        description = "MAC address of wifi device",
      }
    }
  }
}

local nwCommon = mapper("nwcommon")
local splitKey = nwCommon.split_key

local aclModeMap = {
  ['lock'] = "acl_accept_list",
  ['unlock'] = "acl_deny_list",
  ['disabled'] = "",
  ['register'] = "",
}

Device_WiFi_AccessPoint_i_Multi_MACAddresses_i_.entries = function(mapping, parentKey)
  local entries = {}
  wirelessBinding.sectionname = parentKey
  wirelessBinding.option = "acl_mode"
  wirelessBinding.default = "disabled"
  local aclMode = getFromUci(wirelessBinding)
  wirelessBinding.option = aclModeMap[aclMode]
  wirelessBinding.default = {}
  local macAddresses = getFromUci(wirelessBinding)
  if type(macAddresses) == "table" then
    for index,v in ipairs(macAddresses) do
      entries[#entries + 1] = index .. "|" .. parentKey
    end
  end
  return entries
end

local function getOrSetMacAddress(value, key)
  local index, section = splitKey(key)
  index = tonumber(index)
  wirelessBinding.sectionname = section
  wirelessBinding.option = "acl_mode"
  local aclMode = getFromUci(wirelessBinding)
  wirelessBinding.option = aclModeMap[aclMode]
  local macAddresses = getFromUci(wirelessBinding)
  if value then
    macAddresses[index] = value
    setOnUci(wirelessBinding, macAddresses, commitApply)
    isConfigChanged = true
  else
    return macAddresses[index]
  end
end

Device_WiFi_AccessPoint_i_Multi_MACAddresses_i_.get = {
  MACAddress = function(mapping, param, key)
    return getOrSetMacAddress(nil, key)
  end,
}

Device_WiFi_AccessPoint_i_Multi_MACAddresses_i_.set = {
  MACAddress = function(mapping, param, value, key)
    if nwCommon.isMAC(value) then
      getOrSetMacAddress(value, key)
    else
      return nil,string.format("%s is not a valid MAC Address",value)
    end
  end,
}

Device_WiFi_AccessPoint_i_Multi_MACAddresses_i_.commit = function()
  if isConfigChanged then
    uciHelper.commit(wirelessBinding)
    isConfigChanged = false
  end
end

Device_WiFi_AccessPoint_i_Multi_MACAddresses_i_.revert = function()
  if isConfigChanged then
    uciHelper.commit(wirelessBinding)
    isConfigChanged = false
  end
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Device_WiFi_AccessPoint_i_Multi_, "#VENDOR", { "X_000E50_ACL", "X_BELGACOM_ACL" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end

duplicates = duplicator(Device_WiFi_AccessPoint_i_Multi_MACAddresses_i_, "#VENDOR", { "X_000E50_ACL", "X_BELGACOM_ACL" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end
