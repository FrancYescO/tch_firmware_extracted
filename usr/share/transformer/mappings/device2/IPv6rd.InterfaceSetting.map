-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_IPv6rd_InterfaceSetting_i_ = {
  objectType = {
    name = "Device.IPv6rd.InterfaceSetting.{i}.",
    access = "readOnly",
    numEntriesParameter = "InterfaceSettingNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Disabled",
          "Enabled",
          "Error",
        },
      },
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
      },
      BorderRelayIPv4Addresses = {
        access = "readWrite",
        list = true,
        maxItems = "4",
        type = "string",
      },
      AllTrafficToBorderRelay = {
        access = "readOnly", -- readWrite currently not supported
        type = "boolean",
      },
      SPIPv6Prefix = {
        access = "readWrite",
        type = "string",
      },
      IPv4MaskLength = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "32",
          },
        },
      },
      AddressSource = {
        access = "readOnly", -- readWrite currently not supported
        type = "string",
        max = "256",
        pathRef = true,
        targetParent = "Device.IP.Interface.{i}.IPv4Address.{i}.",
      },
      TunnelInterface = {
        access = "readOnly",
        type = "string",
        max = "256",
        pathRef = true,
        targetParent = "Device.IP.Interface.{i}.",
      },
      TunneledInterface = {
        access = "readOnly",
        type = "string",
        max = "256",
        pathRef = true,
        targetParent = "Device.IP.Interface.{i}.",
      },
    }
  }
}

local mapper = mapper
local uciHelper = mapper("ucihelper")
local ubusConnection = mapper("ubus").connect()
local inet = require("tch.inet")
local networkBinding = { config = "network" }
local configChanged = false
local staticConfig = {}

Device_IPv6rd_InterfaceSetting_i_.entries = function()
  local ipv6rdEntries = {}
  local networkDump = ubusConnection:call("network.interface", "dump", {})
  if networkDump and networkDump.interface then
    for _, intfValues in ipairs(networkDump.interface) do
      if intfValues.proto == "6rd" then
        ipv6rdEntries[#ipv6rdEntries + 1] = intfValues.interface
      end
      if not intfValues.dynamic and intfValues.interface then
        staticConfig[intfValues.interface] = true
      end
    end
  end
  return ipv6rdEntries
end

local function getUciValue(key, paramName, default)
  networkBinding.sectionname = key
  networkBinding.option = paramName
  networkBinding.default = default
  return uciHelper.get_from_uci(networkBinding)
end

local function getUbusStatus(key)
  return ubusConnection:call("network.interface." .. key, "status", {})
end

local function getEnableAndStatus(key, uciValues, ubusStatus)
  ubusStatus = ubusStatus or getUbusStatus(key)
  local enable, status
  if staticConfig[key] then
    enable = uciValues and uciValues.auto or getUciValue(key, "auto", "1")
  else
    enable = ubusStatus and ubusStatus["up"] and "1" or "0"
  end
  status = ubusStatus and ubusStatus["up"] and "Enabled" or "Disabled"
  return enable, status
end

local function getBorderRelayIPv4Addresses(mapping, param, key, uciValues, ubusStatus)
  ubusStatus = ubusStatus or getUbusStatus(key)
  if staticConfig[key] then
    return uciValues and uciValues.peeraddr or getUciValue(key, "peeraddr")
  else
    if ubusStatus and ubusStatus["ipv4-address"] and ubusStatus["ipv4-address"][1] then
      return ubusStatus["ipv4-address"][1]["address"] or ""
    end
  end
  return ""
end

local function getSPIPv6Prefix(mapping, param, key, uciValues, ubusStatus)
  ubusStatus = ubusStatus or getUbusStatus(key)
  if staticConfig[key] then
    return uciValues and uciValues.ip6prefix or getUciValue(key, "ip6prefix")
  else
    if ubusStatus and ubusStatus["ipv6-prefix"] and ubusStatus["ipv6-prefix"][1] then
      return ubusStatus["ipv6-prefix"][1]["address"] or ""
    end
  end
  return ""
end

local function getIPv4MaskLength(mapping, param, key)
  return getUciValue(key, "ip4prefixlen", "0")
end

local function getAddressSource(mapping, param, key)
  return resolve('Device.IP.Interface.{i}.IPv4Address.{i}.', key) or ""
end

local function getTunnelInterface(mapping, param, key)
  return resolve('Device.IP.Interface.{i}.', key) or ""
end

local function getTunneledInterface(mapping, param, key, uciValues)
  local tunneledIntf = uciValues and uciValues.tunlink or getUciValue(key, "tunlink")
  return resolve('Device.IP.Interface.{i}.', tunneledIntf) or ""
end

Device_IPv6rd_InterfaceSetting_i_.get = {
  Enable = function(mapping, param, key)
    local enable = getEnableAndStatus(key)
    return enable
  end,
  Status = function(mapping, param, key)
    local _, status = getEnableAndStatus(key)
    return status
  end,
  BorderRelayIPv4Addresses = getBorderRelayIPv4Addresses,
  AllTrafficToBorderRelay = "1", -- Hardcoded to "1" since there is no lower layer support
  SPIPv6Prefix = getSPIPv6Prefix,
  IPv4MaskLength = getIPv4MaskLength,
  AddressSource = getAddressSource,
  TunnelInterface = getTunnelInterface,
  TunneledInterface = getTunneledInterface,
}

Device_IPv6rd_InterfaceSetting_i_.getall = function(mapping, key)
  networkBinding.sectionname = key
  networkBinding.option = nil
  local uciValues = uciHelper.getall_from_uci(networkBinding)
  local ubusStatus = getUbusStatus(key)
  local enable, status = getEnableAndStatus(key, uciValues, ubusStatus)
  return {
    Enable = enable,
    Status = status,
    BorderRelayIPv4Addresses = getBorderRelayIPv4Addresses(mapping, nil, key, uciValues, ubusStatus),
    SPIPv6Prefix = getSPIPv6Prefix(mapping, nil, key, uciValues, ubusStatus),
    IPv4MaskLength = uciValues and uciValues.ip4prefixlen or "0",
    AddressSource = getAddressSource(mapping, nil, key),
    TunnelInterface = getTunnelInterface(mapping, nil, key),
    TunneledInterface = getTunneledInterface(mapping, nil, key, uciValues),
  }
end

local function setUciValue(key, paramName, value)
  networkBinding.sectionname = key
  networkBinding.option = paramName
  uciHelper.set_on_uci(networkBinding, value, commitapply)
  configChanged = true
end

local paramMap = {
  ["Enable"] = "auto",
  ["BorderRelayIPv4Addresses"] = "peeraddr",
  ["SPIPv6Prefix"] = "ip6prefix",
  ["IPv4MaskLength"] = "ip4prefixlen",
}

Device_IPv6rd_InterfaceSetting_i_.set = function(mapping, param, value, key)
  if staticConfig[key] then
    if param == "BorderRelayIPv4Addresses" then
      local rc, err = inet.isValidIPv4(value)
      if not rc then
        return nil, err
      end
    end
    return setUciValue(key, paramMap[param], value)
  end
  return nil, "Cannot set value for dynamically configured 6rd interface"
end

Device_IPv6rd_InterfaceSetting_i_.commit = function()
  if configChanged then
    uciHelper.commit(networkBinding)
    configChanged = false
  end
end

Device_IPv6rd_InterfaceSetting_i_.revert = function()
  if configChanged then
    uciHelper.revert(networkBinding)
    configChanged = false
  end
end

register(Device_IPv6rd_InterfaceSetting_i_)
