local optical = require("transformer.shared.optical")
local flag = optical.getBoardtype()
if flag == "none" then
  return
end

local register, mapper, eventsource = register, mapper, eventsource
local upper, match = string.upper, string.match
local posix = require("tch.posix")
local getClockTime = posix.clock_gettime
local lastStateChangeTime = getClockTime(posix.CLOCK_MONOTONIC)
local commitapply = commitapply
local uci = require("transformer.mapper.ucihelper")
local commit = uci.commit
local getFromUci = uci.get_from_uci
local setOnUci = uci.set_on_uci
local txStatus, linkStatus
local gpon_status = optical.getGponstate() == "Up" and "Up" or "Other"
local envBinding = { config = "env", sectionname = "rip",option = "flap_num", default = "0" }

-- Manually generated Multi_Optical_Interface_i_
local Multi_Optical_Interface_i_ = {
  objectType = {
    name = "#ROOT",
    access = "readOnly",
    minEntries = 1,
    maxEntries = math.huge,
    numEntriesParameter = "InterfaceNumberOfEntries",
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      Status = {
        access = "readOnly",
        type = "string",
      },
      OpticalSignalLevel = {
        access = "readOnly",
        type = "int",
      },
      TransmitOpticalLevel = {
        access = "readOnly",
        type = "int",
      },
      Alias = {
        access = "readWrite",
        type = "string",
      },
      Name = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      LastChange = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LowerLayers = {
        access = "readOnly",
        type = "string",
        max = "1024",
      },
      Upstream = {
        access = "readOnly",
        type = "boolean",
      },
      LowerOpticalThreshold = {
        access = "readOnly",
        type = "int",
      },
      UpperOpticalThreshold = {
        access = "readOnly",
        type = "int",
      },
      LowerTransmitPowerThreshold = {
        access = "readOnly",
        type = "int",
      },
      UpperTransmitPowerThreshold = {
        access = "readOnly",
        type = "int",
      },
      X_FASTWEB_Flap = {
        access = "readOnly",
        type = "int",
        description = "Incremental number of optical up/down transition states",
      },
      X_FASTWEB_VendorName = {
        access = "readOnly",
        type = "string",
        description = "Vendor Name"
      },
      X_FASTWEB_SFPType = {
        access = "readOnly",
        type = "string",
        description = "SFP Type"
      },
    },
  }
}

-- Currently by default single entry is formed
Multi_Optical_Interface_i_.entries = function(mapping)
  return { "1" }
end

local function getLastChange()
  local value = getClockTime(posix.CLOCK_MONOTONIC) - lastStateChangeTime
  return tostring(value)
end

Multi_Optical_Interface_i_.get = {
  Enable = function()
    return optical.getEnable()
  end,
  Status = function()
    return optical.getStatus()
  end,
  OpticalSignalLevel = function()
    return optical.getLevel("OpticalSignalLevel")
  end,
  TransmitOpticalLevel = function()
    return optical.getLevel("TransmitOpticalLevel")
  end,
  Name = "OPTICAL",
  LastChange = getLastChange,
  LowerLayers = "",
  Upstream = "1",
  LowerOpticalThreshold = function(mapping, param)
    return optical.getThresholdValues(param)
  end,
  UpperOpticalThreshold = function(mapping, param)
    return optical.getThresholdValues(param)
  end,
  LowerTransmitPowerThreshold = function(mapping, param)
    return optical.getThresholdValues(param)
  end,
  UpperTransmitPowerThreshold = function(mapping, param)
    return optical.getThresholdValues(param)
  end,
  X_FASTWEB_Flap = function()
    return getFromUci(envBinding)
  end,
  X_FASTWEB_VendorName = function()
    if flag == "gpon" then
      return "Technicolor"
    else
      return optical.getVendorName()
    end
  end,
  X_FASTWEB_SFPType = function()
    local type = "NONE"
    if flag == "gpon" then
      type = "1000BASE_LX"
    elseif flag == "sfp" then
      local wantype = optical.getWantype()
      if wantype == "xepon_ae" then
        type = "GPON"
      elseif wantype == "xepon_ae_p2p" then
        type = "P2P"
      end
    end
    return type
  end,
}

Multi_Optical_Interface_i_.set = {
  Enable = function(mapping, param, value, key)
    optical.setEnable(value)
  end,
}

local function increaseFlapNum()
  local flap_num = getFromUci(envBinding)
  setOnUci(envBinding, flap_num + 1, commitapply)
  commit(envBinding)
end

local function ubusGponPloamEventTriggered(mapping, action, data)
  if data and data.statuscode then
    local current_status
    lastStateChangeTime = getClockTime(posix.CLOCK_MONOTONIC)
    if data.statuscode == 5 then
      current_status = "Up"
    else
      current_status = "Other"
    end
    if gpon_status ~= current_status then
      gpon_status = current_status
      increaseFlapNum()
    end
  end
end

local function linkIsUp()
  if optical.getSfpLinkStatus() == "Up" then
    return true
  else
    return false
  end
end

local function ubusSfpEventTriggered(mapping, action, data)
  if not data or not data.status then
    return
  end
  if data.status == "tx_enable" or data.status == "tx_disable" then
    if not linkStatus and linkIsUp() then
      linkStatus = "linkup"
    end
    if linkStatus ~= "linkup" then
      return
    end
    if data.status ~= txStatus then
      lastStateChangeTime = getClockTime(posix.CLOCK_MONOTONIC)
      txStatus = data.status
      increaseFlapNum()
    end
  else
    lastStateChangeTime = getClockTime(posix.CLOCK_MONOTONIC)
    if data.status == "unplug" then
      data.status = "linkdown"
    end
    if (data.status == "linkup" or data.status == "linkdown") and data.status ~= linkStatus then
      linkStatus = data.status
      increaseFlapNum()
    end
  end
end

Multi_Optical_Interface_i_.add_watchers = function(mapping)
  local ubusEventSource = eventsource("ubus")
  if flag == "gpon" then
    ubusEventSource.watch_event(mapping, ubusGponPloamEventTriggered, "gpon.ploam")
  elseif flag == "sfp" then
    ubusEventSource.watch_event(mapping, ubusSfpEventTriggered, "sfp")
  end
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Optical_Interface_i_, "#ROOT", { "rpc.optical.Interface.{i}.", "Device.Optical.Interface.{i}." })
for _, dupli in ipairs(duplicates) do
  register(dupli)
end

local Multi_Optical_Interface_i_Stats_ = {
  objectType = {
    name = "#ROOT",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      BytesSent = {
        access = "readOnly",
        type = "unsignedLong",
      },
      BytesReceived = {
        access = "readOnly",
        type = "unsignedLong",
      },
      PacketsSent = {
        access = "readOnly",
        type = "unsignedLong",
      },
      PacketsReceived = {
        access = "readOnly",
        type = "unsignedLong",
      },
      ErrorsSent = {
        access = "readOnly",
        type = "unsignedInt",
      },
      ErrorsReceived = {
        access = "readOnly",
        type = "unsignedInt",
      },
      DiscardPacketsSent = {
        access = "readOnly",
        type = "unsignedInt",
      },
      DiscardPacketsReceived = {
        access = "readOnly",
        type = "unsignedInt",
      },
    },
  }
}

Multi_Optical_Interface_i_Stats_.get = function(mapping, param)
  return optical.getStats(param)
end

Multi_Optical_Interface_i_Stats_.getall = function()
  return optical.getAllStats()
end

duplicator = mapper("multiroot").duplicate
duplicates = duplicator(Multi_Optical_Interface_i_Stats_, "#ROOT", { "rpc.optical.Interface.{i}.Stats.", "Device.Optical.Interface.{i}.Stats." })
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
