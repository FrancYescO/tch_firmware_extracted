-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_DeviceInfo_ = {
  objectType = {
    name = "Device.DeviceInfo.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      DeviceCategory = {
        access = "readOnly",
        list = true,
        type = "string",
      },
      Manufacturer = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      ManufacturerOUI = {
        access = "readOnly",
        type = "string",
        min = "6",
        max = "6",
      },
      ModelName = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
        max = "64",
      },
      ModelNumber = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      Description = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
        max = "256",
      },
      ProductClass = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      SerialNumber = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      HardwareVersion = {
        access = "readOnly",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      SoftwareVersion = {
        access = "readOnly",
        activeNotify = "forceEnabled",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      AdditionalHardwareVersion = {
        access = "readOnly",
        list = true,
        max = "64",
        type = "string",
      },
      AdditionalSoftwareVersion = {
        access = "readOnly",
        list = true,
        max = "64",
        type = "string",
      },
      ProvisioningCode = {
        access = "readWrite",
        activeNotify = "forceEnabled",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      UpTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      FirstUseDate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      X_000E50_NewSoftwareBank = {
        access = "readWrite",
        type = "string",
        pathRef = true,
      },
      -- VendorConfigFileNumberOfEntries
      -- automatically created when Device.DeviceInfo.VendorConfigFile.{i}. is loaded
      -- SupportedDataModelNumberOfEntries
      -- automatically created when Device.DeviceInfo.SupportedDataModel.{i}. is loaded
      -- ProcessorNumberOfEntries
      -- automatically created when Device.DeviceInfo.Processor.{i}. is loaded
      -- VendorLogFileNumberOfEntries
      -- automatically created when Device.DeviceInfo.VendorLogFile.{i}. is loaded
      -- LocationNumberOfEntries
      -- automatically created when Device.DeviceInfo.Location.{i}. is loaded
    }
  }
}

local floor = math.floor
local open = io.open
local tostring = tostring
local uci = mapper("ucihelper")
local isConfigChanged = false

local function firstline(filename, nb)
  local fd = open(filename)
  if not fd then
    -- you could return nil and and error message but that will abort
    -- iterating over all parameters.
    -- so here I opt to just return an empty string.
    return ""
  end
  local result = fd:read(nb or "*l")
  fd:close()
  return result
end

local function friendly_name()
  local binding = { config = "env", sectionname = "var", option = "prod_description" }
  local value = uci.get_from_uci(binding)
  if value == "" then
    value = firstline("/proc/rip/0040")
  end
  Device_DeviceInfo_.get.Description = value
  return value
end

local envBinding = {config = "env", sectionname = "var"}

local cwmpBinding = {config = "cwmpd", sectionname = "cwmpd_config", option = "firstusedate"}

Device_DeviceInfo_.get = {
  DeviceCategory = "",
  Manufacturer = function()
    local binding = { config = "env", sectionname = "var", option = "company" }
    local value = uci.get_from_uci(binding)
    if value == "" then
      value = "Technicolor"
    end
    Device_DeviceInfo_.get.Manufacturer = value
    return value
  end,
  ManufacturerOUI =  function()
    local binding = { config = "env", sectionname = "var", option = "oui" }
    local value = uci.get_from_uci(binding)
    Device_DeviceInfo_.get.ManufacturerOUI = value
    return value
  end,
  ModelName = function()
    envBinding.option = "prod_friendly_name"
    return uci.get_from_uci(envBinding)
  end,
  ModelNumber = function()
    local binding = { config = "env", sectionname = "var", option = "prod_number" }
    local value = uci.get_from_uci(binding)
    Device_DeviceInfo_.get.ModelNumber = value
    return value
  end,
  Description = friendly_name,
  ProductClass =  function()
    local binding = { config = "env", sectionname = "var", option = "prod_number" }
    local value = uci.get_from_uci(binding)
    Device_DeviceInfo_.get.ProductClass = value
    return value
  end,
  SerialNumber = function()
    local binding = { config = "env", sectionname = "var", option = "serial" }
    local value = uci.get_from_uci(binding)
    Device_DeviceInfo_.get.SerialNumber = value
    return value
  end,
  HardwareVersion = function()
    local binding = { config = "env", sectionname = "var", option = "hardware_version" }
    local value = uci.get_from_uci(binding)
    Device_DeviceInfo_.get.HardwareVersion = value
    return value
  end,
  SoftwareVersion = function()
    local binding = { config = "env", sectionname = "var", option = "friendly_sw_version_activebank"}
    local value = uci.get_from_uci(binding)
    local newvalue = value:match("([^%-]+)%-")
    if newvalue then
        value=newvalue
    end
    Device_DeviceInfo_.get.SoftwareVersion = value
    return value
  end,
  AdditionalSoftwareVersion = function()
    local binding = { config = "env", sectionname = "var", option = "friendly_sw_version_activebank"}
    local value = uci.get_from_uci(binding)
    local newvalue = value:match("([%x]+)$")
    if newvalue then
        value=newvalue
    end
    Device_DeviceInfo_.get.AdditionalSoftwareVersion = value
    return value
  end,
  AdditionalHardwareVersion = "",
  ProvisioningCode = function()
    envBinding.option = "provisioning_code"
    return uci.get_from_uci(envBinding)
  end,
  UpTime = function()
    local fd, msg = open("/proc/uptime")
    if not fd then
      return fd, msg
    end
    local uptime = fd:read("*n")
    fd:close()
    return tostring(floor(uptime))
  end,
  FirstUseDate = function()
    local value = uci.get_from_uci(cwmpBinding)
    return value ~= "" and value or "0001-01-01T00:00:00Z"
  end,
  X_000E50_NewSoftwareBank = ""
}
Device_DeviceInfo_.set = function(mapping, pname, pvalue)
  if pname == "ProvisioningCode" then
    isConfigChanged = true
    envBinding.option = "provisioning_code"
    return uci.set_on_uci(envBinding, pvalue, commitapply)
  end
  if pname == "X_000E50_NewSoftwareBank" then
    local error
    error, pvalue = pcall(tokey, pvalue, "Device.DeviceInfo.X_000E50_SoftwareBank.{i}.")
    if not error then
      return nil, "invalid value"
    end
    if pvalue ~= "notbooted" then
      return nil, "Cannot Switch Over"
    end
    commitapply:newset("switchOver")
  end
end

Device_DeviceInfo_.commit = function()
  if isConfigChanged then
    uci.commit({config = "env"})
    isConfigChanged = false
  end
end

Device_DeviceInfo_.revert = function()
  if isConfigChanged then
    uci.revert({config = "env"})
    isConfigChanged = false
  end
end

local function setUciEvent(mapping, action, config, sectionType, sectionName, option)
  return { { key = "", paramname = "ProvisioningCode" } }
end

Device_DeviceInfo_.add_watchers = function(mapping)
  local uci_evsrc = eventsource("uci")
  uci_evsrc.watch(mapping, { set = setUciEvent }, "env", "envvars", nil, "provisioning_code")
end

register(Device_DeviceInfo_)
