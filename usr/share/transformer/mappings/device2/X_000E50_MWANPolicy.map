-- Manually generated

local Device_X_000E50_MWANPolicy_i_ = {
  objectType = {
    name = "Device.X_000E50_MWANPolicy.{i}.",
    access = "readWrite",
    minEntries = 0,
    maxEntries = math.huge,
    description = "Configure MWAN policies and Interface of MWAN policy",
    parameters = {
      Interface = {
        access = "readWrite",
        type = "string",
        max = "256",
        pathRef = true,
        targetParent = "Device.IP.Interface.{i}.",
        description = "Interface of the mwan policy",
        default = "",
      },
      PolicyName = {
        access = "readOnly",
        type = "string",
        description = "Name of the mwan policy",
      }
    }
  }
}

local commitapply, mapper, register, resolve = commitapply, mapper, register, resolve
local uciHelper = mapper("ucihelper")
local getFromUci = uciHelper.get_from_uci
local setOnUci = uciHelper.set_on_uci
local generateKey = uciHelper.generate_key
local forEachOnUci = uciHelper.foreach_on_uci
local network = require "transformer.shared.common.network"
local mwanBinding = { config = "mwan" }
local configChanged

local function getUciValue(key, option, default)
  mwanBinding.sectionname = key
  mwanBinding.option = option
  mwanBinding.default = default
  return getFromUci(mwanBinding)
end

local function setUciValue(key, option, value)
  mwanBinding.sectionname = key
  mwanBinding.option = option
  setOnUci(mwanBinding, value, commitapply)
  configChanged = true
end

Device_X_000E50_MWANPolicy_i_.entries = function()
  local entries = {}
  mwanBinding.sectionname = "policy"
  forEachOnUci(mwanBinding, function(s)
    entries[#entries + 1]  = s[".name"]
  end)
  return entries
end

Device_X_000E50_MWANPolicy_i_.get = {
  Interface = function(mapping, param, key)
    local interface = getUciValue(key, "interface")
    return interface and resolve("Device.IP.Interface.{i}.", interface) or ""
  end,
  PolicyName = function(mapping, param, key)
    return key
  end
}

Device_X_000E50_MWANPolicy_i_.set = {
  Interface = function(mapping, param, value, key)
    local rc
    rc, value = pcall(tokey, value, "Device.IP.Interface.{i}.")
    if not rc or not value then
      return nil, "Invalid value"
    end
    setUciValue(key, "interface", value)
  end
}

Device_X_000E50_MWANPolicy_i_.add = function(mapping)
  local sectionName = network.getNewSection(mwanBinding.config, "policy")
  setUciValue(sectionName, nil, "policy")
  configChanged = true
  return sectionName
end

Device_X_000E50_MWANPolicy_i_.delete = function(mapping, key)
  mwanBinding.sectionname = key
  mwanBinding.option = nil
  uciHelper.delete_on_uci(mwanBinding, commitapply)
  configChanged = true
  return true
end

Device_X_000E50_MWANPolicy_i_.commit = function()
  if configChanged then
    uciHelper.commit(mwanBinding)
    configChanged = false
  end
end

Device_X_000E50_MWANPolicy_i_.revert = function()
  if configChanged then
    uciHelper.revert(mwanBinding)
    configChanged = false
  end
end

register(Device_X_000E50_MWANPolicy_i_)
