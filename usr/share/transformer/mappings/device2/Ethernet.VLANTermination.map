-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_Ethernet_VLANTermination_i_ = {
  objectType = {
    name = "Device.Ethernet.VLANTermination.{i}.",
    access = "readWrite",
    numEntriesParameter = "VLANTerminationNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Up",
          "Down",
          "Unknown",
          "Dormant",
          "NotPresent",
          "LowerLayerDown",
          "Error",
        },
        default = "Down",
      },
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
        max  = "64",
      },
      Name = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      LowerLayers = {
        access = "readWrite",
        list = true,
        max = "1024",
        type = "string",
        pathRef = true,
        default = "",
      },
      VLANID = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1",
            max = "4094",
          },
        },
      },
--[[ TODO:
      TPID = {
        access = "readWrite",
        type = "string",
        max = "64",
      },
      LastChange = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
--]]
    }
  },
  aliasDefault = "Name",
}

local nwmodel = require "transformer.shared.models.device2.network"
local VLAN = nwmodel.register("VLAN", Device_Ethernet_VLANTermination_i_.objectType.name)
local model
local uciobject = require "transformer.shared.uciobject"
local lowerlayer = require "transformer.shared.device2.lowerlayer"

local nwCommon = mapper("nwcommon")
local getIntfInfo = nwCommon.getIntfInfo
local uciHelper = mapper("ucihelper")
local get_from_uci = uciHelper.get_from_uci
local commitApply = commitapply
local changedConfig = {}
local vlanDeviceBinding = { config = "network"}
local gponl3Binding = { config = "gponl3"}

local vlanStatus = {
  ["up"] = "Up",
  ["down"] = "Down",
  ["unknown"] = "Unknown",
  ["dormant"] = "Dormant",
  ["notpresent"] = "NotPresent",
  ["lowerlayerdown"] = "LowerLayerDown",
}

local function getFromUci(key, param, default)
  local ucikey = model:getUciKey(key)
  vlanDeviceBinding.sectionname = ucikey
  vlanDeviceBinding.option = param
  vlanDeviceBinding.default = default
  return get_from_uci(vlanDeviceBinding)
end

local function getFromUciForGpon(key, param, default)
  local ucikey = model:getUciKey(key)
  gponl3Binding.sectionname = ucikey
  gponl3Binding.option = param
  gponl3Binding.default = default
  return get_from_uci(gponl3Binding)
end

Device_Ethernet_VLANTermination_i_.entries = function(mapping)
  model = nwmodel.load()
  return model:getKeys(VLAN)
end

Device_Ethernet_VLANTermination_i_.add = function()
  model = nwmodel:load()
  local key = uciobject.create("network", "device", "dev_dyn", {
    dev2_dynamic = "1",
    name = uciobject.GeneratedKey,
    type = "8021q",
  }, commitapply)
  -- we must add the new object to the model make Alias generation
  -- work properly.
  key = "vlan:"..key
  model:add(VLAN, key)
  -- but the model is now no longer valid
  nwmodel.invalidate()
  return key
end

Device_Ethernet_VLANTermination_i_.delete = function(_, key)
  local ucikey = model:getUciKey(key)
  if getFromUci(ucikey, "dev2_dynamic")=="1" then
    uciobject.delete("network", ucikey, commitapply)
    return true
  end
  return nil, "predefined object can not be deleted"
end

local function getEthVlanStatus(key)
  local status = getIntfInfo(model:getDevice(key),"operstate")
  if status and status ~= "" then
    return vlanStatus[status]
  end
  return "Down"
end

local function getEthVlanLowerLayer(key)
  return model:getLowerLayersResolved(key, resolve)
end

Device_Ethernet_VLANTermination_i_.get = {
  Enable = function(mapping, param, key)
    local vid = model:get(key).vid
    if vid then
      return "1"
    else
      return getFromUci(key, "enabled", "1")
    end
  end,

  Status = function(mapping, param, key)
    return getEthVlanStatus(key)
  end,

  Name = function(mapping, param, key)
    return model:getName(key)
  end,

  LowerLayers = function(mapping, param, key)
    return getEthVlanLowerLayer(key)
  end,

  VLANID = function(mapping, param, key)
    local vid = model:get(key).vid
    local univlan = getFromUciForGpon(key, "univlan")
    if vid then
      return vid
    elseif univlan ~= "" then
      return univlan
    else
      return getFromUci(key, "vid", "1")
    end
  end,
}

local function setUciParam(key, option, value)
  vlanDeviceBinding.sectionname = model:getUciKey(key)
  vlanDeviceBinding.option = option
  uciHelper.set_on_uci(vlanDeviceBinding, value, commitApply)
  changedConfig[vlanDeviceBinding.config] = true
end

local function setUciParamForGpon(key, option, value)
  gponl3Binding.sectionname = model:getUciKey(key)
  gponl3Binding.option = option
  uciHelper.set_on_uci(gponl3Binding, value, commitApply)
  changedConfig[gponl3Binding.config] = true
end

Device_Ethernet_VLANTermination_i_.set = {
  Enable = function(mapping, param, value, key)
    local vid = model:get(key).vid
    if not vid then
      setUciParam(key, "enabled", value)
    elseif value~='1' then
      return nil, "this vlan can not be disabled"
    end
  end,

  VLANID = function(mapping, param, value, key)
    local univlan = getFromUciForGpon(key,"univlan")
    local vid = model:get(key).vid
    if univlan ~= "" then
      setUciParamForGpon(key, "univlan", value)
    elseif not vid then
      setUciParam(key, "vid", value)
    elseif value~=vid then
      return nil, "this vlan can not change its vlan id"
    end
  end,

  LowerLayers = function(_, _, value, key)
    return lowerlayer.setLowerLayer(model, key, value,
      "Device.Ethernet.Link.{i}."
    )
  end
}

Device_Ethernet_VLANTermination_i_.commit = function()
  uciobject.commit()
  lowerlayer.commit()
  for config in pairs(changedConfig) do
    uciHelper.commit{config=config}
  end
  changedConfig = {}
end

Device_Ethernet_VLANTermination_i_.revert = function()
  uciobject.revert()
  lowerlayer.revert()
  nwmodel.invalidate()
  for config in pairs(changedConfig) do
    uciHelper.commit{config=config}
  end
  changedConfig = {}
end

register(Device_Ethernet_VLANTermination_i_)
