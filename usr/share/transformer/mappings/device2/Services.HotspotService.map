-- Manually generated
local Device_Services_Multi_ = {
  objectType = {
    name = "Device.Services.#VENDOR.",
    access = "readOnly",
    description = "To get or set the parameters of global hotspot service",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
        default = "true",
        description = "Global enable or disable hotspot service",
      },
    }
    -- WlanGWNumberOfEntries (Automatically generated by transformer)
  }
}

local mapper = mapper
local uciHelper = mapper("ucihelper")
local greBinding = { config = "gre_hotspotd", sectionname = "global", option = "enable" }
local configChanged = false

Device_Services_Multi_.get = function()
  local enable = uciHelper.get_from_uci(greBinding)
  return enable == "0" and "0" or "1"
end

Device_Services_Multi_.set = function(mapping, param, value)
  uciHelper.set_on_uci(greBinding, value, commitapply)
  configChanged = true
end

Device_Services_Multi_.commit = function()
  if configChanged then
    uciHelper.commit(greBinding)
  end
  configChanged = false
end

Device_Services_Multi_.revert = function()
  if configChanged then
    uciHelper.revert(greBinding)
  end
  configChanged = false
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Device_Services_Multi_, "#VENDOR", { "X_BELGACOM_HotspotService", "X_000E50_HotspotService" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end
