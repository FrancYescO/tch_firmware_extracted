-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_Bridging_Bridge_i_VLAN_i_ = {
  objectType = {
    name = "Device.Bridging.Bridge.{i}.VLAN.{i}.",
    access = "readOnly", -- readWrite not supported
    numEntriesParameter = "VLANNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readOnly", -- readWrite not supported
        type = "boolean",
        default = "false",
      },
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
      },
      Name = {
        access = "readWrite",
        type = "string",
        max = "64",
        default = "",
      },
      VLANID = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "1",
            max = "4094",
          },
        },
      },
    }
  }
}

local mapper = mapper
local uciHelper = mapper("ucihelper")
local getFromUci = uciHelper.get_from_uci
local setOnUci = uciHelper.set_on_uci
local forEachOnUci = uciHelper.foreach_on_uci
local ubusConnection = mapper("ubus").connect()

local networkBinding = { config = "network" }
local commitApply = commitapply
local isConfigChanged = false

local paramMap = {
  ["Name"]   = "name",
  ["VLANID"] = "vid",
}

-- The entries function is formed based on the bridge members which is "8021q" type
Device_Bridging_Bridge_i_VLAN_i_.entries = function(mapping, parentKey)
  local bridgeVlanEntries = {}
  local data = ubusConnection:call("network.device" , "status",  { name = parentKey })
  local members = data and data['bridge-members'] or {}
  networkBinding.sectionname = "device"
  for _,k in ipairs(members) do
    forEachOnUci(networkBinding, function(s)
      if s.name == k and s.type == "8021q" then
        bridgeVlanEntries[#bridgeVlanEntries + 1] = s['.name']
      end
    end)
  end
  return bridgeVlanEntries
end

local function setVlanParam(mapping, param, value, key)
  networkBinding.sectionname = key
  networkBinding.option = paramMap[param]
  setOnUci(networkBinding, value, commitApply)
  isConfigChanged = true
end

local function setBridgeVlanName(mapping, param, value, key, parentKey)
  -- set the name of the specific vlan
  networkBinding.sectionname = key
  networkBinding.option = "name"
  local getVlanName = getFromUci(networkBinding)
  local interface
  setVlanParam(mapping, param, value, key)
  networkBinding.sectionname = "interface"
  forEachOnUci(networkBinding, function(s)
    if parentKey == s.ifname then
      interface = s[".name"]
      return false
    end
  end)
  networkBinding.sectionname = interface
  networkBinding.option = "ifname"
  networkBinding.state = false
  local devices  = getFromUci(networkBinding)
  local setVlanValue = devices:gsub(getVlanName, value)
  -- set the ifname value of the specific bridge
  setOnUci(networkBinding, setVlanValue, commitApply)
  isConfigChanged = true
end

Device_Bridging_Bridge_i_VLAN_i_.get = function(mapping, param, key)
  if param == "Enable" then
    return "1"
  else
    networkBinding.sectionname = key
    networkBinding.option = paramMap[param]
    if param == "VID" then
      networkBinding.default = "1"
    end
    return getFromUci(networkBinding)
  end
end

Device_Bridging_Bridge_i_VLAN_i_.getall = function(mapping, key)
  networkBinding.sectionname = key
  local bridgeVlanValues = uciHelper.getall_from_uci(networkBinding)
  return {
    Enable = "1",
    Name = bridgeVlanValues["name"],
    VLANID = bridgeVlanValues["vid"],
  }
end

Device_Bridging_Bridge_i_VLAN_i_.set = {
  Name = setBridgeVlanName,
  VLANID = setVlanParam,
}

Device_Bridging_Bridge_i_VLAN_i_.commit = function()
  if isConfigChanged then
    uciHelper.commit(networkBinding)
    isConfigChanged = false
  end
end

Device_Bridging_Bridge_i_VLAN_i_.revert = function()
  if isConfigChanged then
    uciHelper.revert(networkBinding)
    isConfigChanged = false
  end
end

register(Device_Bridging_Bridge_i_VLAN_i_)
