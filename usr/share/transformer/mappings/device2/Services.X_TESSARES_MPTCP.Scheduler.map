-- Manually generated
local Device_Services_X_TESSARES_MPTCP_Scheduler_ = {
  objectType = {
    name = "Device.Services.X_TESSARES_MPTCP.Scheduler.",
    description = "The scheduler is selected with the UCI config file, and updated with our init.d script",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Mode = {
        access = "readWrite",
        type = "string",
        default = "priority",
        description = "Scheduler mode to be used",
      },
    }
  }
}

local mproxyBinding = { config = "mproxy", sectionname = "scheduler", option = "mode" }
local uciHelper = mapper("ucihelper")
local isConfigChanged = false

Device_Services_X_TESSARES_MPTCP_Scheduler_.get = {
  Mode = function()
    local mode = uciHelper.get_from_uci(mproxyBinding)
    return mode ~= "" and mode or "priority"
  end
}

Device_Services_X_TESSARES_MPTCP_Scheduler_.set = {
  Mode = function(mapping, param, value)
    uciHelper.set_on_uci(mproxyBinding, value, commitapply)
    isConfigChanged = true
  end
}

Device_Services_X_TESSARES_MPTCP_Scheduler_.commit = function()
  if isConfigChanged then
    uciHelper.commit(mproxyBinding)
    isConfigChanged = false
  end
end

Device_Services_X_TESSARES_MPTCP_Scheduler_.revert = function()
  if isConfigChanged then
    uciHelper.revert(mproxyBinding)
    isConfigChanged = false
  end
end

register(Device_Services_X_TESSARES_MPTCP_Scheduler_)
