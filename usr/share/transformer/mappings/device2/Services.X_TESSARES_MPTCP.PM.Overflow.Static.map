-- Manually generated
local Device_Services_X_TESSARES_MPTCP_PM_Overflow_Static_ = {
  objectType = {
    name = "Device.Services.X_TESSARES_MPTCP.PM.Overflow.Static.",
    description = "All the MPTCP related path overflow static info is updated",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      EnableThresholdUp = {
        access = "readWrite",
        type = "unsignedInt",
        default = "90",
        description = "Upload threshold for Enabling Slave subflows expressed in percentage of the nominal upload speed3 of the Master Interface ",
      },
      EnableThresholdDown = {
        access = "readWrite",
        type = "unsignedInt",
        default = "90",
        description = "Download threshold for enabling slave subflows expressed in percentage of the nominal download speed3 of the master interface",
      },
      DisableThresholdUp = {
        access = "readWrite",
        type = "unsignedInt",
        default = "80",
        description = "Upload threshold for disabling slave subflows expressed in percentage of the nominal upload speed3 of the master interface",
      },
      DisableThresholdDown = {
        access = "readWrite",
        type = "unsignedInt",
        default = "80",
        description = "Download for disabling slave subflows expressed in percentage of the nominal download speed3 of the master interface",
      },
      EnableThresholdUpBitRate = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Threshold (in kbps) configured for enabling slave subflows. The value is computed based on a local information (nominal upload speed) multiplied by the value of EnableThresholdUp",
      },
      EnableThresholdDownBitRate = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Threshold (in kbps) configured for enabling slave subflows. The value is computed based on a local information (nominal download speed) multiplied by the value of EnableThresholdDown",
      },
      DisableThresholdUpBitRate = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Threshold (in kbps) configured for disabling slave subflows. The value is computed based on a local information (nominal upload speed) multiplied by the value of DisableThresholdUp",
      },
      DisableThresholdDownBitRate = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Threshold (in kbps) configured for disabling slave subflows. The value is computed based on a local information (nominal download speed) multiplied by the value of DisableThresholdDown",
      },
    }
  }
}

local uciHelper = mapper("ucihelper")
local overFlowSectionName = uciHelper.get_from_uci({ config = "mproxy", sectionname = "pathmanager", option = "mode" })
local mproxyBinding = { config = "mproxy", sectionname = overFlowSectionName }
local configChanged = false

local paramMap = {
  ["EnableThresholdUp"] = "enable_up",
  ["EnableThresholdDown"] = "enable_down",
  ["DisableThresholdUp"] = "disable_up",
  ["DisableThresholdDown"] = "disable_down",
  ["EnableThresholdUpBitRate"] = "enable_up_cp_br",
  ["EnableThresholdDownBitRate"] = "enable_down_cp_br",
  ["DisableThresholdUpBitRate"] = "disable_up_cp_br",
  ["DisableThresholdDownBitRate"] = "disable_down_cp_br",
}

local defaultValuesMap = {
  ["EnableThresholdUpBitRate"] = "0",
  ["EnableThresholdDownBitRate"] = "0",
  ["DisableThresholdUpBitRate"] = "0",
  ["DisableThresholdDownBitRate"] = "0",
}

local parameterList = Device_Services_X_TESSARES_MPTCP_PM_Overflow_Static_.objectType.parameters
for parameter, value in pairs(parameterList) do
  local default = value["default"]
  if default then
    defaultValuesMap[parameter] = default
  end
end

local function getUciValue(mapping, param)
  mproxyBinding.option = paramMap[param]
  mproxyBinding.default = defaultValuesMap[param]
  return uciHelper.get_from_uci(mproxyBinding)
end

local function setUciValue(mapping, param, value)
  mproxyBinding.option = paramMap[param]
  uciHelper.set_on_uci(mproxyBinding, value, commitapply)
  configChanged = true
end

Device_Services_X_TESSARES_MPTCP_PM_Overflow_Static_.get = getUciValue

Device_Services_X_TESSARES_MPTCP_PM_Overflow_Static_.getall = function()
  local allValues = uciHelper.getall_from_uci(mproxyBinding)
  return {
    EnableThresholdUp = allValues["enable_up"] or defaultValuesMap["EnableThresholdUp"],
    EnableThresholdDown = allValues["enable_down"] or defaultValuesMap["EnableThresholdDown"],
    DisableThresholdUp = allValues["disable_up"] or defaultValuesMap["DisableThresholdUp"],
    DisableThresholdDown  = allValues["disable_down"] or defaultValuesMap["DisableThresholdDown"],
    EnableThresholdUpBitRate   = allValues["enable_up_cp_br"] or defaultValuesMap["EnableThresholdUpBitRate"],
    EnableThresholdDownBitRate = allValues["enable_down_cp_br"] or defaultValuesMap["EnableThresholdDownBitRate"],
    DisableThresholdUpBitRate = allValues["disable_up_cp_br"] or defaultValuesMap["DisableThresholdUpBitRate"],
    DisableThresholdDownBitRate = allValues["disable_down_cp_br"] or defaultValuesMap["DisableThresholdDownBitRate"],
  }
end

Device_Services_X_TESSARES_MPTCP_PM_Overflow_Static_.set = setUciValue

Device_Services_X_TESSARES_MPTCP_PM_Overflow_Static_.commit = function()
  if configChanged then
    uciHelper.commit(mproxyBinding)
    configChanged = false
  end
end

Device_Services_X_TESSARES_MPTCP_PM_Overflow_Static_.revert = function()
  if configChanged then
    uciHelper.revert(mproxyBinding)
    configChanged = false
  end
end

register(Device_Services_X_TESSARES_MPTCP_PM_Overflow_Static_)
