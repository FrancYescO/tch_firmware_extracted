-- Automatically generated from Device:2.2
-- using generator version 2.1
local Device_PPP_Interface_i_IPv6CP_ = {
  objectType = {
    name = "Device.PPP.Interface.{i}.IPv6CP.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      LocalInterfaceIdentifier = {
        access = "readOnly",
        type = "string",
      },
--[[ TODO: Support is not available in system at present
      RemoteInterfaceIdentifier = {
        access = "readOnly",
        type = "string",
      },
]]
    }
  }
}

local nwmodel = require "transformer.shared.models.device2.network"

local ubus = mapper("ubus").connect()

Device_PPP_Interface_i_IPv6CP_.get = {
  LocalInterfaceIdentifier = function(mapping, param, key)
    local model = nwmodel.load()
    local intf = model:getInterface(key)
    local ubusStatus = ubus:call("network.interface." .. intf, "status", {})
    if ubusStatus and ubusStatus["ipv6-address"] and ubusStatus["ipv6-address"][1] then
      return ubusStatus["ipv6-address"][1]["address"] or ""
    end
    return ""
  end
}

register(Device_PPP_Interface_i_IPv6CP_)
