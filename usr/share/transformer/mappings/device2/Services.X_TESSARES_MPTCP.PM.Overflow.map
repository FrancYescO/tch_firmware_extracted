-- Manually generated
local Device_Services_X_TESSARES_MPTCP_PM_Overflow_ = {
  objectType = {
    name = "Device.Services.X_TESSARES_MPTCP.PM.Overflow.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = 1,
    parameters = {
      Mode = {
        access = "readWrite",
        type = "string",
        max = "256",
        default = "static",
      },
      EnableThresholdUp = {
        access = "readWrite",
        type = "unsignedInt",
        default = "90",
      },
      EnableThresholdDown = {
        access = "readWrite",
        type = "unsignedInt",
        default = "90",
      },
      DisableThresholdUp = {
        access = "readWrite",
        type = "unsignedInt",
        default = "80",
      },
      DisableThresholdDown = {
        access = "readWrite",
        type = "unsignedInt",
        default = "80",
      },
      EnableThresholdUpBitRate = {
        access = "readOnly",
        type = "unsignedInt",
      },
      EnableThresholdDownBitRate = {
        access = "readOnly",
        type = "unsignedInt",
      },
      DisableThresholdUpBitRate = {
        access = "readOnly",
        type = "unsignedInt",
      },
      DisableThresholdDownBitRate = {
        access = "readOnly",
        type = "unsignedInt",
      },
    }
  }
}

local uciHelper = mapper("ucihelper")
local mproxyBinding = { config = "mproxy", sectionname = "overflow" }
local isConfigChanged = false

local paramMap = {
  ["Mode"]              = "mode",
  ["EnableThresholdUp"] = "enable_up",
  ["EnableThresholdDown"] = "enable_down",
  ["DisableThresholdUp"] = "disable_up",
  ["DisableThresholdDown"] = "disable_down",
  ["EnableThresholdUpBitRate"] = "enable_up_cp_br",
  ["EnableThresholdDownBitRate"] = "enable_down_cp_br",
  ["DisableThresholdUpBitRate"] = "disable_up_cp_br",
  ["DisableThresholdDownBitRate"] = "disable_down_cp_br",
}

local function getUciValue(param, default)
  mproxyBinding.option = paramMap[param]
  mproxyBinding.default = default
  return uciHelper.get_from_uci(mproxyBinding)
end

local function setUciValue(mapping, param, value)
  mproxyBinding.option = paramMap[param]
  uciHelper.set_on_uci(mproxyBinding, value, commitapply)
  isConfigChanged = true
end

Device_Services_X_TESSARES_MPTCP_PM_Overflow_.entries = function()
  local overFlowSectionName = uciHelper.get_from_uci({ config = "mproxy", sectionname = "pathmanager", option = "mode" })
  if overFlowSectionName ~= "overflow" then
    return {}
  end
  return { "1" }
end

Device_Services_X_TESSARES_MPTCP_PM_Overflow_.get = function(mapping, param)
  if param == "Mode" then
    return getUciValue(param, "static")
  elseif param == "EnableThresholdUp" or param == "EnableThresholdDown" then
    return getUciValue(param, "90")
  elseif param == "DisableThresholdUp" or param == "DisableThresholdDown" then
    return getUciValue(param, "80")
  else
    return getUciValue(param, "0")
  end
end

Device_Services_X_TESSARES_MPTCP_PM_Overflow_.set = setUciValue

Device_Services_X_TESSARES_MPTCP_PM_Overflow_.commit = function()
  if isConfigChanged then
    uciHelper.commit(mproxyBinding)
    isConfigChanged = false
  end
end

Device_Services_X_TESSARES_MPTCP_PM_Overflow_.revert = function()
  if isConfigChanged then
    uciHelper.revert(mproxyBinding)
    isConfigChanged = false
  end
end

register(Device_Services_X_TESSARES_MPTCP_PM_Overflow_)
