-- Manually generated
local Device_Services_X_TESSARES_MPTCP_PM_Overflow_ = {
  objectType = {
    name = "Device.Services.X_TESSARES_MPTCP.PM.Overflow.",
    description = "Parameters in the section PM overflow is configured",
    access = "readOnly",
    minEntries = 0,
    maxEntries = 1,
    parameters = {
      Mode = {
        access = "readWrite",
        type = "string",
        max = "256",
        enumeration = {
          "static",
          "dynamic",
        },
        default = "static",
        description = "Overflow Path Manager mode to use",
      },
      Coefficient = {
        access = "readWrite",
        type = "unsignedInt",
        default = "7",
        description = "Defines how the smooth bandwidth is computed",
      },
      Shift = {
        access = "readWrite",
        type = "unsignedInt",
        default = "3",
        description = "Defines the shifts in bandwidth",
      },
      UpdatePeriod = {
        access = "readWrite",
        type = "unsignedInt",
        default = "250",
        description = "Time interval between two bandwidth measurements in milliseconds",
      },
    }
  }
}

local uciHelper = mapper("ucihelper")
local mproxyBinding = { config = "mproxy", sectionname = "overflow" }
local configChanged = false

local paramMap = {
  ["Mode"]         = "mode",
  ["Coefficient"]  = "coefficient",
  ["Shift"]        = "shift",
  ["UpdatePeriod"] = "update_period",
}

local defaultValuesMap = {}
local parameterList = Device_Services_X_TESSARES_MPTCP_PM_Overflow_.objectType.parameters
for parameter, value in pairs(parameterList) do
  local default = value["default"]
  if default then
    defaultValuesMap[parameter] = default
  end
end

local function getUciValue(mapping, param)
  mproxyBinding.option = paramMap[param]
  mproxyBinding.default = defaultValuesMap[param]
  return uciHelper.get_from_uci(mproxyBinding)
end

local function setUciValue(mapping, param, value)
  mproxyBinding.option = paramMap[param]
  uciHelper.set_on_uci(mproxyBinding, value, commitapply)
  configChanged = true
end

Device_Services_X_TESSARES_MPTCP_PM_Overflow_.entries = function()
  local overFlowSectionName = uciHelper.get_from_uci({ config = "mproxy", sectionname = "pathmanager", option = "mode" })
  if overFlowSectionName ~= "overflow" then
    return {}
  end
  return { "1" }
end

Device_Services_X_TESSARES_MPTCP_PM_Overflow_.get = getUciValue

Device_Services_X_TESSARES_MPTCP_PM_Overflow_.set = setUciValue

Device_Services_X_TESSARES_MPTCP_PM_Overflow_.getall = function()
  local allValues = uciHelper.getall_from_uci(mproxyBinding)
  return {
    Mode         = allValues["mode"] or defaultValuesMap["Mode"],
    Coefficient  = allValues["coefficient"] or defaultValuesMap["Coefficient"],
    Shift        = allValues["shift"] or defaultValuesMap["Shift"],
    UpdatePeriod = allValues["update_period"] or defaultValuesMap["UpdatePeriod"]
  }
end

Device_Services_X_TESSARES_MPTCP_PM_Overflow_.commit = function()
  if configChanged then
    uciHelper.commit(mproxyBinding)
    configChanged = false
  end
end

Device_Services_X_TESSARES_MPTCP_PM_Overflow_.revert = function()
  if configChanged then
    uciHelper.revert(mproxyBinding)
    configChanged = false
  end
end

register(Device_Services_X_TESSARES_MPTCP_PM_Overflow_)
