local mobiled_mapping_helper = require("transformer.shared.mobiled_helper")

local obj = {
	objectType = {
		name = 'Device.Cellular.Interface.{i}.X_000E50_LTE_Debug.SIM_Get.',
		access = 'readOnly',
		minEntries = 1,
		maxEntries = 1,
		parameters = {
			IMSI = {
				access = "readOnly",
				type = "string"
			},
			ICCID = {
				access = "readOnly",
				type = "string"
			},
			SIM_State = {
				access = "readOnly",
				type = "string"
			},
		}
	}
}

local conn = mapper("ubus").connect()

function obj.getall(_, key)
	local result = {}
	setmetatable(result, { __index = function() return "" end })

	local data = mobiled_mapping_helper.getUbusInfoUseCellularInterfaceKey(conn, "mobiled.sim", "get", key)
	if data then
		result.IMSI = data.imsi
		result.ICCID = data.iccid
		result.SIM_State = data.sim_state
	end
	return result
end

function obj.get(_, paramName, key)
	return obj.getall(_, key)[paramName]
end

register(obj)

local Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_ForbiddenPLMN = {
	objectType = {
		name = 'Device.Cellular.Interface.{i}.X_000E50_LTE_Debug.SIM_Get.Forbidden_PLMN.{i}.',
		access = 'readOnly',
		numEntriesParameter = "ForbiddenPLMNNumberOfEntries",
		minEntries = 0,
		maxEntries = math.huge,
		parameters = {
			MCC = {
				access = "readOnly",
				type = "string"
			},
			MNC = {
				 access = "readOnly",
				 type = "string"
			},
			Description = {
				access = "readOnly",
				type = "string"
			},
		}
	}
}

function Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_ForbiddenPLMN.getall(_, key, parentKey)
	local result = {}
	setmetatable(result, { __index = function() return "" end })

	key = tonumber(key)
	local data = mobiled_mapping_helper.getUbusInfoUseCellularInterfaceKey(conn,  "mobiled.sim", "get", parentKey)
	if data and data.forbidden_plmn and data.forbidden_plmn[key] then
		local forbidden_plmn = data.forbidden_plmn[key]
		result.MCC = forbidden_plmn.mcc
		result.MNC = forbidden_plmn.mnc
		result.Description = forbidden_plmn.description
	end
    return result
end

function Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_ForbiddenPLMN.get(mapping, paramName, key, parentKey)
	return Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_ForbiddenPLMN.getall(mapping, key, parentKey)[paramName] or ""
end

function Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_ForbiddenPLMN.entries(_, parentKey)
	local data = mobiled_mapping_helper.getUbusInfoUseCellularInterfaceKey(conn,  "mobiled.sim", "get", parentKey)
	local forbidden_plmn_indexes = {}

	if type(data.forbidden_plmn) == "table" then
		for forbidden_plmn_index in ipairs(data.forbidden_plmn) do
			table.insert(forbidden_plmn_indexes, tostring(forbidden_plmn_index))
		end
	end
	return forbidden_plmn_indexes
end

register(Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_ForbiddenPLMN)

local Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_PreferredPLMN = {
	objectType = {
		name = 'Device.Cellular.Interface.{i}.X_000E50_LTE_Debug.SIM_Get.Preferred_PLMN.{i}.',
		access = 'readOnly',
		numEntriesParameter = "PreferredPLMNNumberOfEntries",
		minEntries = 0,
		maxEntries = math.huge,
		parameters = {
			MCC = {
				access = "readOnly",
				type = "string"
			},
			MNC = {
				 access = "readOnly",
				 type = "string"
			},
			Description = {
				access = "readOnly",
				type = "string"
			},
		}
	}
}

function Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_PreferredPLMN.getall(_, key, parentKey)
	local result = {}
	setmetatable(result, { __index = function() return "" end })

	key = tonumber(key)
	local data = mobiled_mapping_helper.getUbusInfoUseCellularInterfaceKey(conn,  "mobiled.sim", "get", parentKey)
	if data and data.preferred_plmn and data.preferred_plmn[key] then
		local preferred_plmn = data.preferred_plmn[key]
		result.MCC = preferred_plmn.mcc
		result.MNC = preferred_plmn.mnc
		result.Description = preferred_plmn.description
	end
    return result
end

function Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_PreferredPLMN.get(mapping, paramName, key, parentKey)
	return Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_PreferredPLMN.getall(mapping, key, parentKey)[paramName] or ""
end

function Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_PreferredPLMN.entries(_, parentKey)
	local data = mobiled_mapping_helper.getUbusInfoUseCellularInterfaceKey(conn,  "mobiled.sim", "get", parentKey)
	local preferred_plmn_indexes = {}

	if type(data.preferred_plmn) == "table" then
		for preferred_plmn_index in ipairs(data.preferred_plmn) do
			table.insert(preferred_plmn_indexes, tostring(preferred_plmn_index))
		end
	end
	return preferred_plmn_indexes
end

register(Device_Cellular_Interface_i_X__000E50_LTE_Debug_SIM_Get_PreferredPLMN)

local X_000E50_Debug_SIM_Get_ForbiddenPLMN_Parent = {
  objectType = {
    name = "Device.Cellular.Interface.{i}.X_000E50_LTE_Debug.SIM_Get.Forbidden_PLMN.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      -- No parameters as it is the top level to add the content of different ubus commands to
    }
  }
}

register(X_000E50_Debug_SIM_Get_ForbiddenPLMN_Parent)

local X_000E50_Debug_SIM_Get_PreferredPLMN_Parent = {
  objectType = {
    name = "Device.Cellular.Interface.{i}.X_000E50_LTE_Debug.SIM_Get.Preferred_PLMN.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      -- No parameters as it is the top level to add the content of different ubus commands to
    }
  }
}

register(X_000E50_Debug_SIM_Get_PreferredPLMN_Parent)

