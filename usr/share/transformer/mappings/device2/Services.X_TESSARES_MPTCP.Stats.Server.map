-- Manually generated
local Device_Services_X_TESSARES_MPTCP_Stats_ = {
  objectType = {
    name = "Device.Services.X_TESSARES_MPTCP.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
    }
  }
}

register(Device_Services_X_TESSARES_MPTCP_Stats_)

local Device_Services_X_TESSARES_MPTCP_Stats_Server_ = {
  objectType = {
    name = "Device.Services.X_TESSARES_MPTCP.Stats.Server.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      ServerAddress = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      Export = {
        access = "readWrite",
        type = "boolean",
      },
      RefreshRate = {
        access = "readWrite",
        type = "int",
        default = "1440",
      },
      Username = {
        access = "readWrite",
        type = "string",
        max = "256",
        default = "anonymous",
      },
      Password = {
        access = "readWrite",
        hidden = true,
        type = "string",
        max = "256",
      },
    }
  }
}

local mproxyBinding = { config = "mproxy", sectionname = "stats" }
local uciHelper = mapper("ucihelper")
local isConfigChanged = false

local paramMap = {
  ["ServerAddress"]  = "server",
  ["Export"] = "export",
  ["RefreshRate"] = "rate",
  ["Username"]  = "username",
  ["Password"]  = "password",
}

local function getUciValue(mapping, param)
  mproxyBinding.option = paramMap[param]
  if param == "RefreshRate" then
    mproxyBinding.default = "1440"
  elseif param == "Username" then
    mproxyBinding.default = "anonymous"
  else
    mproxyBinding.default = ""
  end
  return uciHelper.get_from_uci(mproxyBinding)
end

local function setUciValue(mapping, param, value)
  mproxyBinding.option = paramMap[param]
  uciHelper.set_on_uci(mproxyBinding, value, commitapply)
  isConfigChanged = true
end

Device_Services_X_TESSARES_MPTCP_Stats_Server_.get = getUciValue

Device_Services_X_TESSARES_MPTCP_Stats_Server_.set = setUciValue

Device_Services_X_TESSARES_MPTCP_Stats_Server_.commit = function()
  if isConfigChanged then
    uciHelper.commit(mproxyBinding)
    isConfigChanged = false
  end
end

Device_Services_X_TESSARES_MPTCP_Stats_Server_.revert = function()
  if isConfigChanged then
    uciHelper.revert(mproxyBinding)
    isConfigChanged = false
  end
end

register(Device_Services_X_TESSARES_MPTCP_Stats_Server_)
