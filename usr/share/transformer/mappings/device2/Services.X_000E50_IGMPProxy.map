-- Manually generated

local Device_Services_X_000E50_IGMPProxy_ = {
  objectType = {
    name = "Device.Services.X_000E50_IGMPProxy.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "Configure the wan interface of igmp proxy",
    parameters = {
      WanInterface = {
        access = "readWrite",
        type = "string",
        max = "256",
        pathRef = true,
        targetParent = "Device.IP.Interface.{i}.",
        description = "Upstream interface of IGMP proxy",
      },
    }
  }
}

local commitapply, mapper, register, resolve = commitapply, mapper, register, resolve
local uciHelper = mapper("ucihelper")
local setOnUci = uciHelper.set_on_uci
local forEachOnUci = uciHelper.foreach_on_uci
local configChanged
local igmpProxyBinding = { config = "igmpproxy" }

local function setUciValue(key, option, value)
  igmpProxyBinding.sectionname = key
  igmpProxyBinding.option = option
  setOnUci(igmpProxyBinding, value, commitapply)
  configChanged = true
end

Device_Services_X_000E50_IGMPProxy_.get = {
  WanInterface = function(mapping, param)
    local interface
    igmpProxyBinding.sectionname = "interface"
    forEachOnUci(igmpProxyBinding, function(s)
      if s.state == "upstream" then
	interface = s[".name"]
	return false
      end
    end)
    return interface and resolve("Device.IP.Interface.{i}.", interface) or ""
  end,
}

Device_Services_X_000E50_IGMPProxy_.set = {
  WanInterface = function(mapping, param, value)

    local wanInterface = {}
    local rc
    igmpProxyBinding.sectionname = "interface"
    forEachOnUci(igmpProxyBinding, function(s)
      if s.state == "upstream" then
        wanInterface = s
        return false
      end
    end)

    rc, value = pcall(tokey, value, "Device.IP.Interface.{i}.")
    if not rc then
      return nil, "Invalid value"
    end
    setUciValue(value, nil, "interface")
    setUciValue(value, state, "upstream")
    if next(wanInterface) then
      for oldOption, oldValue in pairs(wanInterface) do
        if not string.match(oldOption, "^%.") then
          setUciValue(value, oldOption, oldValue)
        end
      end

      igmpProxyBinding.sectionname = wanInterface[".name"]
      igmpProxyBinding.option = nil
      uciHelper.delete_on_uci(igmpProxyBinding, commitapply)
    end
  end
}

Device_Services_X_000E50_IGMPProxy_.commit = function()
  if configChanged then
    uciHelper.commit(igmpProxyBinding)
    configChanged = false
  end
end

Device_Services_X_000E50_IGMPProxy_.revert = function()
  if configChanged then
    uciHelper.revert(igmpProxyBinding)
    configChanged = false
  end
end

register(Device_Services_X_000E50_IGMPProxy_)
