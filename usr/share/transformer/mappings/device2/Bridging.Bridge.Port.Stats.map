-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_Bridging_Bridge_i_Port_i_Stats_ = {
  objectType = {
    name = "Device.Bridging.Bridge.{i}.Port.{i}.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      BytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      PacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      PacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      ErrorsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ErrorsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UnicastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      UnicastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      DiscardPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DiscardPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      MulticastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      MulticastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BroadcastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BroadcastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      UnknownProtoPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

local nwmodel = require "transformer.shared.models.device2.network"

local nwcommon = mapper("nwcommon")
local getIntfInfo = nwcommon.getIntfInfo
local getIntfStats = nwcommon.getIntfStats

local portStatsMap = {
  BytesSent = "tx_bytes",
  BytesReceived = "rx_bytes",
  PacketsSent = "tx_packets",
  PacketsReceived = "rx_packets",
  ErrorsSent = "tx_errors",
  ErrorsReceived = "rx_errors",
  DiscardPacketsSent = "tx_dropped",
  DiscardPacketsReceived = "rx_dropped"
}

local portExtStatsMap = {
  UnicastPacketsSent = "tx_unicast",
  UnicastPacketsReceived = "rx_unicast",
  MulticastPacketsSent = "txpckt",
  MulticastPacketsReceived = "multicast",
  BroadcastPacketsSent = "tx_broadcast",
  BroadcastPacketsReceived = "rx_broadcast",
  UnknownProtoPacketsReceived = "rxerr",
}

-- get function to get the values of Device.Bridging.Bridge.{i}.Port.{i}.Stats. parameters
Device_Bridging_Bridge_i_Port_i_Stats_.get = function(mapping, param, key)
  local model = nwmodel.load()
  local port = model:get(key)
  if port and port.device then
    if portStatsMap[param] then
      return getIntfInfo(port.device, portStatsMap[param], "0")
    elseif portExtStatsMap[param] then
      return getIntfStats(port.device, portExtStatsMap[param], "0")
    end
  end
  return "0"
end

register(Device_Bridging_Bridge_i_Port_i_Stats_)
