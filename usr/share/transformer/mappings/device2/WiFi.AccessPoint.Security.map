-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_WiFi_AccessPoint_i_Security_ = {
  objectType = {
    name = "Device.WiFi.AccessPoint.{i}.Security.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Reset = {
        access = "readWrite",
        command = "true",
        type = "boolean",
      },
      ModesSupported = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "None",
          -- "WEP-64",  -- "wep" mode is not supported
          -- "WEP-128",
          "WPA-Personal",
          "WPA2-Personal",
          "WPA-WPA2-Personal",
          "WPA-Enterprise",
          "WPA2-Enterprise",
          "WPA-WPA2-Enterprise",
        },
      },
      ModeEnabled = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "None",
          -- "WEP-64",  -- "wep" mode is not supported
          -- "WEP-128",
          "WPA-Personal",
          "WPA2-Personal",
          "WPA-WPA2-Personal",
          "WPA-Enterprise",
          "WPA2-Enterprise",
          "WPA-WPA2-Enterprise",
        },
      },
--[[  "wep" mode is not supported
      WEPKey = {
        access = "readWrite",
        hidden = "true",
        type = "string", -- Both ASCII(5 and 13 CS) and Hex(10 and 26 CS) is supported
        min = "5",
        max = "26",
      },
--]]
      PreSharedKey = {
        access = "readWrite",
        hidden = "true",
        type = "hexBinary",
        max = "32",
      },
      KeyPassphrase = {
        access = "readWrite",
        hidden = "true",
        type = "string",
        min = "8",
        max = "63",
      },
      RekeyingInterval = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "80",
            max = "846000",
          },
        },
        default = "3600",
      },
      RadiusServerIPAddr = {
        access = "readWrite",
        type = "string",
      },
      SecondaryRadiusServerIPAddr  = {
        access = "readWrite",
        type = "string",
      },
      RadiusServerPort = {
        access = "readWrite",
        type = "unsignedInt",
        default = "1812",
      },
      SecondaryRadiusServerPort = {
        access = "readWrite",
        type = "unsignedInt",
        default = "1812",
      },
      RadiusSecret = {
        access = "readWrite",
        hidden = "true",
        type = "string",
      },
      SecondaryRadiusSecret = {
        access = "readWrite",
        hidden = "true",
        type = "string",
      },
    }
  }
}

local inet = require 'tch.inet'
local wifisecurity = require 'transformer.shared.custo.wifisecurity'
local mapper, string, next, register = mapper, string, next, register
local uciHelper = mapper("ucihelper")
local getFromUci = uciHelper.get_from_uci
local getAllFromUci = uciHelper.getall_from_uci
local setOnUci = uciHelper.set_on_uci
local conn = mapper("ubus").connect()
local wirelessBinding = {config = "wireless"}
local gmatch, match = string.gmatch, string.match
local concat, commitApply = table.concat, commitapply
local bandSteerHelper = require("transformer.shared.bandsteerhelper")
local network = require("transformer.shared.common.network")
local isBaseIface = bandSteerHelper.isBaseIface
local isBandSteerEnabled = bandSteerHelper.isBandSteerEnabledByAp
local getBandSteerPeerIface = bandSteerHelper.getBandSteerPeerIface

local configChanged = false

local supportedModesMap = {
  ["none"]          = "None",
  ["wep"]           = "None",  -- "wep" mode is not supported
  ["wpa2-psk"]      = "WPA2-Personal",
  ["wpa-wpa2-psk"]  = "WPA-WPA2-Personal",
  ["wpa2"]          = "WPA2-Enterprise",
  ["wpa-wpa2"]      = "WPA-WPA2-Enterprise"
}

local accessSecurityUciMap = {
  ["None"] = "none",
  -- ["WEP-64"] = "wep",  -- "wep" mode is not supported
  ["WPA2-Personal"] = "wpa2-psk",
  ["WPA-WPA2-Personal"] = "wpa-wpa2-psk",
  ["WPA2-Enterprise"] = "wpa2",
  ["WPA-WPA2-Enterprise"] = "wpa-wpa2",
}

local accessSecurityMap = {
  ["ModeEnabled"] = "security_mode",
  -- ["WEPKey"] = "wep_key",  -- "wep" mode is not supported
  ["PreSharedKey"] = "wpa_psk_key",
  ["KeyPassphrase"] = "wpa_psk_key",
}

-- Map table to set server(Y = 0/1)
--   0 primary
--   1 secondary
local enterpriseMap = {
  ["RadiusServerIPAddr"] = "0",
  ["RadiusServerPort"] = "0",
  ["RadiusSecret"] = "0",
  ["SecondaryRadiusServerIPAddr"] = "1",
  ["SecondaryRadiusServerPort"] = "1",
  ["SecondaryRadiusSecret"] = "1",
}

local function getSupportedModesFromUbus(key)
  local data = conn:call("wireless.accesspoint.security", "get", { name = key }) or {}
  return data[key] and data[key].supported_modes or ""
end

local function getModesSupported(supportedModes, key)
  if not supportedModes then
    supportedModes = getSupportedModesFromUbus(key)
  end
  if supportedModes ~= "" then
    local modes = {}
    for mode in gmatch(supportedModes, "%S+") do
      if mode ~= "wep" then  -- "wep" mode is not supported, so skipping if it is populated from UCI
        modes[#modes + 1] = supportedModesMap[mode]
      end
    end
    return concat(modes, ",")
  end
  return ""
end

local function getDNS(fqdn)
  local cmd = "dnsget "..fqdn
  local addr
  local pipe = io.popen(cmd)
  for line in pipe:lines() do
    addr = match(line,"%s+(%d+%.%d+%.%d+%.%d+)")
  end
  pipe:close()
  return addr
end

local function getUciValue(sectionName, paramName)
  wirelessBinding.sectionname = sectionName
  if paramName then
    wirelessBinding.option = paramName
    return getFromUci(wirelessBinding)
  end
  return getAllFromUci(wirelessBinding)
end

local function getEnterpriseValues(key, param, server)
  local value
  local sectionName = key.."_".."auth"..server
  if param == "RadiusServerIPAddr" or param == "SecondaryRadiusServerIPAddr" then
    local fqdn = getUciValue(sectionName, "fqdn")
    if fqdn ~= "" then
      value = getDNS(fqdn)
    else
      value = getUciValue(sectionName,"ip")
    end
  elseif param == "RadiusServerPort" or param == "SecondaryRadiusServerPort" then
    value = getUciValue(sectionName, "port") or "1812"
  elseif param == "RadiusSecret" or param == "SecondaryRadiusSecret" then
    value = getUciValue(sectionName, "secret")
  end
  return value
end

local function setUciParam(sectionName, paramName, value)
  wirelessBinding.sectionname = sectionName
  wirelessBinding.option = paramName
  setOnUci(wirelessBinding, value, commitApply)
  configChanged = true
end

local function getIntervalValue(key, modeEnabled)
  local value = ""
  if modeEnabled ~= "none" and modeEnabled ~= "wep" then
    value = getUciValue(key, "eap_reauth_period")
  end
  if value == "" then
    local data = conn:call("wireless.accesspoint.security", "get",  { }) or {}
    if data[key] and data[key]["eap_reauth_period"] then
      value = data[key]["eap_reauth_period"]
    end
  end
  return value ~= "" and tostring(value) or "3600"
end

--- @function setIntervalvalue will set the value for RekeyingInterval
--- @if condition will check the security_mode and will not allow to set when mode is none/wep
local function setIntervalvalue(key, option, value)
  local uciValues = getUciValue(key)
  if  uciValues["security_mode"] ~= "none" and  uciValues["security_mode"] ~= "wep" then
    return setUciParam(key, "eap_reauth_period", value)
  end
  return nil, "Cannot set RekeyingInterval when securityMode is none"
end

Device_WiFi_AccessPoint_i_Security_.get = function(mapping, param, key)
  local isEnterpriseMode = false
  local uciSecurityValues = getUciValue(key)
  local modeName = uciSecurityValues["security_mode"] and supportedModesMap[uciSecurityValues["security_mode"]]

  if modeName then
    isEnterpriseMode = match(modeName, "Enterprise") and true or false
  end
  if param == "Reset" then
    return "0"
  elseif param == "ModesSupported" then
    return getModesSupported(uciSecurityValues["supported_security_modes"], key)
  elseif param == "ModeEnabled" then
    return (modeName and modeName or "")
  elseif param == "RekeyingInterval" then
    return getIntervalValue(key, uciSecurityValues["security_mode"])
  elseif accessSecurityMap[param] then
    return uciSecurityValues[accessSecurityMap[param]] or ""
  elseif enterpriseMap[param] then
    return (isEnterpriseMode and getEnterpriseValues(key, param, enterpriseMap[param]) or "" )
  end
end

Device_WiFi_AccessPoint_i_Security_.getall = function(mapping, key)
  local isEnterpriseMode = false
  local primValues,ipAddrPrim,secValues,ipAddrSec
  local uciSecurityValues = getUciValue(key)
  local modeEnabled = uciSecurityValues["security_mode"] and uciSecurityValues["security_mode"]
  local rekeyingInterval = getIntervalValue(key, modeEnabled)
  if modeEnabled and supportedModesMap[modeEnabled] then
    isEnterpriseMode = match(supportedModesMap[modeEnabled],"Enterprise") and true or false
  end

  if isEnterpriseMode then
    local sectionName = key.."_".."auth".."0"
    primValues = getUciValue(sectionName)
    if primValues.fqdn then
      ipAddrPrim = getDNS(primValues["fqdn"])
    else
      ipAddrPrim = primValues["ip"]
    end
    sectionName = key.."_".."auth".."1"
    secValues = getUciValue(sectionName)
    if secValues.fqdn then
      ipAddrSec = getDNS(secValues["fqdn"])
    else
      ipAddrSec = secValues["ip"]
    end
  end

  return {
    Reset = "0",
    ModeEnabled = supportedModesMap[modeEnabled] or "",
    -- WEPKey = uciSecurityValues["wep_key"] or "",  -- "wep" mode is not supported. To be uncommented if "wep" mode support is requested.
    PreSharedKey = uciSecurityValues["wpa_psk_key"] or "",
    KeyPassphrase = uciSecurityValues["wpa_psk_key"] or "",
    ModesSupported = getModesSupported(uciSecurityValues["supported_security_modes"], key),
    RadiusServerIPAddr = isEnterpriseMode and ipAddrPrim or "",
    RekeyingInterval = rekeyingInterval,
    RadiusServerPort = isEnterpriseMode and primValues["port"] or "1812",
    RadiusSecret = isEnterpriseMode and primValues["secret"] or "",
    SecondaryRadiusServerIPAddr = isEnterpriseMode and ipAddrSec or "",
    SecondaryRadiusServerPort = isEnterpriseMode and secValues["port"] or "1812",
    SecondaryRadiusSecret = isEnterpriseMode and secValues["secret"] or "",
  }
end

--For main ssid, if value reseted, should modify the peer ssid also
local function setBandSteerPeerApAuthentication(param, value, localiface)
  local bspeeriface = getBandSteerPeerIface(localiface)
  if not bspeeriface then
    return nil, "Can not find band steering switching node."
  else
    local bspeerap = bandSteerHelper.getBsAp(bspeeriface)
    if not bspeerap then
      return nil, "Band steering switching node does not exist"
    end

    wirelessBinding.sectionname = bspeerap
    wirelessBinding.option = param
    uciHelper.set_on_uci(wirelessBinding, value, commitApply)
    configChanged = true
  end

  return true
end

local function setRadiusValue(ap, server, option, value)
  local sectionName = ap.."_".."auth"..server
  local section = getUciValue(sectionName)
  if not section['.name'] then
    return nil, "Section not present"
  end
  setUciParam(sectionName, option, value)
end

local function setRadiusIP(ap, server, ip)
  local kind = inet.isValidIP(ip)
  if kind == "IPv4" then
    return setRadiusValue(ap, server, "ip", ip)
  elseif kind == "IPv6" then
    return nil, "only IPv4 values supported"
  else
    return nil, "invalid IP address"
  end
end

local function setRadiusPort(ap, server, port)
  if tonumber(port)>65535 then
    return "port number out of range"
  end
  return setRadiusValue(ap, server, "port", port)
end

local function setRadiusSecret(ap, server, secret)
  if #secret>64 then
    return nil, "secret value too long"
  end
  return setRadiusValue(ap, server, "secret", secret)
end

local function setBandSteerOption(ap, uci_option, uci_value)
  if uci_option=="security_mode" and uci_value == "wep" then
    return nil, "Can not modify the value when band steer enabled"
  end

  local apdata = network.getAccessPointInfo(ap)
  if not next(apdata) then
    return nil, "The ap data is invalid."
  end

  local iface = apdata.ssid
  if isBaseIface(iface) then
    --To get peer ap, and set related authentication option
    local ret, errmsg = setBandSteerPeerApAuthentication(uci_option, uci_value, iface)
    if not ret then
      return nil, errmsg
    end
  else
    return nil, "Can not modify the value when band steer enabled"
  end
  setUciParam(ap, uci_option, uci_value)
end

local function setSecurityOption(ap, option, value)
  if value then
    if isBandSteerEnabled(ap) then
       return setBandSteerOption(ap, option, value)
    end
    setUciParam(ap, option, value)
  else
    return "Unsupported  value"
  end
end

local function setModeEnabled(value, key)
  local supportedModes = getUciValue(key, "supported_security_modes")
  if supportedModes == "" then
    supportedModes = getSupportedModesFromUbus(key)
  end
  local modeAsPerUci = accessSecurityUciMap[value]
  if supportedModes == "" then
    return setSecurityOption(key, "security_mode", modeAsPerUci)
  else
    for mode in gmatch(supportedModes, "([^%s]+)") do
      if mode == modeAsPerUci then
        return setSecurityOption(key, "security_mode", modeAsPerUci)
      end
    end
    return nil, value.." Mode is currently not supported"
  end
end

Device_WiFi_AccessPoint_i_Security_.set = {
  Reset = function(_, _, value, key)
    if (value=='1') and wifisecurity.reset(key, commitApply) then
      configChanged = true
    end
  end,
  ModeEnabled = function(_, _, value, key)
    return setModeEnabled(value, key)
  end,
  PreSharedKey = function(_, _, value, key)
    return setSecurityOption(key, "wpa_psk_key", value)
  end,
  KeyPassphrase = function(_, _, value, key)
    return setSecurityOption(key, "wpa_psk_key", value)
  end,
  RadiusServerIPAddr = function(_, _, value, key)
    return setRadiusIP(key, "0", value)
  end,
  RekeyingInterval = function(_, _, value, key)
    return setIntervalvalue(key, "eap_reauth_period", value)
  end,
  SecondaryRadiusServerIPAddr = function(_, _, value, key)
    return setRadiusIP(key, "1", value)
  end,
  RadiusServerPort = function(_, _, value, key)
    return setRadiusPort(key, "0", value)
  end,
  SecondaryRadiusServerPort = function(_, _, value, key)
    return setRadiusPort(key, "1", value)
  end,
  RadiusSecret = function(_, _, value, key)
    return setRadiusSecret(key, "0", value)
  end,
  SecondaryRadiusSecret = function(_, _, value, key)
    return setRadiusSecret(key, "1", value)
  end,
}

local function endTransaction(action)
  if configChanged then
    action(wirelessBinding)
  end
  configChanged = false
end

Device_WiFi_AccessPoint_i_Security_.commit = function()
  return endTransaction(uciHelper.commit)
end

Device_WiFi_AccessPoint_i_Security_.revert = function()
  return endTransaction(uciHelper.revert)
end

local function setUciEvent(mapping, action, config, sectionType, sectionName, option)
  return { { key = sectionName, paramname = "ModeEnabled" } }
end

Device_WiFi_AccessPoint_i_Security_.add_watchers = function(mapping, param, key)
  local uciEventSource = eventsource("uci")
  uciEventSource.watch(mapping, { set = setUciEvent }, "wireless", "wifi-ap", key, "security_mode")
end

register(Device_WiFi_AccessPoint_i_Security_)
