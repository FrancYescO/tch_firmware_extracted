-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_WiFi_Radio_i_ = {
  objectType = {
    name = "Device.WiFi.Radio.{i}.",
    access = "readOnly",
    numEntriesParameter = "RadioNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Up",
          "Down",
          "Unknown",
          "Dormant",
          "NotPresent",
          "LowerLayerDown",
          "Error",
        },
      },
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
        max  = "64",
      },
      Name = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      LastChange = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LowerLayers = {
        access = "readOnly", -- this is the lowest layer
        list = true,
        max = "1024",
        type = "string",
        pathRef = true,
      },
      Upstream = {
        access = "readOnly",
        type = "boolean",
      },
      MaxBitRate = {
        access = "readOnly",
        type = "unsignedInt",
      },
      SupportedFrequencyBands = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "2.4GHz",
          "5GHz",
        },
      },
      OperatingFrequencyBand = {
        access = "readOnly",  -- this cannot be changed
        type = "string",
        enumeration = {
          "2.4GHz",
          "5GHz",
        },
      },
      SupportedStandards = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "a",
          "b",
          "g",
          "n",
          "ac",
        },
      },
      OperatingStandards = {
        access = "readWrite",
        list = true,
        type = "string",
        enumeration = {
          "a",
          "b",
          "g",
          "n",
          "ac",
        },
      },
      PossibleChannels = {
        access = "readOnly",
        list = true,
        max = "1024",
        type = "string",
      },
      ChannelsInUse = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "1024",
        type = "string",
      },
      Channel = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1",
            max = "255",
          },
        },
      },
      AutoChannelSupported = {
        access = "readOnly",
        type = "boolean",
      },
      AutoChannelEnable = {
        access = "readWrite",
        type = "boolean",
      },
      AutoChannelRefreshPeriod = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "604800",
          },
        },
      },
      OperatingChannelBandwidth = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "20MHz",
          --[[ currently not supported due to unavailable lower layer support
          "40MHz",
          "80MHz",
          "160MHz",
          --]]
          "Auto",
        },
      },
      CurrentOperatingChannelBandwidth = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "20MHz",
          --[[ currently not supported due to unavailable lower layer support
          "40MHz",
          "80MHz",
          "160MHz",
          --]]
          "Auto",
        },
      },
      ExtensionChannel = {
        access = "readOnly", -- readwrite currently not supported
        type = "string",
        enumeration = {
          "AboveControlChannel",
          "BelowControlChannel",
          "Auto",
        },
      },
      GuardInterval = {
        access = "readWrite",
        type = "string",
        enumeration = {
          -- "400nsec", Restricting Enum values because 'sgi' will return boolean values.
          "800nsec",
          "Auto",
        },
      },
--[[ TODO
      MCS = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
            max = "15",
          },
          {
            min = "16",
            max = "31",
          },
        },
      },
--]]
      TransmitPower = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
            max = "100",
          },
        },
      },
      TransmitPowerSupported = {
        access = "readOnly",
        list = true,
        max = "64",
        type = "int",
        range = {
          {
            min = "-1",
            max = "100",
          },
        },
      },
      X_TELMEX_COM_SupportedChannelBandwidths = {
        access = "readOnly",
        list = true,
        type = "string",
      },
      IEEE80211hSupported = {
        access = "readOnly",
        type = "boolean",
      },
      IEEE80211hEnabled = {
        access = "readOnly", -- readwrite currently not supported
        type = "boolean",
      },
      RegulatoryDomain = {
        access = "readWrite",
        type = "string",
        min = "3",
        max = "3",
      },
--[[ TODO
      RetryLimit = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "7",
          },
        },
      },
      CCARequest = {
        access = "readWrite",
        type = "hexBinary",
        min = "11",
        max = "11",
      },
      CCAReport = {
        access = "readOnly",
        type = "hexBinary",
        min = "12",
        max = "12",
      },
      RPIHistogramRequest = {
        access = "readWrite",
        type = "hexBinary",
        min = "11",
        max = "11",
      },
      RPIHistogramReport = {
        access = "readOnly",
        type = "hexBinary",
        min = "19",
        max = "19",
      },
      FragmentationThreshold = {
        access = "readWrite",
        type = "unsignedInt",
      },
      LongRetryLimit = {
        access = "readWrite",
        type = "unsignedInt",
      },
      PacketAggregationEnable = {
        access = "readWrite",
        type = "boolean",
      },
--]]
      RTSThreshold = {
        access = "readOnly", -- readwrite currently not supported due to unavailable lower layer support
        type = "unsignedInt",
      },
      PreambleType = {
        access = "readOnly", -- readwrite currently not supported due to unavailable lower layer support
        type = "string",
        enumeration = {
          "short",
          "long",
          "auto",
        },
      },
      DTIMPeriod = {
        access = "readOnly", -- readwrite currently not supported due to unavailable lower layer support
        type = "unsignedInt",
      },
      BeaconPeriod = {
        access = "readOnly", -- readwrite currently not supported due to unavailable lower layer support
        type = "unsignedInt",
      },
      BasicDataTransmitRates = {
        access = "readWrite",
        list = true,
        type = "string",
      },
      OperationalDataTransmitRates = {
        access = "readWrite",
        list = true,
        type = "string",
      },
--[[ TODO
      SupportedDataTransmitRates = {
        access = "readOnly",
        list = true,
        type = "string",
      },
]]--
    }
  },
  aliasDefault = "Name",
}

local nwmodel = require "transformer.shared.models.device2.network"
local WifiRadio = nwmodel.register("WifiRadio", Device_WiFi_Radio_i_.objectType.name)
local model
local nwWifi = require "transformer.shared.wifi"
local tostring, string, table = tostring, string, table
local format = string.format
local commitapply, mapper, register = commitapply, mapper, register
local uci_helper = mapper("ucihelper")
local conn = mapper("ubus").connect()
local getall_from_uci = uci_helper.getall_from_uci
local wirelessBinding = {config="wireless"}
local posix = require("tch.posix")
local getClockTime = posix.clock_gettime
local lastStateChangeTime = {}

-- convert ext_channel_location to ExtensionChannel
local extChannelMap = {
  ["upper"] = "AboveControlChannel",
  ["lower"] = "BelowControlChannel",
  [""] = "Auto",
}

local transmitPowerMap = {
  ["-6"] = "25",
  ["-3"] = "50",
  ["-1"] = "75",
  ["0"]  = "100",
  ["25"] = "-6",
  ["50"] = "-3",
  ["75"] = "-1",
  ["100"]= "0",
}

local cache = {
  uci = {},
  ubus = {}
}

local function drop_cache()
  cache.uci = {}
  cache.ubus = {}
end

local function trim(str) --Remove leading and trailing white spaces
  return str and string.match(str, "^%s*(.-)%s*$") or ""
end

local function getFromUci(key, option)
  local data = cache.uci[key]
  if not data then
    wirelessBinding.sectionname = key
    wirelessBinding.option = nil
    data = getall_from_uci(wirelessBinding)
    cache.uci[key] = data or {}
  end
  return data[option]
end

local function getFromUbus(key, option)
  local data = cache.ubus[key]
  if not data then
    for k, info in pairs(conn:call("wireless.radio", "get", {}) or {}) do
      cache.ubus[k] = info
    end
    data = cache.ubus[key] or {}
  end
  return data[option]
end

local function getOption(modelKey, uciOption, ubusOption)
  local key = model:getUciKey(modelKey)
  local value
  if uciOption then
    value = getFromUci(key, uciOption)
  end
  if not value and ubusOption then
    value = getFromUbus(key, ubusOption)
  end
  return value and tostring(value)
end

local uci_changed
local function setOption(modelKey, option, value)
  local key = model:getUciKey(modelKey)
  local old = getOption(key, option)
  if value~=old then
    cache.uci[key].option = value
    wirelessBinding.sectionname = key
    wirelessBinding.option = option
    uci_helper.set_on_uci(wirelessBinding, value, commitapply)
    uci_changed = true
  end
end

local function end_transaction(uci_action)
  drop_cache()
  if uci_changed then
    uci_action(wirelessBinding)
    uci_changed = false
  end
end

function Device_WiFi_Radio_i_.entries(mapping)
  drop_cache()
  model = nwmodel.load()
  return model:getKeys(WifiRadio)
end

local validStds = {
  ["2.4GHz"] = {
    b = true,
    g = true,
    n = true,
  },
  ["5GHz"] = {
    a = true,
    n = true,
    ac = true,
  }
}
local stdOrder = {"b", "g", "a", "n", "ac"}

local function wifiStdToList(std)
  local r = {}
  for v in std:gmatch("[abgn]c?") do
    r[#r+1] = v
  end
  return r
end

local function formatChannelsList(channels)
    local v = channels:gsub("%s+", ",") --replace runs of spaces with a single comma
    return v:match("^,?(.-),?$") --get rid of possible starting and/or ending comma
end

-- Maps possible values of channelwidth with equivalent device2 datamodel channelwidth
local channelWidthMap = {
  ["auto"]        = "Auto",
  ["20"]          = "20MHz",
  ["20MHz"]       = "20MHz",
  ["40MHz"]       = "40MHz",
  ["80MHz"]       = "80MHz",
  ["20/40"]       = "Auto",
  ["20/40MHz"]    = "Auto",
  ["20/40/80"]    = "Auto",
  ["20/40/80MHz"] = "Auto",
}

Device_WiFi_Radio_i_.get = {
  Enable = function(mapping, param, key)
    return getOption(key, "state", "admin_state") or "0"
  end,

  Status = function(mapping, param, key)
    local state = getOption(key, nil, "oper_state")
    if state == "1" then
      return 'Up'
    elseif state == "0" then
      return 'Down'
    else
      return 'Error'
    end
  end,

  Name = function(mapping, param, key)
    return model:getName(key)
  end,

  LastChange = function(mapping, param, key)
    return tostring(getClockTime(posix.CLOCK_MONOTONIC) - (lastStateChangeTime[key] or 0))
  end,

  LowerLayers = "",

  Upstream = "0",

  Channel = function(mapping, param, key)
    local channel = getOption(key, "channel") or "auto"
    if channel=="auto" then
      -- channel not available in uci
      channel = getOption(key, nil, "channel") or "255"
    end
    return channel
  end,

  BeaconPeriod = function(mapping, param, key)
    return getOption(key, "beacon_period", "beacon_period") or ""
  end,

  DTIMPeriod = function(mapping, param, key)
    return getOption(key, "dtim_interval", "dtim_interval") or ""
  end,

  PreambleType = function(mapping, param, key)
    return getOption(key, "short_slot", "short_slot") or ""
  end,

  RTSThreshold = function(mapping, param, key)
    return getOption(key, "rts_threshold", "rts_threshold") or ""
  end,

  GuardInterval = function(mapping, param, key)
    local value = getOption(key, "sgi", "sgi")
    if value == "1" then
      return "Auto"
    end
    return "800nsec"
  end,
  TransmitPower = function(mapping, param, key)
    local power = getOption(key, "tx_power_adjust", nil)
    return power == "" and "50" or transmitPowerMap[power] or ""
  end,
  TransmitPowerSupported = "25,50,75,100",
  X_TELMEX_COM_SupportedChannelBandwidths = "20,40,80,160",
  AutoChannelSupported = "1",

  AutoChannelEnable = function(mapping, param, key)
    local req = getOption(key, "channel", "requested_channel")
    if req == "auto" then
      return '1'
    else
      return '0'
    end
  end,

  AutoChannelRefreshPeriod = function(mapping, param, key)
    local key = model:getUciKey(key)
    local refreshPeriod = getFromUci(key, "acs_rescan_period")
    if not refreshPeriod then
      local radioData = conn:call("wireless.radio.acs", "get", {}) or {}
      refreshPeriod = radioData[key] and tostring(radioData[key]["rescan_period"]) or "0"
    end
    return refreshPeriod
  end,

  MaxBitRate = function(mapping, param, key)
    return getOption(key, nil, "max_phy_rate") or ""
  end,

  SupportedFrequencyBands = function(mapping, param, key)
    return getOption(key, nil, "supported_frequency_bands") or ""
  end,

  OperatingFrequencyBand = function(mapping, param, key)
    return getOption(key, nil, "band") or ""
  end,

  SupportedStandards = function(mapping, param, key)
    local standard = getOption(key, nil, "supported_standards") or ""
    return table.concat(wifiStdToList(standard), ",")
  end,

  OperatingStandards = function(mapping, param, key)
    local standard = getOption(key, "standard", "standard") or ""
    return table.concat(wifiStdToList(standard), ",")
  end,

  PossibleChannels = function(mapping, param, key)
    return formatChannelsList(getOption(key, nil, "allowed_channels") or "")
  end,

  ChannelsInUse = function(mapping, param, key)
    return formatChannelsList(getOption(key, nil, "used_channels") or "")
  end,

  OperatingChannelBandwidth = function(mapping, param, key)
    return channelWidthMap[getOption(key, "channelwidth", "channel_width")] or "Auto"
  end,

  CurrentOperatingChannelBandwidth = function(mapping, param, key)
    return channelWidthMap[getOption(key, nil, "channel_width")] or "Auto"
  end,

  RegulatoryDomain = function(mapping, param, key)
    return getOption(key, "country", "country") or ""
  end,

  BasicDataTransmitRates = function(mapping, param, key)
    local rateset = getOption(key, "rateset", "rateset") or ""
    local basicrates = {}
    for rate in rateset:gmatch("([%d.]+)%(b%)") do
        basicrates[#basicrates+1] = rate
    end
    return table.concat(basicrates, ",")
  end,

  OperationalDataTransmitRates = function(mapping, param, key)
    local rateset = getOption(key, "rateset", "rateset") or ""
    local r = {}
    -- only keep the rate numbers, get rid of '(b)'
    for rate in rateset:gmatch("([%d.]+)") do
      r[#r+1] = rate
    end
    return table.concat(r, ",")
  end,

  ExtensionChannel = function(mapping, param, key)
    return extChannelMap[getOption(key, nil, "ext_channel_location") or ""] or ""
  end,

  IEEE80211hSupported = function(mapping, param, key)
    if getOption(key, nil, "supported_frequency_bands") or "" == "5GHz" then
      local std = getOption(key, nil, "supported_standards") or ""
      if std:match("a?n") then
        return "1"
      end
    end
    return "0"
  end,

  IEEE80211hEnabled = function(mapping, param, key)
    if getOption(key, nil, "band") or "" == "5GHz" then
      local std = getOption(key, nil, "standard") or ""
      if std:match("a?n") then
        return "1"
      end
    end
    return "0"
  end,
}

-- Required Input Pattern for OperatingStandards param
local reqOpStds = {
  ["2.4GHz"] = {
    ["bg"] = {
      ["b,g"] = true,
    },
    ["bgn"] = {
      ["b,g"] = true,
      ["b,g,n"] = true,
    }
  },
  ["5GHz"] = {
    ["an"] = {
      ["a,n"] = true,
    },
    ["anac"] = {
      ["a,ac,n"] = true,
    }
  }
}

-- Nomalize value to be usable as key in reqOpStds
-- @param value the OperatingStandards value
-- @return normalized OperatingStandards value
local function normalizeOpStd(value)
  local opStd = {}
  for std in value:gmatch("(%a+),?") do
    opStd[#opStd + 1] = std
  end
  table.sort(opStd)
  return table.concat(opStd, ",") or ""
end

-- Validate the OperatingStandards value
-- @param key the radio name
-- @param value the OperatingStandards value
-- @param band the UBUS band value
-- @param suppStd the UBUS SupportedStandards value
-- @return OparatingStandards value
local function validOpStds(key, value, band, suppStd)
  value = normalizeOpStd(value)
  return reqOpStds[band] and reqOpStds[band][suppStd] and reqOpStds[band][suppStd][value]
end

local function setOperatingStandards(key, value, param)
  local band = getOption(key, nil, "band") or ""
  local suppStd = getOption(key, nil, "supported_standards") or ""
  if validOpStds(key, value, band, suppStd) then
    local setList = {}
    for std in value:gmatch("(%a+),?") do
      if not validStds[band][std] then
        return nil, format("Setting %s on %s band is not allowed", std, band)
      end
      setList[std] = true
    end
    value = {}
    for _, std in ipairs(stdOrder) do
      if setList[std] then
        value[#value+1] = std
      end
    end
    value = table.concat(value, "")
    setOption(key, "standard", value)
  else
    return nil, format("Setting '%s' pattern on '%s' band is not allowed", value, band)
  end
end

-- Maps equivalent "channelwidth" from device2 datamodel to uci
-- Contains the lowerlayer supported channelwidth
local channelWidthFromDevToUci = {
  ["Auto"] = "auto",
  ["20MHz"] = "20"
}

Device_WiFi_Radio_i_.set = {
  Enable = function(mapping, param, value, key)
    return setOption(key, "state", value)
  end,

  OperatingStandards = function(mapping, param, value, key)
    return setOperatingStandards(key, value, param)
  end,

  Channel = function(mapping, param, value, key)
    local allowedChannels = getOption(key, nil, "allowed_channels")
    if not allowedChannels then
      return setOption(key, "channel", value)
    end
    for channel in allowedChannels:gmatch("(%d+)") do
      if channel == value then
        return setOption(key, "channel", value)
      end
    end
    return nil, "Given channel is not allowed"
  end,

  AutoChannelEnable = function(mapping, param, value, key)
    -- As of now, disabling of AutoChannelEnable on a disabled radio is not handled
    local channelValue = getOption(key, "channel") or "auto"
    if value == "1" then
      value = "auto"
      if channelValue == "auto" then
        commitapply:newset("Device.WiFi.Radio.{i}.AutoChannelEnable")
      end
    elseif value == "0" then
      if channelValue ~= "auto" then
        value = channelValue -- just keep the value already set
      else
        value = getOption(key, nil, "channel") or "" --use the current one
      end
    end
    setOption(key, "channel", value)
  end,

  GuardInterval = function(mapping, param, value, key)
    if value == "Auto" then
      value = "1"
    else
      value = "0"
    end
    setOption(key, "sgi", value)
  end,

  TransmitPower = function(mapping, param, value, key)
    local power = transmitPowerMap[value]
	if power then
	  return setOption(key, "tx_power_adjust", power)
	end
	return nil,"Invalid power value"
  end,

  AutoChannelRefreshPeriod = function(mapping, param, value, key)
    if value == "0" or tonumber(value) >= 60 then
      setOption(key, "acs_rescan_period", value)
    else
      return nil,"Refresh Period must be 0 (only at boottime) or at least 60s"
    end
  end,

  OperatingChannelBandwidth = function(mapping, param, value, key)
    local supportedChannelWidth = channelWidthFromDevToUci[value]
    if supportedChannelWidth then
      return setOption(key, "channelwidth", supportedChannelWidth)
    else
      return nil, format("Cannot set channelwidth to %s as there is no lowerlayer support", value)
    end
  end,

  CurrentOperatingChannelBandwidth = function(mapping, param, value, key)
    local supportedChannelWidth = channelWidthFromDevToUci[value]
    if supportedChannelWidth then
      return setOption(key, "channelwidth", supportedChannelWidth)
    else
      return nil, format("Cannot set channelwidth to %s as there is no lowerlayer support", value)
    end
  end,

  RegulatoryDomain = function(mapping, param, value, key)
    return setOption(key, "country", value)
  end,

  BasicDataTransmitRates = function(mapping, param, value, key)
    local rateset = getOption(key, "rateset", "rateset") or ""
    local val, error = nwWifi.setBasicRateset(value,rateset)
    if val then
      setOption(key, "rateset", val)
    else
      return nil, error
    end
  end,

  OperationalDataTransmitRates = function(mapping, param, value, key)
    local rateset = getOption(key, "rateset", "rateset") or ""
    local val, error = nwWifi.setOperationalRateset(value,rateset)
    if val then
      setOption(key, "rateset", val)
    else
      return nil, error
    end
  end,
}

Device_WiFi_Radio_i_.commit = function()
  end_transaction(uci_helper.commit)
end

Device_WiFi_Radio_i_.revert = function()
  end_transaction(uci_helper.revert)
end

local function onStateChanged(mapping, action, config, sectionType, sectionName, option)
  lastStateChangeTime[sectionName] = getClockTime(posix.CLOCK_MONOTONIC)
  return { { key = sectionName, paramname = "Enable" } }
end

Device_WiFi_Radio_i_.add_watchers = function(mapping, param, key)
  local uciEventSource = eventsource("uci")
  uciEventSource.watch(mapping, { set = onStateChanged }, "wireless", "wifi-device", key, "state")
end

register(Device_WiFi_Radio_i_)

local Device_WiFi_Radio_i_Multi_i_ = {
  objectType = {
    name = "#ROOT",
    access = "readOnly",
    minEntries = 1,
    maxEntries = math.huge,
    parameters = {
      Score = {
        access = "readOnly",
        type ="string",
        description = "Score assigned by WiFi AP to WiFi channel during the channel selection phase, the score calculation SHOULD be executed considering noise type and tx/rx occupation level listened over the radio channel. The calculation SHALL be updated each time the AP refreshes the channel selection phase",
      },
      WiFiNoiseLevel = {
        access = "readOnly",
        type ="string",
        description = "Noise level due to WiFi devices accountable over the channel",
      },
      NONWiFiNoiseLevel = {
        access = "readOnly",
        type ="string",
        decription = "Noise level due to NON-WiFi devices accountable over the channel",
      },
      DutyCycle = {
        access = "readOnly",
        type = "string",
        description = "Tx/Rx level of channel occupation",
      },
    },
  }
}

Device_WiFi_Radio_i_Multi_i_.entries = function(mapping, parentkey)
  return { parentkey }
end

-- Function to get the Ubus Call data for "ubusName" and "key"
local function getUbusData(ubusName, key)
  local data = conn:call(ubusName, "get", { name = key })
  return data and data[key] or {}
end

-- Function to match the Radio2G_Score and Radio5G_Score from the UBUS Call: " ubus call wireless.radio.acs get "
-- where, Radio2G_Score and Radio5G_Score is the Fifth Value of 'scan_report' tuple of the ubus call
-- Example of ubusStr : "05:15:28-31\/03\/2017;2;1;;13;1:0:3:0:-300;2:9:0:0:-400;3:1:0:0:-400;4:8:1:0:-600;5:6:0:0:-600;6:11:5:0:-600;7:4:0:0:-500;8:0:0:0:-500;9:0:0:0:-400;10:3:0:0:-400;11:9:4:0:-400;12:6:0:0:-400;13:0:0:0:-400;"
local function getRadioScore(ubusStr)
  return ubusStr:match("[^;]*;[^;]*;[^;]*;[^;]*;(%d*);") or ""
end


-- Function to Find the Nth value from the UbusStr(a string),
-- so converting that string to table and returning the respective Value from the specified position
local function findNth(ubusStr, position)
  local subStrTable = {}
  for subStr in string.gmatch(ubusStr, "-?%d+") do
    subStrTable[#subStrTable+1] = subStr
  end
  return subStrTable[position]
end

-- Function to get Noise value for the respective params
local function getWiFiNoiseLevel(ubusStr, position, key)
  local rowNum = 1
  for subStr in ubusStr:gmatch("([^\n]+)") do
    if rowNum == 3 then
      return findNth(subStr, position) or ""
    end
    rowNum = rowNum + 1
  end
end

-- Function to seprate the required SubString from the UbusData
local function getSubUbusStr(ubusData, option)
  if ubusData then
    for rKey, rValue in pairs(ubusData) do
      if rKey == option then
        return rValue and tostring(rValue) or ""
      end
    end
  end
  return ""
end

-- Function to get the values for ChannelQuality Params
local function getParamValue(param, parentkey)
  local ubusCall = "wireless.radio.acs"
  local ubusData, ubusStr
  ubusData = getUbusData(ubusCall, parentkey)
  if param == "Score" then
    ubusStr = getSubUbusStr(ubusData, "scan_report")
    if ubusStr then
      return getRadioScore(ubusStr)
    end
  elseif param == "DutyCycle" then
    ubusStr = getSubUbusStr(ubusData, "scan_report")
    if ubusStr then
      return (ubusStr:match("%d*;(%d*);")) or ""
    end
  elseif param == "WiFiNoiseLevel" then
    ubusStr = getSubUbusStr(ubusData, "channel_stats")
    if ubusStr then
      return getWiFiNoiseLevel(ubusStr, 18, parentkey) or ""
    end
  elseif param == "NONWiFiNoiseLevel" then
    ubusStr = getSubUbusStr(ubusData, "channel_stats")
    if ubusStr then
      return getWiFiNoiseLevel(ubusStr, 15, parentkey) or ""
    end
  end
  return ""
end

Device_WiFi_Radio_i_Multi_i_.get = {
  Score = function(mappings, param, parentkey)
    return getParamValue(param, parentkey) or ""
  end,
  WiFiNoiseLevel = function(mappings, param, parentkey)
    return getParamValue(param, parentkey) or ""
  end,
  NONWiFiNoiseLevel = function(mappings, param, parentkey)
    return getParamValue(param, parentkey) or ""
  end,
  DutyCycle = function(mappings, param, parentkey)
    return getParamValue(param, parentkey) or ""
  end,
}

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Device_WiFi_Radio_i_Multi_i_, "#ROOT", {"Device.WiFi.Radio.{i}.X_FASTWEB_ChannelQuality.{i}.", "Device.WiFi.Radio.{i}.X_000E50_ChannelQuality.{i}."})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
