-- Automatically generated from Device:2.11
-- using generator version 2.3
local Device_FAST_Line_i_Stats_ = {
  objectType = {
    name = "Device.FAST.Line.{i}.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      BytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      PacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      PacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      ErrorsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ErrorsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DiscardPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DiscardPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      TotalStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ShowtimeStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LastShowtimeStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      CurrentDayStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      QuarterHourStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

local xdslctl = require("transformer.shared.xdslctl")

local function xdslctlLineIdMap2(key)
  if string.find(key, "dsl:dsl") then
    return string.gsub(key, "dsl:dsl", "line")
  elseif string.find(key, "dsl") then
    return string.gsub(key, "dsl", "line")
  else
    return nil
  end
end

Device_FAST_Line_i_Stats_.get = {
  BytesSent = function(mapping, param, key)
    return xdslctl.infoValue("counters_totalcells", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  BytesReceived = function(mapping, param, key)
    return xdslctl.infoValue("counters_totalcells", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  PacketsSent = function(mapping, param, key)
    return xdslctl.infoValue("counters_datacells", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  PacketsReceived = function(mapping, param, key)
    return xdslctl.infoValue("counters_datacells", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  ErrorsSent = function(mapping, param, key)
    return xdslctl.infoValue("counters_biterr", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  ErrorsReceived = function(mapping, param, key)
    return xdslctl.infoValue("counters_biterr", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  DiscardPacketsSent = function(mapping, param, key)
    return xdslctl.infoValue("counters_dropcells", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  DiscardPacketsReceived = function(mapping, param, key)
    return xdslctl.infoValue("counters_dropcells", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  TotalStart = function(mapping, param, key)
    return xdslctl.stats("total", "start", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  ShowtimeStart = function(mapping, param, key)
    return xdslctl.stats("sincesync", "start", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  LastShowtimeStart = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "start", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  CurrentDayStart = function(mapping, param, key)
    return xdslctl.stats("currentday", "start", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  QuarterHourStart = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "start", nil, xdslctlLineIdMap2(key)) or "0"
  end,
}

register(Device_FAST_Line_i_Stats_)

local Device_FAST_Line_i_Stats_Total_ = {
  objectType = {
    name = "Device.FAST.Line.{i}.Stats.Total.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      ErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SeverelyErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LOSS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LORS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UAS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      RTXUC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      RTXTX = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessBSW = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessSRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessFRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessRPA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessTIGA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

Device_FAST_Line_i_Stats_Total_.get = {
  ErroredSecs = function(mapping, param, key)
    return xdslctl.stats("total", "es", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SeverelyErroredSecs = function(mapping, param, key)
    return xdslctl.stats("total", "ses", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LOSS = function(mapping, param, key)
    return xdslctl.stats("total", "los", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LORS = function(mapping, param, key)
    --return xdslctl.stats("total", "es", "ds", xdslctlLineIdMap2(key)) or "0"
    return "0"
  end,
  UAS = function(mapping, param, key)
    return xdslctl.stats("total", "uas", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXUC = function(mapping, param, key)
    return xdslctl.stats("total", "rtx", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXTX = function(mapping, param, key)
    return xdslctl.stats("total", "rtx", "us", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessBSW = function(mapping, param, key)
    return xdslctl.stats("total", "bswCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessSRA = function(mapping, param, key)
    return xdslctl.stats("total", "sraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessFRA = function(mapping, param, key)
    return xdslctl.stats("total", "fraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessRPA = function(mapping, param, key)
    return xdslctl.stats("total", "rpaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessTIGA = function(mapping, param, key)
    return xdslctl.stats("total", "tigaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
}

register(Device_FAST_Line_i_Stats_Total_)

local Device_FAST_Line_i_Stats_Showtime_ = {
  objectType = {
    name = "Device.FAST.Line.{i}.Stats.Showtime.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      ErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SeverelyErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LOSS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LORS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UAS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      RTXUC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      RTXTX = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessBSW = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessSRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessFRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessRPA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessTIGA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

Device_FAST_Line_i_Stats_Showtime_.get = {
  ErroredSecs = function(mapping, param, key)
    return xdslctl.stats("sincesync", "es", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SeverelyErroredSecs = function(mapping, param, key)
    return xdslctl.stats("sincesync", "ses", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LOSS = function(mapping, param, key)
    return xdslctl.stats("sincesync", "los", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LORS = function(mapping, param, key)
    return "0"
  end,
  UAS = function(mapping, param, key)
    return xdslctl.stats("sincesync", "uas", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXUC = function(mapping, param, key)
    return xdslctl.stats("sincesync", "rtx", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXTX = function(mapping, param, key)
    return xdslctl.stats("sincesync", "rtx", "us", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessBSW = function(mapping, param, key)
    return xdslctl.stats("sincesync", "bswCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessSRA = function(mapping, param, key)
    return xdslctl.stats("sincesync", "sraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessFRA = function(mapping, param, key)
    return xdslctl.stats("sincesync", "fraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessRPA = function(mapping, param, key)
    return xdslctl.stats("sincesync", "rpaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessTIGA = function(mapping, param, key)
    return xdslctl.stats("sincesync", "tigaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
}

register(Device_FAST_Line_i_Stats_Showtime_)

local Device_FAST_Line_i_Stats_LastShowtime_ = {
  objectType = {
    name = "Device.FAST.Line.{i}.Stats.LastShowtime.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      ErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SeverelyErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LOSS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LORS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UAS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      RTXUC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      RTXTX = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessBSW = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessSRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessFRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessRPA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessTIGA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

Device_FAST_Line_i_Stats_LastShowtime_.get = {
  ErroredSecs = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "es", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SeverelyErroredSecs = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "ses", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LOSS = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "los", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LORS = function(mapping, param, key)
    return "0"
  end,
  UAS = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "uas", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXUC = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "rtx", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXTX = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "rtx", "us", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessBSW = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "bswCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessSRA = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "sraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessFRA = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "fraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessRPA = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "rpaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessTIGA = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "tigaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
}

register(Device_FAST_Line_i_Stats_LastShowtime_)

local Device_FAST_Line_i_Stats_CurrentDay_ = {
  objectType = {
    name = "Device.FAST.Line.{i}.Stats.CurrentDay.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      ErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SeverelyErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LOSS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LORS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UAS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      RTXUC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      RTXTX = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessBSW = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessSRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessFRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessRPA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessTIGA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

Device_FAST_Line_i_Stats_CurrentDay_.get = {
  ErroredSecs = function(mapping, param, key)
    return xdslctl.stats("currentday", "es", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SeverelyErroredSecs = function(mapping, param, key)
    return xdslctl.stats("currentday", "ses", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LOSS = function(mapping, param, key)
    return xdslctl.stats("currentday", "los", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LORS = function(mapping, param, key)
    return "0"
  end,
  UAS = function(mapping, param, key)
    return xdslctl.stats("currentday", "uas", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXUC = function(mapping, param, key)
    return xdslctl.stats("currentday", "rtx", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXTX = function(mapping, param, key)
    return xdslctl.stats("currentday", "rtx", "us", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessBSW = function(mapping, param, key)
    return xdslctl.stats("currentday", "bswCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessSRA = function(mapping, param, key)
    return xdslctl.stats("currentday", "sraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessFRA = function(mapping, param, key)
    return xdslctl.stats("currentday", "fraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessRPA = function(mapping, param, key)
    return xdslctl.stats("currentday", "rpaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessTIGA = function(mapping, param, key)
    return xdslctl.stats("currentday", "tigaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
}

register(Device_FAST_Line_i_Stats_CurrentDay_)

local Device_FAST_Line_i_Stats_QuarterHour_ = {
  objectType = {
    name = "Device.FAST.Line.{i}.Stats.QuarterHour.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      ErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SeverelyErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LOSS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LORS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UAS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      RTXUC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      RTXTX = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessBSW = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessSRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessFRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessRPA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SuccessTIGA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

Device_FAST_Line_i_Stats_QuarterHour_.get = {
  ErroredSecs = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "es", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SeverelyErroredSecs = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "ses", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LOSS = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "los", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LORS = function(mapping, param, key)
    return "0"
  end,
  UAS = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "uas", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXUC = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "rtx", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXTX = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "rtx", "us", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessBSW = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "bswCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessSRA = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "sraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessFRA = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "fraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessRPA = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "rpaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessTIGA = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "tigaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
}

register(Device_FAST_Line_i_Stats_QuarterHour_)

