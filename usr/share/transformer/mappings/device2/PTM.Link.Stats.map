-- Automatically generated from Device:2.2
-- using generator version 2.1
local Device_PTM_Link_i_Stats_ = {
  objectType = {
    name = "Device.PTM.Link.{i}.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      BytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      PacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      PacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      ErrorsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ErrorsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
--[[      UnicastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      UnicastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
--]]
      DiscardPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DiscardPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
--[[      MulticastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      MulticastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BroadcastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BroadcastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      UnknownProtoPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
--]]
    }
  }
}
local nwmodel = require "transformer.shared.models.device2.network"

local nw_getIntfInfo = mapper("nwcommon").getIntfInfo

local function getIntfInfo(key, field, default)
  local model = nwmodel.load()
  local dev = model:getDevice(key)
  if dev then
    return nw_getIntfInfo(dev, field, default)
  end
end


-- get function to get the values of Device.PTM.Link.{i}.Stats. parameters
Device_PTM_Link_i_Stats_.get = {
  BytesSent = function(mapping, param, key)
    return getIntfInfo(key, "tx_bytes", "0")
  end,

  BytesReceived = function(mapping, param, key)
    return getIntfInfo(key, "rx_bytes", "0")
  end,

  PacketsSent = function(mapping, param, key)
    return getIntfInfo(key, "tx_packets", "0")
  end,

  PacketsReceived = function(mapping, param, key)
    return getIntfInfo(key, "rx_packets", "0")
  end,

  ErrorsSent = function(mapping, param, key)
    return getIntfInfo(key, "tx_errors", "0")
  end,

  ErrorsReceived = function(mapping, param, key)
    return getIntfInfo(key, "rx_errors", "0")
  end,

  DiscardPacketsSent = function(mapping, param, key)
    return getIntfInfo(key, "tx_dropped", "0")
  end,

  DiscardPacketsReceived = function(mapping, param, key)
    return getIntfInfo(key, "rx_dropped", "0")
  end,
}

-- registering the Device.PTM.Link.{i}.Stats. object
register(Device_PTM_Link_i_Stats_)
