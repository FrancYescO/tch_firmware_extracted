-- Manually generated
local Device_Firewall_Multi_i_ = {
  objectType = {
    name = "Device.Firewall.#VENDOR.{i}.",
    access = "readWrite",
    minEntries = 0,
    maxEntries = math.huge,
    description = "Parameters to get or set a Firewall ipset entry",
    parameters = {
      IPSet = {
        access = "readWrite",
        type = "string",
        description = "Name that refers to an ipset entry",
      },
      Timeout = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
          },
        },
        default = "0",
        description = "Time out defined for an ipset entry",
      },
      IPAddressRange = {
        access = "readWrite",
        type = "string",
        description = "IPAddress range defined for an ipset entry",
      },
      Protocol = {
        access = "readWrite",
        type = "string",
        default = "tcp",
        description = "Protocol defined for an ipset entry",
      },
      PortRange = {
        access = "readWrite",
        type = "string",
        description = "Port range defined for an ipset entry",
      },
      SourceIPAddress = {
        access = "readWrite",
        type = "string",
        default = "",
        description = "Source IPAddress defined for an ipset entry",
      },
      DestIPAddress = {
        access = "readWrite",
        type = "string",
        default = "",
        description = "Destination IPAddress defined for an ipset entry",
      },
      Network = {
        access = "readWrite",
        type = "string",
        default = "",
        description = "Network used by an ipset entry",
      },
      NoMatch = {
        access = "readWrite",
        type = "boolean",
	default = "false",
        description = "Not matching storage value for an ipset entry",
      },
    }
  }
}

local commitapply, mapper, register = commitapply, mapper, register
local uciHelper = mapper("ucihelper")
local getFromUci = uciHelper.get_from_uci
local setOnUci = uciHelper.set_on_uci
local forEachOnUci = uciHelper.foreach_on_uci
local firewallBinding = { config = "firewall" }
local configChanged

Device_Firewall_Multi_i_.entries = function(mapping, parentKey)
  local ipsetEntries = {}
  firewallBinding.sectionname = "ipset_entry"
  forEachOnUci(firewallBinding, function(s)
    if s.ipset == parentKey then
      ipsetEntries[#ipsetEntries + 1] = s[".name"]
    end
  end)
  return ipsetEntries
end

local function ipsetGet(key, option, default)
  firewallBinding.sectionname = key
  firewallBinding.option = option
  firewallBinding.default = default
  return getFromUci(firewallBinding)
end

local function setUciValue(key, option, value)
  firewallBinding.sectionname = key
  firewallBinding.option = option
  setOnUci(firewallBinding, value, commitapply)
  configChanged = true
end

Device_Firewall_Multi_i_.get = {
  IPSet = function(mapping, param, key)
    return ipsetGet(key, "ipset")
  end,
  Timeout = function(mapping, param, key)
    return ipsetGet(key, "timeout", "0")
  end,
  IPAddressRange = function(mapping, param, key)
    return ipsetGet(key, "ip")
  end,
  Protocol = function(mapping, param, key)
    return ipsetGet(key, "proto", "tcp")
  end,
  PortRange = function(mapping, param, key)
    return ipsetGet(key, "port")
  end,
  DestIPAddress = function(mapping, param, key)
    return ipsetGet(key, "dest_ip")
  end,
  SourceIPAddress = function(mapping, param, key)
    return ipsetGet(key, "src_ip")
  end,
  Network = function(mapping, param, key)
    return ipsetGet(key, "network")
  end,
  NoMatch = function(mapping, param, key)
    return ipsetGet(key, "nomatch", "0")
  end,
}

Device_Firewall_Multi_i_.getall = function(mapping, key)
  firewallBinding.sectionname = key
  local allValues = uciHelper.getall_from_uci(firewallBinding)
  return {
    IPSet = allValues.ipset or "",
    Timeout = allValues.timeout or "0",
    IPAddressRange = allValues.ip or "",
    Protocol = allValues.proto or "tcp",
    PortRange = allValues.port or "",
    DestIPAddress = allValues.dest_ip or "",
    SourceIPAddress = allValues.src_ip or "",
    Network = allValues.network or "",
    NoMatch = allValues.nomatch or "",
  }
end

Device_Firewall_Multi_i_.set = {
  IPSet = function(mapping, param, value, key)
    setUciValue(key, "ipset", value)
  end,
  Timeout = function(mapping, param, value, key)
    setUciValue(key, "timeout", value)
  end,
  IPAddressRange = function(mapping, param, value, key)
    setUciValue(key, "ip", value)
  end,
  Protocol = function(mapping, param, value, key)
    setUciValue(key, "proto", value)
  end,
  PortRange = function(mapping, param, value, key)
    setUciValue(key, "port", value)
  end,
  SourceIPAddress = function(mapping, param, value, key)
    setUciValue(key, "src_ip", value)
  end,
  DestIPAddress = function(mapping, param, value, key)
    setUciValue(key, "dest_ip", value)
  end,
  Network = function(mapping, param, value, key)
    setUciValue(key, "network", value)
  end,
  NoMatch = function(mapping, param, value, key, parentkey)
    if ipsetGet(parentkey, "storage") ~= "hash:net" then
      return nil, "Set operation cannot be performed"
    end
    setUciValue(key, "nomatch", value)
  end,
}

Device_Firewall_Multi_i_.add = function(mapping, parentkey, key)
  local sname = "ipset_entry"
  firewallBinding.sectionname = sname
  local _key = uciHelper.generate_key(firewallBinding)
  firewallBinding.sectionname = _key
  firewallBinding.option = nil
  uciHelper.set_on_uci(firewallBinding, sname, commitapply)
  firewallBinding.option = "ipset"
  uciHelper.set_on_uci(firewallBinding, parentkey, commitapply)
  configChanged = true
  return _key
end

Device_Firewall_Multi_i_.delete = function(mapping,key)
  firewallBinding.sectionname = key
  firewallBinding.option = nil
  uciHelper.delete_on_uci(firewallBinding, commitapply)
  configChanged = true
  return true
end

Device_Firewall_Multi_i_.commit = function()
  if configChanged then
    uciHelper.commit(firewallBinding)
    configChanged = false
  end
end

Device_Firewall_Multi_i_.revert = function()
  if configChanged then
    uciHelper.revert(firewallBinding)
    configChanged = false
  end
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Device_Firewall_Multi_i_, "#VENDOR", { "X_000E50_IPSet.{i}.IPSetEntry", "X_BELGACOM_IPSet.{i}.IPSetEntry" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end
