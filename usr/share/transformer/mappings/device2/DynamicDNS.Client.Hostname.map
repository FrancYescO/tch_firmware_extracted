-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_DynamicDNS_Client_i_Hostname_i_ = {
  objectType = {
    name = "Device.DynamicDNS.Client.{i}.Hostname.{i}.",
    access = "readOnly", -- readWrite not supported
    numEntriesParameter = "HostnameNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Registered",
          "UpdateNeeded",
          "Updating",
          "Error",
          "Disabled",
        },
      },
      Name = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      LastUpdate = {
        access = "readOnly",
        type = "dateTime",
      },
    }
  }
}

local ddns = require("transformer.shared.ddns")
local uciHelper = mapper("ucihelper")
local ddnsBinding = { config = "ddns" }
local configChanged = false
local open = io.open

local paramMap = {
  Enable = "enabled",
  Name   = "domain"
}

local function getUciValue(key, param, default)
  ddnsBinding.sectionname = key
  if param then
    ddnsBinding.option = paramMap[param]
    ddnsBinding.default = default
    return uciHelper.get_from_uci(ddnsBinding)
  end
  return uciHelper.getall_from_uci(ddnsBinding)
end

local function getLastUpdate(key)
  local fd = open("/var/run/ddns/" .. key .. ".update")
  local lastUpdate = ""
  if fd then
    lastUpdate = fd:read("*a")
    lastUpdate = os.date("%Y-%m-%dT%H:%M:%SZ", tonumber(lastUpdate))
    fd:close()
  end
  return lastUpdate
end

local function findStatus(key)
  local status = ddns.getDdnsInfo(key)
  if status == "Connecting" then
    return "Updating"
  end
  return status
end

local function setUciParam(key, option, value)
  ddnsBinding.sectionname = key
  ddnsBinding.option = option
  uciHelper.set_on_uci(ddnsBinding, value, commitapply)
  configChanged = true
end

Device_DynamicDNS_Client_i_Hostname_i_.entries = function(mapping, parentKey)
  return { parentKey }
end

Device_DynamicDNS_Client_i_Hostname_i_.get = {
  Enable = function(mapping, param, key)
    return getUciValue(key, param)
  end,

  Status = function(mapping, param, key)
    return findStatus(key)
  end,

  Name = function(mapping, param, key)
    return getUciValue(key, param)
  end,

  LastUpdate = function(mapping, param, key)
    return getLastUpdate(key)
  end,
}

Device_DynamicDNS_Client_i_Hostname_i_.getall = function(mapping, key)
  local allValues = getUciValue(key)
  return {
    Enable = allValues.enabled or "0",
    Status = findStatus(key),
    Name   = allValues.domain or "",
    LastUpdate = getLastUpdate(key)
  }
end

Device_DynamicDNS_Client_i_Hostname_i_.set = function(mapping, param, value, key)
  setUciParam(key, paramMap[param], value)
  -- Update lookup_host in the ddns config
  if paramMap[param] == "domain" then
    setUciParam(key, "lookup_host", value)
  end
end

Device_DynamicDNS_Client_i_Hostname_i_.commit = function()
  if configChanged then
    uciHelper.commit(ddnsBinding)
    configChanged = false
  end
end

Device_DynamicDNS_Client_i_Hostname_i_.revert = function()
  if configChanged then
    uciHelper.revert(ddnsBinding)
    configChanged = false
  end
end

register(Device_DynamicDNS_Client_i_Hostname_i_)
