-- Automatically generated from Device:2.11
-- using generator version 2.3
local Device_RouterAdvertisement_InterfaceSetting_i_Option_i_ = {
  objectType = {
    name = "Device.RouterAdvertisement.InterfaceSetting.{i}.Option.{i}.",
    access = "readOnly", -- curently readWrite not supported
    numEntriesParameter = "InterfaceSettingNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readOnly", -- ReadWrite currently not supported.
        type = "boolean",
        default = "false",
      },
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
      },
      Tag = {
        access = "readOnly", -- ReadWrite currently not supported.
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "65535",
          },
        },
      },
      Value = {
        access = "readWrite",
        type = "string",
        default = "",
      },
    }
  }
}

local pairs = pairs
local mapper, commitApply, type = mapper, commitapply, type
local uciHelper = mapper("ucihelper")
local list = require("transformer.shared.common.list")
local forEachOnUci = uciHelper.foreach_on_uci
local getFromUci = uciHelper.get_from_uci
local setOnUci = uciHelper.set_on_uci
local dhcpBinding = {config = "dhcp"}
local configChanged = false

local optionToTag = {
  dns = "23",
  domain = "24",
}

Device_RouterAdvertisement_InterfaceSetting_i_Option_i_.entries = function(mapping, parentkey)
  local entries = {}
  for sentOption in pairs(optionToTag) do
    entries[#entries + 1] = parentkey .. "|" .. sentOption
  end
  return entries
end

local function getUciParam(sectionName, key)
  local _, option = key:match("^(.*)|(.*)")
  dhcpBinding.sectionname = sectionName
  dhcpBinding.option = option
  return getFromUci(dhcpBinding)
end

local function setUciParam(sectionName, key, value)
  local _, option = key:match("^(.*)|(.*)")
  dhcpBinding.option = option
  dhcpBinding.sectionname = sectionName
  local listValue = list.csvSplit(value)
  setOnUci(dhcpBinding, listValue, commitApply)
  configChanged = true
end

Device_RouterAdvertisement_InterfaceSetting_i_Option_i_.get = {
  Enable = "1", -- By default it will be enabled for all the options
  Tag = function(mapping, param, key)
    local _, tag = key:match("^(.*)|(.*)")
    return optionToTag[tag]
  end,
  Value = function(mapping, param, key, parentKey)
    local result = getUciParam(parentKey, key)
    if type(result) == "table" then
      result = table.concat(result, ",")
    end
    return result
  end,
}

Device_RouterAdvertisement_InterfaceSetting_i_Option_i_.set = {
  Value = function(mapping, param, value, key, parentKey)
    setUciParam(parentKey, key, value)
  end
}

Device_RouterAdvertisement_InterfaceSetting_i_Option_i_.commit = function()
  if configChanged then
    uciHelper.commit(dhcpBinding)
    configChanged = false
  end
end

Device_RouterAdvertisement_InterfaceSetting_i_Option_i_.revert = function()
  if configChanged then
    uciHelper.revert(dhcpBinding)
    configChanged = false
  end
end

register(Device_RouterAdvertisement_InterfaceSetting_i_Option_i_)
