-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_ATM_Link_i_Stats_ = {
  objectType = {
    name = "Device.ATM.Link.{i}.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      BytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      PacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      PacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      ErrorsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ErrorsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UnicastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      UnicastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      DiscardPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DiscardPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      MulticastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      MulticastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BroadcastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BroadcastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      UnknownProtoPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      TransmittedBlocks = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ReceivedBlocks = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      CRCErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      HECErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

local nwmodel = require "transformer.shared.models.device2.network"

local nwcommon = mapper("nwcommon")
local nw_getIntfInfo = nwcommon.getIntfInfo
local nw_getIntfStats = nwcommon.getIntfStats

local function getIntfInfo(key, field, default)
  local model = nwmodel.load()
  local device = model:getDevice(key)
  if device then
    return nw_getIntfInfo(device, field, default)
  end
  return default 
end

local function getIntfStats(key, field, default)
  local model = nwmodel.load()
  local device = model:getDevice(key)
  if device then
    return nw_getIntfStats(device, field, default)
  end
  return default
end

local atmStatsMap = {
  BytesSent = "tx_bytes",
  BytesReceived = "rx_bytes",
  PacketsSent = "tx_packets",
  PacketsReceived = "rx_packets",
  ErrorsSent = "tx_errors",
  ErrorsReceived = "rx_errors",
  DiscardPacketsSent = "tx_dropped",
  DiscardPacketsReceived = "rx_dropped",
  CRCErrors = "rx_crc_errors",
}

local atmExtStatsMap = {
  UnicastPacketsSent = "tx_unicast",
  UnicastPacketsReceived = "rx_unicast",
  MulticastPacketsSent = "txpckt",
  MulticastPacketsReceived = "multicast",
  BroadcastPacketsSent = "tx_broadcast",
  BroadcastPacketsReceived = "rx_broadcast",
  UnknownProtoPacketsReceived = "rxerr",
  TransmittedBlocks = "tx_pckts",
  ReceivedBlocks = "rx_pckts",
}

-- get function to get the values of Device.ATM.Link.{i}.Stats. parameters
Device_ATM_Link_i_Stats_.get = function(mapping, param, key)
  if atmStatsMap[param] then
    return getIntfInfo(key, atmStatsMap[param], "0")
  elseif atmExtStatsMap[param] then
    return getIntfStats(key,atmExtStatsMap[param],"0")
  elseif param == "HECErrors" then
    return "0"
  end
end

-- registering the Device.ATM.Link.{i}.Stats. object
register(Device_ATM_Link_i_Stats_)
