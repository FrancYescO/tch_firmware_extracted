local mobiled_mapping_helper = require("transformer.shared.mobiled_helper")

local obj = {
	objectType = {
		name = 'Device.Cellular.Interface.{i}.X_000E50_LTE_Debug.Radio_SignalQuality.',
		access = 'readOnly',
		minEntries = 1,
		maxEntries = 1,
		parameters = {
			RSRQ = {
				access = "readOnly",
				type = "string"
			},
			RSSI = {
				access = "readOnly",
				type = "string"
			},
			RSRP = {
				 access = "readOnly",
				 type = "string"
			},
			ECIO = {
				 access = "readOnly",
				 type = "string"
			},
			RSCP = {
				 access = "readOnly",
				 type = "string"
			},
			LTE_DL_Bandwidth = {
				access = "readOnly",
				type = "string"
			},
			LTE_UL_Bandwidth = {
				access = "readOnly",
				type = "string"
			},
			LTE_Band = {
				access = "readOnly",
				type = "string"
			},
			SINR = {
				access = "readOnly",
				type = "string"
			},
			PHY_Cell_ID = {
				access = "readOnly",
				type = "string"
			},
			EARFCN = {
				access = "readOnly",
				type = "string"
			},
			Radio_Interface = {
				access = "readOnly",
				type = "string"
			},

			Radio_Bearer_Type = {
				access = "readOnly",
				type = "string"
			},
		}
	}
}

local conn = mapper("ubus").connect()

function obj.getall(_, key)
	local result = {}
	setmetatable(result, { __index = function() return "" end })

	local data = mobiled_mapping_helper.getUbusInfoUseCellularInterfaceKey(conn, "mobiled.radio", "signal_quality", key)
	if data then
		result.RSRQ = data.rsrq
		result.RSSI = data.rssi
		result.RSRP = data.rsrp
		result.ECIO = data.ecio
		result.RSCP = data.signal_quality.rscp
		result.Radio_Interface = data.radio_interface
		result.Radio_Bearer_Type = data.radio_bearer_type
		result.LTE_DL_Bandwidth = data.lte_dl_bandwidth
		result.LTE_UL_Bandwidth = data.lte_ul_bandwidth
		result.LTE_Band = data.lte_band
		result.SINR = data.sinr
		result.PHY_Cell_ID = data.phy_cell_id
		result.EARFCN = data.dl_earfcn
	end

	return result
end

function obj.get(_, paramName, key)
	return obj.getall(_, key)[paramName]
end

register(obj)

local Device_Cellular_Interface_i_X__000E50_LTE_Debug_Radio_AdditionalCarriers = {
	objectType = {
		name = 'Device.Cellular.Interface.{i}.X_000E50_LTE_Debug.Radio_SignalQuality.AdditionalCarriers.{i}.',
		access = 'readOnly',
		numEntriesParameter = "AdditionalCarriersNumberOfEntries",
		minEntries = 0,
		maxEntries = math.huge,
		parameters = {
			RSRQ = {
				access = "readOnly",
				type = "string"
			},
			RSSI = {
				access = "readOnly",
				type = "string"
			},
			RSRP = {
				 access = "readOnly",
				 type = "string"
			},
			LTE_DL_Bandwidth = {
				access = "readOnly",
				type = "string"
			},
			LTE_Band = {
				access = "readOnly",
				type = "string"
			},
			SINR = {
				access = "readOnly",
				type = "string"
			},
			PHY_Cell_ID = {
				access = "readOnly",
				type = "string"
			},
			DL_EARFCN = {
				access = "readOnly",
				type = "string"
			},
		}
	}
}

function Device_Cellular_Interface_i_X__000E50_LTE_Debug_Radio_AdditionalCarriers.getall(_, key, parentKey)
	local result = {}
	setmetatable(result, { __index = function() return "" end })

	key = tonumber(key)
	local data = mobiled_mapping_helper.getUbusInfoUseCellularInterfaceKey(conn, "mobiled.radio", "signal_quality", parentKey)
	if data and data.additional_carriers and data.additional_carriers[key] then
		local additional_carrier = data.additional_carriers[key]
		result.RSRQ = additional_carrier.rsrq
		result.RSSI = additional_carrier.rssi
		result.RSRP = additional_carrier.rsrp
		result.SINR = additional_carrier.sinr
		result.LTE_DL_Bandwidth = additional_carrier.lte_dl_bandwidth
		result.LTE_Band = additional_carrier.lte_band
		result.PHY_Cell_ID = additional_carrier.phy_cell_id
		result.DL_EARFCN = additional_carrier.dl_earfcn
	end
	return result
end

function Device_Cellular_Interface_i_X__000E50_LTE_Debug_Radio_AdditionalCarriers.get(mapping, paramName, key, parentKey)
	return Device_Cellular_Interface_i_X__000E50_LTE_Debug_Radio_AdditionalCarriers.getall(mapping, key, parentKey)[paramName] or ""
end

function Device_Cellular_Interface_i_X__000E50_LTE_Debug_Radio_AdditionalCarriers.entries(_, parentKey)

	local data = mobiled_mapping_helper.getUbusInfoUseCellularInterfaceKey(conn, "mobiled.radio", "signal_quality", parentKey)
	local additional_carrier_indexes = {}
	if type(data.additional_carriers) == "table" then
		for additional_carrier in ipairs(data.additional_carriers) do
			table.insert(additional_carrier_indexes, tostring(additional_carrier))
		end
	end
	return additional_carrier_indexes
end

register(Device_Cellular_Interface_i_X__000E50_LTE_Debug_Radio_AdditionalCarriers)

local Device_Cellular_Interface_i_X__000E50_LTE_Debug_Radio_AdditionalCarriers_Parent = {
  objectType = {
    name = "Device.Cellular.Interface.{i}.X_000E50_LTE_Debug.Radio_SignalQuality.AdditionalCarriers.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      -- No parameters as it is the top level to add the content of different ubus commands to
    }
  }
}

register(Device_Cellular_Interface_i_X__000E50_LTE_Debug_Radio_AdditionalCarriers_Parent)
