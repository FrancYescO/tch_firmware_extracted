-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_Bridging_Bridge_i_VLANPort_i_ = {
  objectType = {
    name = "Device.Bridging.Bridge.{i}.VLANPort.{i}.",
    access = "readOnly", -- readWrite not supported
    numEntriesParameter = "VLANPortNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
      },
      VLAN = {
        access = "readOnly", -- readWrite not supported
        type = "string",
        max = "256",
        pathRef = true,
        targetParent = "Device.Bridging.Bridge.{i}.VLAN.{i}.",
        default = "",
      },
      Port = {
        access = "readOnly", -- readWrite not supported
        type = "string",
        max = "256",
        pathRef = true,
        targetParent = "Device.Bridging.Bridge.{i}.Port.{i}.",
        default = "",
      },
      Untagged = {
        access = "readOnly", -- readWrite not supported
        type = "boolean",
      },
    }
  }
}

local mapper, resolve = mapper, resolve
local ubusConnection = mapper("ubus").connect()
local uciHelper = mapper("ucihelper")
local networkBinding = { config = "network" }
local isConfigChanged = false
local keyToSectionName = {}

Device_Bridging_Bridge_i_VLANPort_i_.entries = function(mapping, parentKey)
  local bridgeVlanEntries = {}
  keyToSectionName = {}
  local data = ubusConnection:call("network.device", "status",  { name = parentKey })
  local members = data and data['bridge-members'] or {}
  networkBinding.sectionname = "device"
  for _,k in ipairs(members) do
    uciHelper.foreach_on_uci(networkBinding, function(s)
      if s.name == k and s.type == "8021q" then
        bridgeVlanEntries[#bridgeVlanEntries + 1] = s["name"]
        keyToSectionName[s.name] = s['.name']
      end
    end)
  end
  return bridgeVlanEntries
end

Device_Bridging_Bridge_i_VLANPort_i_.get = {
  Enable = function(mapping, param, key)
    networkBinding.sectionname = keyToSectionName[key]
    networkBinding.option = "enabled"
    local enableValue = uciHelper.get_from_uci(networkBinding)
    return enableValue ~= "" and enableValue or "1"
  end,

  VLAN = function(mapping, param, key)
    return resolve("Device.Bridging.Bridge.{i}.VLAN.{i}.", keyToSectionName[key]) or ""
  end,

  Port = function(mapping, param, key, parentKey)
    return resolve("Device.Bridging.Bridge.{i}.Port.{i}.", parentKey .. ":" .. key) or ""
  end,

  Untagged = "1",
}

-- getall implementation is not done as it will not bring any improvement

Device_Bridging_Bridge_i_VLANPort_i_.set = {
  Enable = function(mapping, param, value, key)
    networkBinding.sectionname = keyToSectionName[key]
    networkBinding.option = "enabled"
    uciHelper.set_on_uci(networkBinding, value, commitapply)
    isConfigChanged = true
  end,
}

Device_Bridging_Bridge_i_VLANPort_i_.commit = function()
  if isConfigChanged then
    uciHelper.commit(networkBinding)
    isConfigChanged = false
  end
end

Device_Bridging_Bridge_i_VLANPort_i_.revert = function()
  if isConfigChanged then
    uciHelper.revert(networkBinding)
    isConfigChanged = false
  end
end

register(Device_Bridging_Bridge_i_VLANPort_i_)
