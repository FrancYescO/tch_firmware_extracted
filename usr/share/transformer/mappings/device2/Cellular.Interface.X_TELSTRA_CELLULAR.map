local helper = require("mobiled.scripthelpers")
local ltedoctor = require("transformer.shared.ltedoctor")
local mobileconnection = require("transformer.shared.mobileconnection")

local obj = {
	objectType = {
		name = 'Device.Cellular.Interface.{i}.X_TELSTRA_CELLULAR.',
		access = 'readOnly',
		minEntries = 1,
		maxEntries = 1,
		parameters = {
			RSRQHistory = {
				access = "readOnly",
				type = "string"
			},
			RSRPHistory = {
				 access = "readOnly",
				 type = "string"
			},
			SINRHistory = {
				 access = "readOnly",
				 type = "string"
			},
			StatusHistory = {
				 access = "readOnly",
				 type = "string"
			},
			RegistrationHistory = {
				 access = "readOnly",
				 type = "string"
			},
			RSRQ = {
				access = "readOnly",
				type = "string"
			},
			RSSI = {
				access = "readOnly",
				type = "string"
			},
			RSRP = {
				 access = "readOnly",
				 type = "string"
			},
			ECIO = {
				 access = "readOnly",
				 type = "string"
			},
			SNR = {
				 access = "readOnly",
				 type = "string"
			},
			RSCP = {
				 access = "readOnly",
				 type = "string"
			},
			LTE_Bandwidth = {
				access = "readOnly",
				type = "string"
			},
			LTE_Band = {
				access = "readOnly",
				type = "string"
			},
			SINR = {
				access = "readOnly",
				type = "string"
			},
			TAC = {
				access = "readOnly",
				type = "string"
			},
			ECI = {
				access = "readOnly",
				type = "string"
			},
			EPS = {
				access = "readOnly",
				type = "string"
			},
			AvailableCells = {
				access = "readOnly",
				type = "string"
			},
			PHY_CELL_ID = {
				access = "readOnly",
				type = "string"
			},
			EARFCN = {
				access = "readOnly",
				type = "string"
			},
		}
	}
}

local concat, tinsert = table.concat, table.insert

local uci_helper = mapper("ucihelper")
local conn = mapper("ubus").connect()

local dev_idx = 1
local max_age = 5
local min_interval = (15*60)

local signal_map = { RSRQHistory = "rsrq", RSRPHistory = "rsrp", SINRHistory = "sinr"}

local function get_signal_history(record, reboot_time)
	local entries = helper.getUbusData(conn, "ltedoctor", "history", { dev_idx = dev_idx, logger = "mobiled_signal_quality", min_interval = min_interval })
	if type(entries.mobiled_signal_quality) == "table" then
		for _, entry in pairs(entries.mobiled_signal_quality) do
			if entry.data.mobiled_radio_signal_quality then
				local timestamp = os.date("%FT%T", entry.uptime + reboot_time)
				for _, v in pairs(signal_map) do
					if entry.data.mobiled_radio_signal_quality[v] and entry.data.mobiled_radio_signal_quality[v] ~= "" then
						tinsert(record[v], timestamp .. " " .. entry.data.mobiled_radio_signal_quality[v])
					end
				end
			end
		end
	end
end

local function get_status_history(record, reboot_time)
	local entries = helper.getUbusData(conn, "ltedoctor", "history", { dev_idx = dev_idx, logger = "mobiled_events" })
	if type(entries.mobiled_events) == "table" then
		for _, entry in pairs(entries.mobiled_events) do
			if entry.data and entry.data.event and entry.data.event ~= "session_state_changed" then
				local timestamp = os.date("%FT%T", entry.uptime + reboot_time)
				tinsert(record["StatusHistory"], timestamp .. " " .. entry.data.event)
			end
		end
	end
end

local function get_registration_history(record, reboot_time)
	local entries = helper.getUbusData(conn, "ltedoctor", "history", { dev_idx = dev_idx, logger = "mobiled_voice_events" })
	if type(entries.mobiled_voice_events) == "table" then
		for _, entry in pairs(entries.mobiled_voice_events) do
			if entry.data and entry.data.event and entry.data.event == "registration_state_changed" then
				local timestamp = os.date("%FT%T", entry.uptime + reboot_time)
				tinsert(record["RegistrationHistory"], timestamp .. " " .. entry.data.event)
			end
		end
	end
end

local function get_available_cells(record, neighbour_cells)
	if type(neighbour_cells) == "table" then
		for _, entry in pairs(neighbour_cells) do
			if entry.rsrq and entry.rsrp and entry.sinr and entry.phy_cell_id and entry.dl_earfcn and entry.rssi then
				tinsert(record["AvailableCells"], "Unknown" .. " " .. "Unknown" .. " " .. entry.rsrq .. " " ..
												entry.rsrp .. " " .. entry.sinr .. " " .. entry.phy_cell_id .. " "
												.. entry.dl_earfcn .. " " .. entry.rssi)
			end
		end
	end
end

function obj.getall()
	local record = {
		StatusHistory = {},
		RegistrationHistory = {},
		AvailableCells = {}
	}
	for _, v in pairs(signal_map) do
		record[v] = {}
	end

	local uptime = ltedoctor.getUptime(conn)
	local reboot_time = os.time() - uptime

	get_signal_history(record, reboot_time)
	get_status_history(record, reboot_time)
	get_registration_history(record, reboot_time)

	local result = {}
	setmetatable(result, { __index = function() return "" end })
	for k, v in pairs(signal_map) do
		result[k] = concat(record[v],",")
	end
	result["StatusHistory"] = concat(record["StatusHistory"], ",")
	result["RegistrationHistory"] = concat(record["RegistrationHistory"], ",")

	local serving_system = helper.getUbusData(conn, "mobiled.network", "serving_system", { dev_idx = dev_idx, max_age = max_age })
	result.TAC = serving_system.tracking_area_code
	result.ECI = serving_system.cell_id

	local neighbour_cells = serving_system.neighbour_cells
	get_available_cells(record, neighbour_cells)
	result["AvailableCells"] = concat(record["AvailableCells"], ",")

	uci_helper.foreach_on_uci({config="network", sectionname="interface"}, function(s)
		if s.proto == "mobiled" and s.profile and s.session_id then
			local intf = mobileconnection.get_network_interface(s['.name'])
			result.EPS = intf.ipv4_addr and intf.ipv6_addr and intf.ipv4_addr .. "," .. intf.ipv6_addr or intf.ipv4_addr or intf.ipv6_addr or ""
		end
	end)

	if serving_system.nas_state == 'registered' then
		local data = helper.getUbusData(conn, "mobiled.radio", "signal_quality", { dev_idx = dev_idx, max_age = max_age })
		result.RSRQ = data.rsrq
		result.RSSI = data.rssi
		result.RSRP = data.rsrp
		result.ECIO = data.ecio
		result.SNR = data.snr
		result.RSCP = data.rscp
		result.LTE_Bandwidth = data.lte_dl_bandwidth
		result.LTE_Band = data.lte_band
		result.SINR = data.sinr
		result.PHY_CELL_ID = data.phy_cell_id or ""
		result.EARFCN = data.dl_earfcn or ""
	end

	return result
end

function obj.get(mapping, paramName, key)
	return obj.getall(mapping, key)[paramName]
end

register(obj)

local Device_Cellular_Interface_i_X_TELSTRA_CELLULAR_SecondaryComponentCarrier = {
	objectType = {
		name = 'Device.Cellular.Interface.{i}.X_TELSTRA_CELLULAR.SecondaryComponentCarrier.',
		access = 'readOnly',
		minEntries = 1,
		maxEntries = 1,
		parameters = {
			RSRQ = {
				access = "readOnly",
				type = "string"
			},
			RSSI = {
				access = "readOnly",
				type = "string"
			},
			RSRP = {
				 access = "readOnly",
				 type = "string"
			},
			LTE_Bandwidth = {
				access = "readOnly",
				type = "string"
			},
			LTE_Band = {
				access = "readOnly",
				type = "string"
			},
			SINR = {
				access = "readOnly",
				type = "string"
			},
			PHY_CELL_ID = {
				access = "readOnly",
				type = "string"
			},
			EARFCN = {
				access = "readOnly",
				type = "string"
			},
		}
	}
}

local function getall()
	local result = {}

	local serving_system = helper.getUbusData(conn, "mobiled.network", "serving_system", { dev_idx = dev_idx, max_age = max_age })
	if serving_system.nas_state == 'registered' then
		local data = helper.getUbusData(conn, "mobiled.radio", "signal_quality", { dev_idx = dev_idx, max_age = max_age })
		data = data and data.additional_carriers and data.additional_carriers[1] or {}
		result.RSRQ = data.rsrq and tostring(data.rsrq) or ""
		result.RSSI = data.rssi and tostring(data.rssi) or ""
		result.RSRP = data.rsrp and tostring(data.rsrp) or ""
		result.SINR = data.sinr and tostring(data.sinr) or ""
		result.LTE_Bandwidth = data.lte_dl_bandwidth and tostring(data.lte_dl_bandwidth) or ""
		result.LTE_Band = data.lte_band and tostring(data.lte_band) or ""
		result.PHY_CELL_ID = data.phy_cell_id and tostring(data.phy_cell_id) or ""
		result.EARFCN = data.dl_earfcn and tostring(data.dl_earfcn) or ""
    end
    return result
end

Device_Cellular_Interface_i_X_TELSTRA_CELLULAR_SecondaryComponentCarrier.getall = getall

Device_Cellular_Interface_i_X_TELSTRA_CELLULAR_SecondaryComponentCarrier.get = function(mapping, paramName, key)
    return getall()[paramName] or ""
end

register(Device_Cellular_Interface_i_X_TELSTRA_CELLULAR_SecondaryComponentCarrier)
