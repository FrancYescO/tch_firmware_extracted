-- Automatically generated from Device:2.2
-- using generator version 2.1
local Device_DSL_Channel_i_Stats_QuarterHour_ = {
  objectType = {
    name = "Device.DSL.Channel.{i}.Stats.QuarterHour.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      XTURFECErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      XTUCFECErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      XTURHECErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      XTUCHECErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      XTURCRCErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      XTUCCRCErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

local xdslctl = require('transformer.shared.xdslctl')

Device_DSL_Channel_i_Stats_QuarterHour_.get={
  XTURFECErrors = function (mapping, param, key)
    return xdslctl.stats("currentquarter","fec","ds", key)
  end,
  XTUCFECErrors =  function (mapping, param, key)
    return xdslctl.stats("currentquarter","fec","us", key)
  end,
  XTURHECErrors = function (mapping, param, key)
    return xdslctl.stats("currentquarter","hec","ds", key)
  end,
  XTUCHECErrors = function (mapping, param, key)
    return xdslctl.stats("currentquarter","hec","us", key)
  end,
  XTURCRCErrors = function (mapping, param, key)
    return xdslctl.stats("currentquarter","crc","ds", key)
  end,
  XTUCCRCErrors = function (mapping, param, key)
    return xdslctl.stats("currentquarter","crc","us", key)
  end,
}

-- registering the Device.DSL.Channel.{i}.Stats.QuarterHour. object
register(Device_DSL_Channel_i_Stats_QuarterHour_)

