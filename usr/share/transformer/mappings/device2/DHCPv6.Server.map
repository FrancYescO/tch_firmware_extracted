-- Automatically generated from Device:2.9
-- using generator version 2.2
local Device_DHCPv6_Server_ = {
  objectType = {
    name = "Device.DHCPv6.Server.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      -- PoolNumberOfEntries
      -- automatically created when Device.DHCPv6.Server.Pool.{i}. is loaded
    }
  }
}

local uciHelper = mapper("ucihelper")
local forEachOnUci = uciHelper.foreach_on_uci
local isConfigChanged = false

local dhcpBinding = { config = "dhcp" }

local function setUciParam(sectionName, paramName, value)
  dhcpBinding.sectionname = sectionName
  dhcpBinding.option = paramName
  uciHelper.set_on_uci(dhcpBinding, value, commitapply)
  isConfigChanged = true
end

Device_DHCPv6_Server_.set = function(mapping, param, value)
  if param == "Enable" then
    -- Modify all DHCP pools as per new value
    value = (value == "1") and "server" or "disabled"
    dhcpBinding.sectionname = "dhcp"
    forEachOnUci(dhcpBinding, function(s)
      if s["dhcpv6"] then
        setUciParam(s[".name"], "ra", value)
        setUciParam(s[".name"], "dhcpv6", value)
      end
    end)
  end
end

Device_DHCPv6_Server_.get = {
  Enable = function()
    -- Get all DHCP Pools status to decide global status
    local enable = "0"
    dhcpBinding.sectionname = "dhcp"
    forEachOnUci(dhcpBinding, function(s)
      if s["dhcpv6"] == "server" and s["ra"] == "server"  then
        enable = "1"
        return false --break from forEachOnUci when the first enabled DHCP Pool is found
      end
    end)
    return enable
  end,
}

Device_DHCPv6_Server_.commit = function()
  if isConfigChanged then
    uciHelper.commit(dhcpBinding)
    isConfigChanged = false
  end
end

Device_DHCPv6_Server_.revert = function()
  if isConfigChanged then
    uciHelper.revert(dhcpBinding)
    isConfigChanged = false
  end
end

register(Device_DHCPv6_Server_)
