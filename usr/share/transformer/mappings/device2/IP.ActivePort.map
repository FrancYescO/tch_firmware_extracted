-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_IP_ActivePort_i_ = {
  objectType = {
    name = "Device.IP.ActivePort.{i}.",
    access = "readOnly",
    numEntriesParameter = "ActivePortNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      LocalIPAddress = {
        access = "readOnly",
        type = "string",
      },
      LocalPort = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "65535",
          },
        },
      },
      RemoteIPAddress = {
        access = "readOnly",
        type = "string",
      },
      RemotePort = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "65535",
          },
        },
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "LISTEN",
          "ESTABLISHED",
        },
      },
    }
  }
}

local IPActivePorts = {}
local string = string
local match = string.match

local activeFields = {
  [1] = "proto",
  [4] = "localAddress",
  [5] = "foreignAddress",
  [6] = "state",
}

local function loadActivePorts()
  local activePorts = {}
  local fp = io.popen('netstat -tulpn')
  if fp then
    for line in fp:lines() do
      if line:match("^tcp") then
        local ports = {}
        local index = 1
        for field in line:gmatch("%S+") do
          if activeFields[index] then
            ports[activeFields[index]] = field
          end
          index = index +1
        end
        activePorts[#activePorts + 1] = ports
      end
    end
    fp:close()
  end
  return activePorts
end

Device_IP_ActivePort_i_.entries = function()
  local activePortEntries = {}
  IPActivePorts = {}
  local key
  for _, ports in ipairs(loadActivePorts()) do
    key = string.format("%s|%s|%s", ports.localAddress, ports.foreignAddress, ports.state)
    if not IPActivePorts[key] then
      activePortEntries[#activePortEntries + 1] = key
      IPActivePorts[key] = ports
    end
  end
  return activePortEntries
end

Device_IP_ActivePort_i_.get = {
  LocalIPAddress = function(mapping, param, key)
    return (match(IPActivePorts[key].localAddress,"(.*):.*")) or ""
  end,
  LocalPort = function(mapping, param, key)
    return (match(IPActivePorts[key].localAddress,".*:(.*)")) or ""
  end,
  RemoteIPAddress = function(mapping, param, key)
    return (match(IPActivePorts[key].foreignAddress,"(.*):.*")) or ""
  end,
  RemotePort = function(mapping, param, key)
    local remotePort = string.gsub(IPActivePorts[key].foreignAddress,"*" ,"0" )
    return (match(remotePort,".*:(.*)")) or ""
  end,
  Status = function(mapping, param, key)
    return (IPActivePorts[key].state) or ""
  end,
}

-- A getall implementation is not done as it will not bring any improvement,
-- as data retrieval is done in the entries call. The get will use the cached
-- data, no work is duplicated.
register(Device_IP_ActivePort_i_)
