-- Automatically generated from Device:2.9
-- using generator version 2.2
local Device_DSL_Line_i_ = {
  objectType = {
    name = "Device.DSL.Line.{i}.",
    access = "readOnly",
    numEntriesParameter = "LineNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readOnly", -- readWrite currently not supported
        type = "boolean",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Up",
          "Down",
          "Unknown",
          "Dormant",
          "NotPresent",
          "LowerLayerDown",
          "Error",
        },
      },
      Name = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      Alias = {
        access = "readWrite",
        type = "string",
        max = "64",
      },
      LowerLayers = {
        access = "readOnly", --  readWrite currently not supported
        list = true,
        max = "1024",
        type = "string",
        pathRef = true,
      },
      Upstream = {
        access = "readOnly",
        type = "boolean",
      },
      FirmwareVersion = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      LinkStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Up",
          "Initializing",
          "EstablishingLink",
          "NoSignal",
          "Disabled",
          "Error",
        },
      },
      StandardsSupported = {
        access = "readOnly",
        status = "deprecated",
        list = true,
        type = "string",
        enumeration = {
          "G.992.1_Annex_A",
          "G.992.1_Annex_B",
          "G.992.1_Annex_C",
          "T1.413",
          "T1.413i2",
          "ETSI_101_388",
          "G.992.2",
          "G.992.3_Annex_A",
          "G.992.3_Annex_B",
          "G.992.3_Annex_C",
          "G.992.3_Annex_I",
          "G.992.3_Annex_J",
          "G.992.3_Annex_L",
          "G.992.3_Annex_M",
          "G.992.4",
          "G.992.5_Annex_A",
          "G.992.5_Annex_B",
          "G.992.5_Annex_C",
          "G.992.5_Annex_I",
          "G.992.5_Annex_J",
          "G.992.5_Annex_M",
          "G.993.1",
          "G.993.1_Annex_A",
          "G.993.2_Annex_A",
          "G.993.2_Annex_B",
          "G.993.2_Annex_C",
        },
      },
      StandardUsed = {
        access = "readOnly",
        status = "deprecated",
        type = "string",
        enumeration = {
          "G.992.1_Annex_A",
          "G.992.1_Annex_B",
          "G.992.1_Annex_C",
          "T1.413",
          "T1.413i2",
          "ETSI_101_388",
          "G.992.2",
          "G.992.3_Annex_A",
          "G.992.3_Annex_B",
          "G.992.3_Annex_C",
          "G.992.3_Annex_I",
          "G.992.3_Annex_J",
          "G.992.3_Annex_L",
          "G.992.3_Annex_M",
          "G.992.4",
          "G.992.5_Annex_A",
          "G.992.5_Annex_B",
          "G.992.5_Annex_C",
          "G.992.5_Annex_I",
          "G.992.5_Annex_J",
          "G.992.5_Annex_M",
          "G.993.1",
          "G.993.1_Annex_A",
          "G.993.2_Annex_A",
          "G.993.2_Annex_B",
          "G.993.2_Annex_C",
        },
      },
      LineEncoding = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "DMT",
          "CAP",
          "2B1Q",
          "43BT",
          "PAM",
          "QAM",
        },
      },
      AllowedProfiles = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "8a",
          "8b",
          "8c",
          "8d",
          "12a",
          "12b",
          "17a",
          "17b",
          "30a",
          "",
        },
      },
      CurrentProfile = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "8a",
          "8b",
          "8c",
          "8d",
          "12a",
          "12b",
          "17a",
          "17b",
          "30a",
          "",
        },
      },
      PowerManagementState = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "L0",
          "L1",
          "L2",
          "L3",
          "L4",
        },
      },
      TRELLISds = {
        access = "readOnly",
        type = "int",
      },
      TRELLISus = {
        access = "readOnly",
        type = "int",
      },
      LineNumber = {
        access = "readOnly",
        type = "int",
        range = {
          {
            min = "1",
          },
        },
      },
      UpstreamMaxBitRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamMaxBitRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamNoiseMargin = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamNoiseMargin = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      UpstreamAttenuation = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamAttenuation = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      UpstreamPower = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamPower = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      XTURVendor = {
        access = "readOnly",
        type = "hexBinary",
        min = "4",
        max = "4",
      },
      XTURCountry = {
        access = "readOnly",
        type = "hexBinary",
        min = "2",
        max = "2",
      },
      XTURANSIStd = {
        access = "readOnly",
        type = "unsignedInt",
      },
      XTURANSIRev = {
        access = "readOnly",
        type = "unsignedInt",
      },
      SNRMpbus = {
        access = "readOnly",
        list = true,
        max = "24",
        type = "string",
      },
      SNRMpbds = {
        access = "readOnly",
        list = true,
        max = "24",
        type = "string",
      },
      XTUCCountry = {
        access = "readOnly",
        type = "hexBinary",
        min = "2",
        max = "2",
      },
--[[ TO DO
      LastChange = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      EnableDataGathering = {
        access = "readWrite",
        type = "boolean",
      },
      XTSE = {
        access = "readOnly",
        type = "hexBinary",
        min = "8",
        max = "8",
      },
      XTSUsed = {
        access = "readOnly",
        type = "hexBinary",
        min = "8",
        max = "8",
      },
      SuccessFailureCause = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "6",
          },
        },
      },
      UPBOKLER = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "1280",
          },
        },
      },
      UPBOKLEPb = {
        access = "readOnly",
        list = true,
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "1280",
          },
          {
            min = "2047",
            max = "2047",
          },
        },
      },
      UPBOKLERPb = {
        access = "readOnly",
        list = true,
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "1280",
          },
          {
            min = "2047",
            max = "2047",
          },
        },
      },
      RXTHRSHds = {
        access = "readOnly",
        type = "int",
        range = {
          {
            min = "-640",
            max = "0",
          },
        },
      },
      ACTRAMODEds = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "1",
            max = "4",
          },
        },
      },
      ACTRAMODEus = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "1",
            max = "4",
          },
        },
      },
      ACTINPROCds = {
        access = "readOnly",
        type = "unsignedInt",
      },
      ACTINPROCus = {
        access = "readOnly",
        type = "unsignedInt",
      },
      SNRMROCds = {
        access = "readOnly",
        type = "unsignedInt",
      },
      SNRMROCus = {
        access = "readOnly",
        type = "unsignedInt",
      },
      LastStateTransmittedDownstream = {
        access = "readOnly",
        type = "unsignedInt",
      },
      LastStateTransmittedUpstream = {
        access = "readOnly",
        type = "unsignedInt",
      },
      UPBOKLE = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "1280",
          },
        },
      },
      MREFPSDds = {
        access = "readOnly",
        type = "base64",
        min = "0",
        max = "145",
      },
      MREFPSDus = {
        access = "readOnly",
        type = "base64",
        min = "0",
        max = "145",
      },
      LIMITMASK = {
        access = "readOnly",
        type = "unsignedInt",
      },
      US0MASK = {
        access = "readOnly",
        type = "unsignedInt",
      },
      ACTSNRMODEds = {
        access = "readOnly",
        type = "unsignedInt",
      },
      ACTSNRMODEus = {
        access = "readOnly",
        type = "unsignedInt",
      },
      VirtualNoisePSDds = {
        access = "readOnly",
        type = "base64",
        min = "0",
        max = "97",
      },
      VirtualNoisePSDus = {
        access = "readOnly",
        type = "base64",
        min = "0",
        max = "49",
      },
      ACTUALCE = {
        access = "readOnly",
        type = "unsignedInt",
      },
      INMIATOds = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "3",
            max = "511",
          },
        },
      },
      INMIATSds = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "7",
          },
        },
      },
      INMCCds = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "64",
          },
        },
      },
      INMINPEQMODEds = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "3",
          },
        },
      },
      XTUCVendor = {
        access = "readOnly",
        type = "hexBinary",
        min = "4",
        max = "4",
      },
      XTUCANSIStd = {
        access = "readOnly",
        type = "unsignedInt",
      },
      XTUCANSIRev = {
        access = "readOnly",
        type = "unsignedInt",
      },
--]]
    }
  }
}

local nwmodel = require "transformer.shared.models.device2.network"
local DSLLine = nwmodel.register("DSLLine", Device_DSL_Line_i_.objectType.name)

local model

local xdslctl = require("transformer.shared.xdslctl")
local tostring, tonumber = tostring, tonumber

local phonelinepairmapping = { Inner = "1" , Outer = "2" }

local envBinding = {config="env", sectionname = "rip", option = "company_id"}

local function getDevice(key)
	local dsl = model:get(key)
	if dsl then
		return dsl.device
	end
end

-- keys to retrieve for getall (xdslctl info --show)
local xdslInfoGetAllKeys = {
  "status",
  "maxrate",
  "currentrate",
  "mode",
  "snr",
  "attn",
  "pwr",
  "framing_d",
  "trellis",
  "linkpowerstate",
  "vdsl2profile",
  "AllowedProfiles",
  "XTUCCountry",
  "SNRMpb",
}

local conn = mapper("ubus").connect()
local uciHelper = mapper("ucihelper")

-- maps xdsl status to IGD Status
local statusmap = {
  [-1] = "NoSignal",
  [0]  = "NoSignal",
  [1]  = "Initializing",
  [2]  = "Initializing",
  [3]  = "Initializing",
  [4]  = "EstablishingLink",
  [5]  = "Up",
  [6]  = "Initializing",
  [7]  = "Initializing",
  [8]  = "EstablishingLink"
}

local function getLinkStatus()
  local status = conn:call("xdsl", "status", {})
  if not status then
    return nil, "cannot retrieve xdsl status"
  end
  status = statusmap[status.statuscode]
  if status then
    return status
  end
  return nil, "unknown xdsl status code"
end

local function getStatus()
  local status = conn:call("xdsl", "status", {})
  if not status then
    return nil, "cannot retrieve xdsl status"
  end
  status = statusmap[status.statuscode]
  if status == "Up" then
    return "Up"
  end
  return "Down"
end

local function getupstream(key)
  if key then
    return "1"
  end
  return "0"
end

local function times10(val)
  local v = tonumber(val)
  if v == nil then
    return "0"
  end
  return tostring(10*v)
end

local function getXTURVendor()
  local value = uciHelper.get_from_uci(envBinding)
  return value ~= "" and (value:gsub('.', function(value) return string.format("%x", value:byte()) end)) or "00000000"
end

local function getStandards(param)
  local standard = xdslctl.infoValue(param)
  return standard and standard:gsub("T1_413","T1.413") or ""
end

Device_DSL_Line_i_.get = {
  Enable = function(mapping, param, key)
    return "1" -- currently cannot be stopped -> always on
  end,
  Status = function(mapping, param, key)
    return getStatus()
  end,
  Name = function(mapping, param, key)
    return getDevice(key)
  end,
  LowerLayers = "",
  Upstream = function(mapping, param, key)
    return getupstream(key)
  end,
  FirmwareVersion = "",
  LinkStatus = function(mapping, param, key)
    return getLinkStatus()
  end,
  StandardsSupported = function(mapping, param, key)
    return getStandards(param)
  end,
  StandardUsed = function(mapping, param, key)
    return getStandards(param)
  end,
  LineEncoding = "DMT",
  LineNumber = function(mapping, param, key)
    return phonelinepairmapping[xdslctl.profileValue("phonelinepair")]
  end,
  AllowedProfiles = function(mapping, param, key)
    return xdslctl.infoValue("AllowedProfiles")
  end,
  CurrentProfile = function(mapping, param, key)
    return xdslctl.infoValue("vdsl2profile")
  end,
  PowerManagementState = function(mapping, param, key)
    return xdslctl.infoValue("linkpowerstate")
  end,
  TRELLISds = function(mapping, param, key)
    return xdslctl.infoValue("trellis", "ds", "0")
  end,
  TRELLISus = function(mapping, param, key)
    return xdslctl.infoValue("trellis", "us", "0")
  end,
  UpstreamMaxBitRate = function(mapping, param, key)
    return xdslctl.infoValue("maxrate", "us", "0")
  end,
  DownstreamMaxBitRate = function(mapping, param, key)
    return xdslctl.infoValue("maxrate", "ds", "0")
  end,
  UpstreamNoiseMargin = function(mapping, param, key)
    return times10(xdslctl.infoValue("snr", "us", "0"))
  end,
  DownstreamNoiseMargin = function(mapping, param, key)
    return times10(xdslctl.infoValue("snr", "ds", "0"))
  end,
  UpstreamAttenuation = function(mapping, param, key)
    return times10(xdslctl.infoValue("attn", "us", "0"))
  end,
  DownstreamAttenuation = function(mapping, param, key)
    return times10(xdslctl.infoValue("attn", "ds", "0"))
  end,
  UpstreamPower = function(mapping, param, key)
    return times10(xdslctl.infoValue("pwr", "us", "0"))
  end,
  DownstreamPower = function(mapping, param, key)
    return times10(xdslctl.infoValue("pwr", "ds", "0"))
  end,
  XTURCountry = "3480", -- hardcoded as in Legacy
  XTURVendor = getXTURVendor(),
  XTURANSIStd = "0",
  XTURANSIRev = "0", 
  SNRMpbus = function (mapping, param, key)
    return xdslctl.infoValue("SNRMpb", "us", "0")
  end,
  SNRMpbds = function (mapping, param, key)
    return xdslctl.infoValue("SNRMpb", "ds", "0")
  end,
  XTUCCountry = function (mapping, param, key)
    return xdslctl.infoValue("XTUCCountry")
  end,
}

Device_DSL_Line_i_.getall = function(mapping, key)
  -- get all required values from xdslctl info --show, xdslctl info --stats
  local xdslInfoValues = xdslctl.infoValueList(xdslInfoGetAllKeys)
  local standardsSupported = xdslInfoValues["StandardsSupported"]
  local standardUsed = xdslInfoValues["StandardUsed"]
  local allValues = {
    Status = getStatus()  or "",
    Name = getDevice(key),
    Upstream = getupstream(key),
    LinkStatus = getLinkStatus() or "",
    StandardsSupported = standardsSupported and standardsSupported:gsub("T1_413","T1.413") or "",
    StandardUsed = standardUsed and standardUsed:gsub("T1_413","T1.413") or "",
    AllowedProfiles = xdslInfoValues["AllowedProfiles"] or "",
    CurrentProfile = xdslInfoValues["vdsl2profile"] or "",
    LineNumber = phonelinepairmapping[xdslctl.profileValue("phonelinepair")] or "",
    UpstreamMaxBitRate = xdslInfoValues["maxrate"]["us"] or "0",
    DownstreamMaxBitRate = xdslInfoValues["maxrate"]["ds"] or "0",
    UpstreamNoiseMargin = times10(xdslInfoValues["snr"]["us"] or "0"),
    DownstreamNoiseMargin = times10(xdslInfoValues["snr"]["ds"] or "0"),
    UpstreamAttenuation = times10(xdslInfoValues["attn"]["us"] or "0"),
    DownstreamAttenuation = times10(xdslInfoValues["attn"]["ds"] or "0"),
    UpstreamPower = times10(xdslInfoValues["pwr"]["us"] or "0"),
    DownstreamPower = times10(xdslInfoValues["pwr"]["ds"] or "0"),
    XTURVendor = getXTURVendor(),
    TRELLISds = xdslInfoValues["trellis"]["ds"] or "0",
    TRELLISus = xdslInfoValues["trellis"]["us"] or "0",
    PowerManagementState = xdslInfoValues["linkpowerstate"] or "",
    XTUCCountry = xdslInfoValues["XTUCCountry"] or "",
    SNRMpbus = xdslInfoValues["SNRMpb"]["us"] or "0",
    SNRMpbds = xdslInfoValues["SNRMpb"]["ds"] or "0",
  }
  return allValues
end

function Device_DSL_Line_i_.entries()
  model = nwmodel.load()
  return model:getKeys(DSLLine)
end

register(Device_DSL_Line_i_)
