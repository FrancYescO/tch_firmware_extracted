-- Automatically generated from Device:2.11
-- using generator version 2.3
local Device_FAST_Line_i_TestParams_ = {
  objectType = {
    name = "Device.FAST.Line.{i}.TestParams.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      SNRGds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SNRGus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SNRpsds = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "2047",
        type = "int",
      },
      SNRpsus = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "2047",
        type = "string",
      },
      SNRMTds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SNRMTus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ACTINP = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      NFEC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      RFEC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      UpstreamCurrRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamCurrRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ACTINPREIN = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

local xdslctl = require("transformer.shared.xdslctl")

local function xdslctlLineIdMap2(key)
  if string.find(key, "dsl:dsl") then
    return string.gsub(key, "dsl:dsl", "line")
  elseif string.find(key, "dsl") then
    return string.gsub(key, "dsl", "line")
  else
    return nil
  end
end

Device_FAST_Line_i_TestParams_.get = {
  SNRGds = function(mapping, param, key)
    return xdslctl.infoValue("SNRG", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  SNRGus = function(mapping, param, key)
    return xdslctl.infoValue("SNRG", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  SNRpsds = function(mapping, param, key)
    return xdslctl.infoValue("SNRps", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  SNRpsus = function(mapping, param, key)
    return xdslctl.infoValue("SNRps", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  SNRMTds = function(mapping, param, key)
    return xdslctl.infoValue("SNRMT", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  SNRMTus = function(mapping, param, key)
    return xdslctl.infoValue("SNRMT", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  ACTINP = function(mapping, param, key)
    return xdslctl.infoValue("ACTINP", nil, nil, xdslctlLineIdMap2(key)) or "0"
  end,
  NFEC = function(mapping, param, key)
    return xdslctl.infoValue("NFEC", nil, nil, xdslctlLineIdMap2(key)) or "0"
  end,
  RFEC = function(mapping, param, key)
    return xdslctl.infoValue("RFEC", nil, nil, xdslctlLineIdMap2(key)) or "0"
  end,
  UpstreamCurrRate = function(mapping, param, key)
    return xdslctl.infoValue("currentrate", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  DownstreamCurrRate = function(mapping, param, key)
    return xdslctl.infoValue("currentrate", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  ACTINPREIN = function(mapping, param, key)
    return xdslctl.infoValue("ACTINP", nil, nil, xdslctlLineIdMap2(key)) or "0"
  end,
}

register(Device_FAST_Line_i_TestParams_)

