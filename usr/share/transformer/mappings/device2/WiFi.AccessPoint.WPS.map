-- Automatically generated from Device:2.9
-- using generator version 2.2

local Device_WiFi_AccessPoint_i_WPS_ = {
  objectType = {
    name = "Device.WiFi.AccessPoint.{i}.WPS.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      ConfigMethodsSupported = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "USBFlashDrive",
          "Ethernet",
          "ExternalNFCToken",
          "IntegratedNFCToken",
          "NFCInterface",
          "PushButton",
          "PIN",
        },
      },
      ConfigMethodsEnabled = {
        access = "readOnly", --Since there is no support from the hostapd daemon Write operation not supported.
        list = true,
        type = "string",
        enumeration = {
          "USBFlashDrive",
          "Ethernet",
          "ExternalNFCToken",
          "IntegratedNFCToken",
          "NFCInterface",
          "PushButton",
          "PIN",
        },
      },
      X_000E50_Trigger = {
        access = "readWrite",
        type = "boolean",
      },
    }
  }
}

local mapper = mapper
local uciHelper = mapper("ucihelper")
local ubusConnection = mapper("ubus").connect()
local wirelessBinding = { config = "wireless", option = "wps_state" }
local isConfigChanged = false

Device_WiFi_AccessPoint_i_WPS_.entries = function(mapping)
  local entries = {}
  local data = ubusConnection:call("wireless.accesspoint.wps", "get",  { })
  if data then
    for k in pairs(data) do
      entries[#entries + 1] = k
    end
  end
  return entries
end

local function getAccessPointWPSEnable(mapping, parameter, key)
  wirelessBinding.sectionname = key
  wirelessBinding.default = "0"
  local state = uciHelper.get_from_uci(wirelessBinding)
  return state
end

Device_WiFi_AccessPoint_i_WPS_.get = {
  Enable = getAccessPointWPSEnable,
  ConfigMethodsSupported = "PushButton,PIN",
  ConfigMethodsEnabled = "PushButton,PIN",
  X_000E50_Trigger = "0"
}

Device_WiFi_AccessPoint_i_WPS_.getall = function(mapping, key)
  local allValues = {
    Enable = getAccessPointWPSEnable(mapping,nil,key),
    ConfigMethodsSupported = "PushButton,PIN",
    ConfigMethodsEnabled = "PushButton,PIN",
  }
  return allValues
end

Device_WiFi_AccessPoint_i_WPS_.set = function(mapping, param, value, key)
  if param == "X_000E50_Trigger" then
    if value == "1" then
      local data = ubusConnection:call("wireless.accesspoint.wps", "get", { name = key })
      if data then
        if data[key] and data[key]["last_session_state"] == "inprogress" then 
          ubusConnection:call("wireless.accesspoint.wps", "enrollee_pbc" , { name = key, event = "stop" })
        end
        ubusConnection:call("wireless.accesspoint.wps", "enrollee_pbc" , { name = key, event = "start" })
      end
    end
  else
    wirelessBinding.sectionname = key
    uciHelper.set_on_uci(wirelessBinding, value, commitapply)
    isConfigChanged = true
  end
end

Device_WiFi_AccessPoint_i_WPS_.commit = function()
  if isConfigChanged then
    uciHelper.commit(wirelessBinding)
    isConfigChanged = false
  end
end

Device_WiFi_AccessPoint_i_WPS_.revert = function()
  if isConfigChanged then
    uciHelper.revert(wirelessBinding)
    isConfigChanged = false
  end
end

register(Device_WiFi_AccessPoint_i_WPS_)
