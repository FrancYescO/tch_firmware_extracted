-- Automatically generated from Device:2.9
-- using generator version 2.2

local Device_WiFi_AccessPoint_i_WPS_ = {
  objectType = {
    name = "Device.WiFi.AccessPoint.{i}.WPS.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      ConfigMethodsSupported = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "USBFlashDrive",
          "Ethernet",
          "ExternalNFCToken",
          "IntegratedNFCToken",
          "NFCInterface",
          "PushButton",
          "PIN",
        },
      },
      ConfigMethodsEnabled = {
        access = "readOnly", --Since there is no support from the hostapd daemon Write operation not supported.
        list = true,
        type = "string",
        enumeration = {
          "USBFlashDrive",
          "Ethernet",
          "ExternalNFCToken",
          "IntegratedNFCToken",
          "NFCInterface",
          "PushButton",
          "PIN",
        },
      },
      X_000E50_Trigger = {
        access = "readWrite",
        type = "boolean",
        description = "Enable/Disable the WPS",
      },
      X_DT_PressPushButton = {
        access = "readWrite",
        type = "boolean",
        description = "Enable/Disable the WPS",
      },
      PIN = {
        access = "readWrite",
        type = "string",
        min = "4",
        max = "8",
        hidden = "true",
        description = "Device PIN used for PIN based pairing between WPS peers",
      },
      Version = {
        access = "readOnly",
        type = "string",
        description = "The Wi-Fi Simple Configuration version supported by the device",
      },
      Status = {
        access = "readOnly",
        type = "string",
        description = "Indicates the current status of WPS",
        enumeration = {
           "Disabled",
           "Error",
           "Unconfigured",
           "Configured",
           "SetupLocked"
        },
      },
      X_DT_ConnectionStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Requested",
          "Success",
          "Failed",
        },
        description = "Connection status of WPS pairing",
      },
    }
  }
}

local mapper = mapper
local uciHelper = mapper("ucihelper")
local ubusConnection = mapper("ubus").connect()
local wirelessBinding = { config = "wireless", option = "wps_state" }
local isConfigChanged = false

local mapSessionValue = {
  ["inprogress"] = "Requested",
  ["success"]    = "Success",
  ["error"]      = "Failed",
}

Device_WiFi_AccessPoint_i_WPS_.entries = function(mapping)
  local entries = {}
  local data = ubusConnection:call("wireless.accesspoint.wps", "get",  { })
  if data then
    for k in pairs(data) do
      entries[#entries + 1] = k
    end
  end
  return entries
end

local function getAccessPointWPSEnable(mapping, parameter, key)
  wirelessBinding.sectionname = key
  wirelessBinding.option = "wps_state"
  wirelessBinding.default = "0"
  local state = uciHelper.get_from_uci(wirelessBinding)
  return state
end

local function triggerWPS(key)
  local data = ubusConnection:call("wireless.accesspoint.wps", "get", { name = key })
  if data then
    if data[key] and data[key]["last_session_state"] == "inprogress" then
       ubusConnection:call("wireless.accesspoint.wps", "enrollee_pbc" , { name = key, event = "stop" })
    end
    ubusConnection:call("wireless.accesspoint.wps", "enrollee_pbc" , { name = key, event = "start" })
   end
end

local function getStatus(_, _, key)
  local wpsState = getAccessPointWPSEnable(_, _, key)
  local session_state = ubusConnection:call("wireless.accesspoint.wps", "get", {name = key}) or {}
  local state = ""
  if session_state == nil or session_state[key] == nil then
    return ""
  end
  if wpsState == "0" then
    state = "Disabled"
  elseif session_state[key]["wsc_state"] == "unconfigured" then
    state = "Unconfigured"
  elseif session_state[key]["ap_setup_locked"] == "1" or session_state[key]["ap_setup_locked"] == "2" then
    state = "SetupLocked"
  elseif session_state[key]["last_session_state"] == "error" then
    state = "Error"
  elseif session_state[key]["wsc_state"] == "configured" then
    state = "Configured"
  end
  return tostring(state)
end

local function getWPSLastSessionState(_, _, key)
  local wpsData, sessionState
  wpsData = ubusConnection:call("wireless.accesspoint.wps", "get",  {name = key}) or {}
  if wpsData[key] and wpsData[key]["last_session_state"] then
    local state = wpsData[key]["last_session_state"]
    sessionState = mapSessionValue[state]
  end
  return sessionState or ""
end

Device_WiFi_AccessPoint_i_WPS_.get = {
  Enable = getAccessPointWPSEnable,
  ConfigMethodsSupported = "PushButton,PIN",
  ConfigMethodsEnabled = "PushButton,PIN",
  X_000E50_Trigger = "0",
  X_DT_PressPushButton = "0",
  Version = "2.0",
  PIN = "",
  Status = getStatus,
  X_DT_ConnectionStatus = getWPSLastSessionState,
}

Device_WiFi_AccessPoint_i_WPS_.getall = function(mapping, key)
  local allValues = {
    Enable = getAccessPointWPSEnable(mapping,nil,key),
    ConfigMethodsSupported = "PushButton,PIN",
    ConfigMethodsEnabled = "PushButton,PIN",
    X_000E50_Trigger = "0",
    X_DT_PressPushButton = "0",
    Version = "2.0",
    PIN = "",
    Status = getStatus(_,_,key),
    X_DT_ConnectionStatus = getWPSLastSessionState(_, _, key),
  }
  return allValues
end

Device_WiFi_AccessPoint_i_WPS_.set = function(mapping, param, value, key)
  if param == "X_000E50_Trigger" or param == "X_DT_PressPushButton" then
    return value == "1" and triggerWPS(key)
  elseif param == "PIN" then
    if string.len(value) > 4 and string.len(value) < 8 then
      return nil, "WPS PIN Should be of length 4 or 8"
    end
    wirelessBinding.sectionname = key
    wirelessBinding.option = "wps_ap_pin"
    uciHelper.set_on_uci(wirelessBinding, value, commitapply)
    isConfigChanged = true
  elseif param == "Enable" then
    wirelessBinding.sectionname = key
    wirelessBinding.option = "wps_state"
    uciHelper.set_on_uci(wirelessBinding, value, commitapply)
    isConfigChanged = true
  else
    wirelessBinding.sectionname = key
    uciHelper.set_on_uci(wirelessBinding, value, commitapply)
    isConfigChanged = true
  end
end

Device_WiFi_AccessPoint_i_WPS_.commit = function()
  if isConfigChanged then
    uciHelper.commit(wirelessBinding)
    isConfigChanged = false
  end
end

Device_WiFi_AccessPoint_i_WPS_.revert = function()
  if isConfigChanged then
    uciHelper.revert(wirelessBinding)
    isConfigChanged = false
  end
end

register(Device_WiFi_AccessPoint_i_WPS_)
