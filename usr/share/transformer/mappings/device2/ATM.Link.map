-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_ATM_Link_i_ = {
  objectType = {
    name = "Device.ATM.Link.{i}.",
    access = "readWrite",
    numEntriesParameter = "LinkNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readOnly", -- Currently readWrite not supported
        type = "boolean",
        default = "false",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Up",
          "Down",
          "Unknown",
          "Dormant",
          "NotPresent",
          "LowerLayerDown",
          "Error",
        },
        default = "Down",
      },
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
      },
      Name = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      LastChange = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LowerLayers = {
        access = "readOnly", -- Currently readWrite not supported
        list = true,
        max = "1024",
        type = "string",
        pathRef = true,
        default = "",
      },
      LinkType = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "EoA",
          "IPoA",
          "PPPoA",
      --  "CIP", -- lowerlayer support is not available
          "Unconfigured",
        },
      },
      AutoConfig = {
        access = "readOnly",
        type = "boolean",
      },
      DestinationAddress = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      Encapsulation = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "LLC",
          "VCMUX",
        },
      },
      FCSPreserved = {
        access = "readOnly", -- Currently readWrite not supported
        type = "boolean",
      },
      VCSearchList = {
        access = "readOnly", -- Currently readWrite not supported
        list = true,
        max = "256",
        type = "string",
      },
      AAL = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "AAL1",
          "AAL2",
          "AAL3",
          "AAL4",
          "AAL5",
        },
      },
    }
  },
  aliasDefault = "Name"
}

local nwmodel = require "transformer.shared.models.device2.network"
local uciobject = require "transformer.shared.uciobject"
local ATMLink =  nwmodel.register("ATMLink", Device_ATM_Link_i_.objectType.name)
local model

local mapper, pairs, string = mapper, pairs, string
local uciHelper = mapper("ucihelper")
local conn = mapper("ubus").connect()
local get_from_uci = uciHelper.get_from_uci
local getall_from_uci = uciHelper.getall_from_uci
local xtmBinding = { config = "xtm", sectionname = "", option = "" }
local upper, lower, match = string.upper, string.lower, string.match
local commitApply = commitapply
local transactions = {}

local xtm_supported, xtmctl = pcall(require,"transformer.shared.xtmctl")
--local xtmctl = require("transformer.shared.xtmctl")
local getXtmDeviceStatus = false
if xtm_supported then
  getXtmDeviceStatus = xtmctl.getXtmDeviceStatus
end
local posix = require("tch.posix")
local getClockTime = posix.clock_gettime
local lastStateChangeTime = {}

local linkTypeToUlp = {
  ["EoA"]   = "eth",
  ["IPoA"]  = "ip",
  ["PPPoA"] = "ppp",
  ["Unconfigured"] = "",
}

local ulpToLinkType = {
  ["eth"] = "EoA",
  ["ip"]  = "IPoA",
  ["ppp"] = "PPPoA",
  [""]  = "Unconfigured",
}

local function getFromUci(intf, option)
  xtmBinding.sectionname = intf
  xtmBinding.option = option
  if option then
    return get_from_uci(xtmBinding)
  end
  return getall_from_uci(xtmBinding)
end

local function setOnUci(intf, option, value)
  xtmBinding.sectionname = intf
  xtmBinding.option = option
  uciHelper.set_on_uci(xtmBinding, value, commitApply)
  transactions["xtm"] = true
end

Device_ATM_Link_i_.entries = function()
  model = nwmodel.load()
  return model:getKeys(ATMLink)
end

local function getATMAddr(key, vpi, vci)
  local ucikey = model:getUciKey(key)
  vpi = vpi or getFromUci(ucikey, "vpi")
  vci = vci or getFromUci(ucikey, "vci")
  if vpi == "" or vci == "" then
    return ""
  end
  return "1." .. vpi .. "." .. vci
end

local function getATMEnable(key, vpi, vci)
  if not model:getPresent(key) then
    return "0"
  end
  local atmAddr = getATMAddr(key, vpi, vci)
  if xtm_supported and atmAddr ~= "" and (getXtmDeviceStatus(atmAddr) == "enabled") then
    return "1"
  else
    return "0"
  end
end

local function getATMStatus(key, vpi, vci)
  if not model:getPresent(key) then
    return "LowerLayerDown"
  end

  local atmStatus = conn:call("network.device", "status", {["name"] = model:getDevice(key)})
  if not atmStatus then
    return "Unknown"
  end

  local atmAddr = getATMAddr(key, vpi, vci)
  if xtm_supported and atmAddr ~= "" and getXtmDeviceStatus(atmAddr) == "enabled" then
    if atmStatus.carrier and atmStatus.up then
      return "Up"
    else
      local xdslStatus = conn:call("xdsl", "status", {})
      if not xdslStatus or xdslStatus.statuscode < 5 then
        return "LowerLayerDown"
      else
        return "Dormant"
      end
    end
  else
    if atmStatus.present then
      return "Down"
    else
      return "NotPresent"
    end
  end
end

local function getATMLowerLayers(key)
  return model:getLowerLayersResolved(key, resolve)
end

local function is_dynamic_instance(key)
  return getFromUci(key, "dev2_dynamic")=="1"
end

local wansensing_binding = { config = "wansensing", sectionname = "global", option = "enable" }
local function getAutoConfig(key)
  if is_dynamic_instance(key) then
    return false
  end
  local wansensing_enable = get_from_uci(wansensing_binding)
  if wansensing_enable ~= "" then
    return wansensing_enable=="1"
  end
end

local function getATMDestAddr_AAL(key, param, vpi, vci)
  local ucikey = model:getUciKey(key)
  vpi = vpi or getFromUci(ucikey, "vpi")
  vci = vci or getFromUci(ucikey, "vci")
  if vpi == "" or vci == "" then
    return ""
  end
  if param == "DestinationAddress" then
    return vpi .. "/" .. vci
  elseif xtm_supported and param == "AAL" then
    local atm_addr = "1." .. vpi .. "." .. vci
    local _,aal_type = getXtmDeviceStatus(atm_addr)
    return aal_type and upper(aal_type) or ""
  end
  return ""
end

Device_ATM_Link_i_.get = {
  Enable = function(_, _, key)
    return getATMEnable(key)
  end,

  Status = function(_, _, key)
    return getATMStatus(key)
  end,

  Name = function(_, _, key)
    return model:getName(key)
  end,

  LowerLayers = function(_, _, key)
    return getATMLowerLayers(key)
  end,

  LinkType = function(_, _, key)
    local ulp = getFromUci(model:getUciKey(key), "ulp")
    return ulpToLinkType[ulp] or "Unconfigured"
  end,

  AutoConfig = function(_, _, key)
    return getAutoConfig(key) and "1" or "0"
  end,

  DestinationAddress = function (_, param, key)
    return getATMDestAddr_AAL(key,param)
  end,

  Encapsulation = function (_, _, key)
    return upper(getFromUci(model:getUciKey(key), "enc"))
  end,

  AAL = function(_, param, key)
    return getATMDestAddr_AAL(key,param)
  end,

  VCSearchList = "", -- functionality not supported

  FCSPreserved = "0", -- hardcoded to 0 since no lower layer support

  LastChange = function(_, _, key)
    return tostring(getClockTime(posix.CLOCK_MONOTONIC) - (lastStateChangeTime[key] or 0))
  end,
}

Device_ATM_Link_i_.getall = function(_, key)
  local atm_values = getFromUci(model:getUciKey(key))
  local vpi = atm_values["vpi"]
  local vci = atm_values["vci"]
  return {
    Enable = getATMEnable(key, vpi, vci) or "0",
    Status = getATMStatus(key, vpi, vci) or "Down",
    Name = model:getName(key),
    LowerLayers = getATMLowerLayers(key) or "",
    LinkType = ulpToLinkType[atm_values["ulp"]] or "Unconfigured",
    AutoConfig = getAutoConfig(key) and "1" or "0",
    DestinationAddress = getATMDestAddr_AAL(key, "DestinationAddress", vpi, vci) or "",
    Encapsulation = upper(atm_values["enc"]) or "",
    AAL = getATMDestAddr_AAL(key, "AAL", vpi, vci) or "",
    VCSearchList = "",
    FCSPreserved = "0", -- hardcoded to 0 since no lower layer support
  }
end

Device_ATM_Link_i_.set =
{
  LinkType = function(_, _, value, key)
    if getAutoConfig(key) then
      return nil,"Not Configurable since AutoConfig is enabled"
    else
      setOnUci(model:getUciKey(key), "ulp", linkTypeToUlp[value])
    end
  end,

  DestinationAddress = function(_, _, value, key)
    -- the value of vpi and vci should not be nil and the type should be digit
    if getAutoConfig(key) then
      return nil,"Not Configurable since AutoConfig is enabled"
    else
      local vpi, vci = match(value, "(%d+)/(%d+)$")
      if not vpi then
        return nil, "invalid value"
      end
      local ucikey = model:getUciKey(key)
      setOnUci(ucikey, "vpi", vpi)
      setOnUci(ucikey, "vci", vci)

      -- if VPI/VCI are defined in network config then set vpi/vci in network config as well
      local isNetworkConfigChanged = false
      if xtm_supported then
        isNetworkConfigChanged = xtmctl.setNetworkConfig(ucikey, vpi, vci)
      end
      if isNetworkConfigChanged then
        transactions["network"] = true
      end
    end
  end,

  Encapsulation = function (_, _, value,key)
    if getAutoConfig(key) then
      return nil,"Not Configurable since AutoConfig is enabled"
    else
      setOnUci(model:getUciKey(key), "enc", lower(value))
    end
  end,
}

Device_ATM_Link_i_.add = function()
  model = nwmodel.load()
  local key = uciobject.create("xtm", "atmdevice", "atm_dyn", {
    dev2_dynamic = "1",
    vpi = "0",
    vci = "0",
    ulp = "eth",
    enc = "llc",
    path = "fast",
  }, commitapply)
  model:add(ATMLink, key)
  nwmodel.invalidate()
  return key
end

Device_ATM_Link_i_.delete = function(_, key)
  if is_dynamic_instance(key) then
    uciobject.delete("xtm", key, commitapply)
    return true
  end
  return nil, "can not delete predefined ATM instance"
end

Device_ATM_Link_i_.commit = function()
  uciobject.commit()
  for config in pairs(transactions) do
    uciHelper.commit({config = config})
  end
  transactions = {}
end

Device_ATM_Link_i_.revert = function()
  uciobject.revert()
  for config in pairs(transactions) do
    uciHelper.revert({config = config})
  end
  transactions = {}
end

local function ubusEventTriggered(_, _, data)
  if data.action == "up" or data.action == "down" then
    lastStateChangeTime[data.interface] = getClockTime(posix.CLOCK_MONOTONIC)
  end
end

Device_ATM_Link_i_.add_watchers = function(mapping)
  local ubusEventSource = eventsource("ubus")
  ubusEventSource.watch_event(mapping, ubusEventTriggered, "network.link")
end

register(Device_ATM_Link_i_)
