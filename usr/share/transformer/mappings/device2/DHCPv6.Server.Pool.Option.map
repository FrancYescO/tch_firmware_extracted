-- Automatically generated from Device:2.11
-- using generator version 2.3
local Device_DHCPv6_Server_Pool_i_Option_i_ = {
  objectType = {
    name = "Device.DHCPv6.Server.Pool.{i}.Option.{i}.",
    access = "readOnly",
    numEntriesParameter = "PoolNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
        max = "64",
      },
      Enable = {
        access = "readOnly",
        type = "boolean",
      },
    }
  }
}

local mapper = mapper
local uciHelper = mapper("ucihelper")
local dhcpBinding = { config = "dhcp" }

Device_DHCPv6_Server_Pool_i_Option_i_.entries = function(mapping, parentkey)
  local optionEntries = {}
  dhcpBinding.sectionname = nil
  dhcpBinding.option  = nil
  uciHelper.foreach_on_uci(dhcpBinding, function(s)
    if s['.name'] == parentkey then
      for i in ipairs(s['dhcp_option'] or {}) do
        optionEntries[#optionEntries + 1] = parentkey .. "|" .. i
      end
    end
  end)
  return optionEntries
end

Device_DHCPv6_Server_Pool_i_Option_i_.get = {
  Enable = "1"
}

register(Device_DHCPv6_Server_Pool_i_Option_i_)
