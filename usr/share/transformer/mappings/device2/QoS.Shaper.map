-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_QoS_Shaper_i_ = {
  objectType = {
    name = "Device.QoS.Shaper.{i}.",
    access = "readWrite",
    numEntriesParameter = "ShaperNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Disabled",
          "Enabled",
          "Error_Misconfigured",
          "Error",
        },
        default = "Disabled",
      },
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
      },
      Interface = {
        access = "readWrite",
        type = "string",
        max = "256",
        pathRef = true,
        default = "",
      },
      ShapingRate = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
          },
        },
        default = "-1",
      },
      ShapingBurstSize = {
        access = "readWrite",
        type = "unsignedInt",
      },
    }
  }
}

local nwcommon = mapper("nwcommon")
local split_key = nwcommon.split_key
local fmod = math.fmod
local ucihelper = mapper("ucihelper")
local get_from_uci = ucihelper.get_from_uci
local set_on_uci = ucihelper.set_on_uci
local foreach_on_uci = ucihelper.foreach_on_uci
local add_on_uci = ucihelper.add_on_uci
local delete_on_uci = ucihelper.delete_on_uci
local commit = ucihelper.commit
local revert = ucihelper.revert
local transactions = {}
local eth_binding = {config = "ethernet"}
local port_binding = {config = "ethernet", sectionname = "port"}
local xdsl_binding = {config = "xdsl"}
local qos_binding = {config = "qos"}
local swshaper2device, isSwshaper = {}, {}

Device_QoS_Shaper_i_.entries = function()
  local Shapers = {}
  -- check Ethernet trafficdesc
  eth_binding.sectionname = "trafficdesc"
  eth_binding.option = nil
  foreach_on_uci(eth_binding, function(s)
    Shapers[#Shapers+1] = "ETH|" .. s['.name']
  end)

  -- check xdsl maxusdatarate
  xdsl_binding.sectionname = "xdsl"
  xdsl_binding.option = nil
  foreach_on_uci(xdsl_binding, function(s)
    Shapers[#Shapers+1] = "DSL|" .. s['.name']
  end)

  -- check max_bit_rate of swshaper
  swshaper2device = {}
  qos_binding.sectionname = "device"
  qos_binding.option = nil
  foreach_on_uci(qos_binding, function(s)
    if s.swshaper then
        swshaper2device[s.swshaper] = s['.name']
    end
  end)
  qos_binding.sectionname = "swshaper"
  foreach_on_uci(qos_binding, function(s)
     Shapers[#Shapers+1] = "DSL|" .. s['.name']
     isSwshaper[s['.name']] = true
  end)
  return Shapers
end

Device_QoS_Shaper_i_.get = {
  Enable = function(mapping, param, key)
    local devtype, sectname = split_key(key)
    if devtype == "ETH" then
      local intf
      foreach_on_uci(port_binding, function(s)
        if s.td and s.td == sectname then
          intf = s['.name']
          return false -- break
        end
      end)
      eth_binding.sectionname = sectname
      eth_binding.option = "max_bit_rate"
      local max_bit_rate = get_from_uci(eth_binding)
      eth_binding.option = "max_burst_size"
      local max_burst_size = get_from_uci(eth_binding)
      return (intf and max_bit_rate ~= "" and max_burst_size ~= "" and "true") or "false"
    elseif devtype == "DSL" then
      if isSwshaper[sectname] then
        qos_binding.sectionname = sectname
        qos_binding.option = "enable"
        local shaper_enable = get_from_uci(qos_binding)
        return (shaper_enable == "1" and "true") or "false"
      else
        xdsl_binding.sectionname = sectname
        xdsl_binding.option = "maxusdatarate"
        local maxusdatarate = get_from_uci(xdsl_binding)
        return (maxusdatarate ~= "" and "true") or "false"
      end
    end
    return "false"
  end,
  Status = function(mapping, param, key)
    local devtype, sectname = split_key(key)
    if devtype == "ETH" then
      local intf
      foreach_on_uci(port_binding, function(s)
        if s.td and s.td == sectname then
          intf = s['.name']
          return false -- break
        end
      end)
      eth_binding.sectionname = sectname
      eth_binding.option = "max_bit_rate"
      local max_bit_rate = get_from_uci(eth_binding)
      eth_binding.option = "max_burst_size"
      local max_burst_size = get_from_uci(eth_binding)
      return (intf and max_bit_rate ~= "" and max_burst_size ~= "" and "Enabled") or "Disabled"
    elseif devtype == "DSL" then
      if isSwshaper[sectname] then
        qos_binding.sectionname = sectname
        qos_binding.option = "enable"
        local shaper_enable = get_from_uci(qos_binding)
        return (shaper_enable == "1" and "Enabled") or "Disabled"
      else
        xdsl_binding.sectionname = sectname
        xdsl_binding.option = "maxusdatarate"
        local maxusdatarate = get_from_uci(xdsl_binding)
        return (maxusdatarate ~= "" and "Enabled") or "Disabled"
      end
    end
    return "Disabled"
  end,
  Interface = function(mapping, param, key)
    local devtype, sectname = split_key(key)
    if devtype == "ETH" then
      local intf
      foreach_on_uci(port_binding, function(s)
        if s.td and s.td == sectname then
          intf = s['.name']
          return false -- break
        end
      end)
      return resolve("Device.Ethernet.Interface.{i}.", intf) or ""
    elseif devtype == "DSL" then
      local device = swshaper2device[sectname]
      if isSwshaper[sectname] and device then
        return resolve("Device.PTM.Link.{i}.", device) or resolve("Device.ATM.Link.{i}.", device) or ""
      else
        return resolve("Device.DSL.Line.{i}.", "dsl:"..sectname) or ""
      end
    end
    return ""
  end,
  ShapingRate = function(mapping, param, key)
    local devtype, sectname = split_key(key)
    if devtype == "ETH" then
      eth_binding.sectionname = sectname
      eth_binding.option = "max_bit_rate"
      local max_bit_rate = get_from_uci(eth_binding)
      max_bit_rate = tonumber(max_bit_rate)
      return max_bit_rate and tostring(max_bit_rate * 1000) or "-1"
    elseif devtype == "DSL" then
      if isSwshaper[sectname] then
        qos_binding.sectionname = sectname
        qos_binding.option = "enable"
        local shaper_enable = get_from_uci(qos_binding)
        if shaper_enable == "1" then
          qos_binding.sectionname = sectname
          qos_binding.option = "max_bit_rate"
          local max_bit_rate = get_from_uci(qos_binding)
          max_bit_rate = tonumber(max_bit_rate)
          return max_bit_rate and tostring(max_bit_rate * 1000) or "-1"
        end
      else
        xdsl_binding.sectionname = sectname
        xdsl_binding.option = "maxusdatarate"
        local maxusdatarate = get_from_uci(xdsl_binding)
        maxusdatarate = tonumber(maxusdatarate)
        return maxusdatarate and tostring(maxusdatarate * 1000) or "-1"
      end
    end
    return "-1"
  end,
  ShapingBurstSize = function(mapping, param, key)
    local devtype, sectname = split_key(key)
    if devtype == "ETH" then
      eth_binding.sectionname = sectname
      eth_binding.option = "max_burst_size"
      return get_from_uci(eth_binding)
    elseif devtype == "DSL" then
      -- Now not implemented rate limiting at the xdsl layer
      return "0"
    end
    return ""
  end,
}

Device_QoS_Shaper_i_.set = {
  Enable = function(mapping, param, value, key)
    local devtype, sectname = split_key(key)
    if isSwshaper[sectname] then
      local enable = "0"
      if value == "true" or value == "1" then
        enable = "1"
      end
      qos_binding.sectionname=sectname
      qos_binding.option="enable"
      if value ~= get_from_uci(qos_binding) then
        set_on_uci(qos_binding, enable, commitapply)
        transactions[qos_binding.config] = true
      end
    else
      -- Not implemented, US NG-85602 has been created for this
      return nil,"Not supported"
    end
  end,
  Interface = function(mapping, param, value, key)
    local devtype, sectname = split_key(key)
    if devtype == "ETH" then
      local intf = tokey(value,
        "Device.Ethernet.Interface.{i}."
      )
      if not intf then
        return nil, "Invalid value"
      end
      -- clear original interface
      foreach_on_uci(port_binding, function(s)
        if s.td and s.td == sectname and s['.name'] ~= intf then
          eth_binding.sectionname = s['.name']
          eth_binding.option = "td"
          set_on_uci(eth_binding, "", commitapply)
        end
      end)
      eth_binding.sectionname = intf
      eth_binding.option = "td"
      set_on_uci(eth_binding, sectname, commitapply)
      transactions[eth_binding.config] = true
    elseif devtype == "DSL" then
      -- Not implemented, US NG-85602 has been created for this
      return nil,"Not supported on xdsl interface"
    end
  end,
  ShapingRate = function(mapping, param, value, key)
    local devtype, sectname = split_key(key)
    value = tonumber(value)
    if value ~= -1 and fmod(value, 1000) ~= 0 then
      return nil,"The value should be -1 or multiples of 1000 bps"
    end
    if value == -1 then
      value = ""
    else
      value = tostring(value/1000)
    end
    if devtype == "ETH" then
      eth_binding.sectionname = sectname
      eth_binding.option = "max_bit_rate"
      local old_value = get_from_uci(eth_binding)
      if old_value ~= value then
        set_on_uci(eth_binding, value, commitapply)
        transactions[eth_binding.config] = true
      end
    elseif devtype == "DSL" then
      if isSwshaper[sectname] then
        qos_binding.sectionname=sectname
        qos_binding.option="max_bit_rate"
        local shaper_enable = "0"
        if value ~= "" then
          local old_value = get_from_uci(qos_binding)
          if old_value ~= value then
            set_on_uci(qos_binding, value, commitapply)
            transactions[qos_binding.config] = true
          end
          shaper_enable = "1"
        end
        qos_binding.option="enable"
        local old_value = get_from_uci(qos_binding)
        if old_value ~= shaper_enable then
          set_on_uci(qos_binding, shaper_enable, commitapply)
          transactions[qos_binding.config] = true
        end
      else
        xdsl_binding.sectionname=sectname
        xdsl_binding.option="maxusdatarate"
        local old_value = get_from_uci(xdsl_binding)
        if old_value ~= value then
          set_on_uci(xdsl_binding, value, commitapply)
          transactions[xdsl_binding.config] = true
        end
      end
    end
  end,
  ShapingBurstSize = function(mapping, param, value, key)
    local devtype, sectname = split_key(key)
    if devtype == "ETH" then
      if not tonumber(value) then
        return nil, "Invalid value"
      end
      eth_binding.sectionname = sectname
      eth_binding.option = "max_burst_size"
      local old_value = get_from_uci(eth_binding)
      if old_value ~= value then
        set_on_uci(eth_binding, value, commitapply)
        transactions[eth_binding.config] = true
      end
    elseif devtype == "DSL" then
      -- Now not implemented rate limiting at the xdsl layer
      return nil,"Not supported on xdsl interface"
    end
  end,
}

-- To be implemented, US NG-85602 has been created for this
Device_QoS_Shaper_i_.add = function(mapping)
  error("Not implemented")
end

Device_QoS_Shaper_i_.delete = function(mapping, key)
  error("Not implemented")
end

Device_QoS_Shaper_i_.commit = function()
  for config,_ in pairs(transactions) do
    commit({config = config})
  end
  transactions = {}
end

Device_QoS_Shaper_i_.revert = function()
  for config,_ in pairs(transactions) do
    revert({config = config})
  end
  transactions = {}
end

register(Device_QoS_Shaper_i_)

