-- Manually generated
local register = register

local Device_Services_X_BELGACOM_HotspotService_GUI_ = {
  objectType = {
    name = "Device.Services.X_BELGACOM_HotspotService.GUI.",
    access = "readOnly",
    description = "All the hotspot service related info is updated in the GUI pages",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
    }
  }
}

register(Device_Services_X_BELGACOM_HotspotService_GUI_)

local Device_Services_X_BELGACOM_HotspotService_GUI_multi_ = {
  objectType = {
    name = "Device.Services.X_BELGACOM_HotspotService.GUI.#USER.",
    access = "readOnly",
    description = "All the hotspot service related info is updated in the user GUI pages",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      ShowHotspotPage = {
        access = "readWrite",
        type = "boolean",
        default = "true",
        description = "Show or hide hotspot page in GUI",
      },
      ShowHotspotControlButton = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "Hide",
          "Visible",
          "Grayed_out",
        },
        default = "Visible",
        description = "Controls hotspot button visibility",
      },
    }
  }
}

local uciHelper = mapper("ucihelper")
local webBinding = { config = "web" }
local configChanged = false

local sectionMap = {
  ["User"] = "usr_User",
  ["Admin"] = "usr_Admin",
  ["Expert"] = "usr_Expert",
}

local paramMap = {
  ["ShowHotspotPage"]   = "hotspot_show_page",
  ["ShowHotspotControlButton"] = "hotspot_show_button"
}

local defaultValue = {
  ["ShowHotspotPage"]   = "1",
  ["ShowHotspotControlButton"] = "Visible",
}

local function getUciValue(mapping, param)
  webBinding.sectionname = mapping.sectionname
  webBinding.option = paramMap[param]
  webBinding.default = defaultValue[param]
  return uciHelper.get_from_uci(webBinding)
end

local function setUciValue(mapping, param, value)
  webBinding.sectionname = mapping.sectionname
  webBinding.option = paramMap[param]
  uciHelper.set_on_uci(webBinding, value, commitapply)
  configChanged = true
end

Device_Services_X_BELGACOM_HotspotService_GUI_multi_.get = getUciValue

Device_Services_X_BELGACOM_HotspotService_GUI_multi_.set = setUciValue

Device_Services_X_BELGACOM_HotspotService_GUI_multi_.getall = function(mapping)
  webBinding.sectionname = mapping.sectionname
  local userValues = uciHelper.getall_from_uci(webBinding)
  return {
    ShowHotspotPage = userValues["hotspot_show_page"] or "1",
    ShowHotspotControlButton = userValues["hotspot_show_button"] or "Visible",
  }
end

Device_Services_X_BELGACOM_HotspotService_GUI_multi_.commit = function()
  if configChanged then
    uciHelper.commit(webBinding)
    configChanged = false
  end
end

Device_Services_X_BELGACOM_HotspotService_GUI_multi_.revert = function()
  if configChanged then
    uciHelper.revert(webBinding)
    configChanged = false
  end
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Device_Services_X_BELGACOM_HotspotService_GUI_multi_, "#USER", {"User", "Expert", "Admin"})
for _, dupli in ipairs(duplicates) do
  dupli.sectionname = sectionMap[(dupli["objectType"]["name"]:match("^.*%.(.*)%.$"))]
  register(dupli)
end
