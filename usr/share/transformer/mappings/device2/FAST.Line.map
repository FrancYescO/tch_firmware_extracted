-- Automatically generated from Device:2.11
-- using generator version 2.3
local Device_FAST_Line_i_ = {
  objectType = {
    name = "Device.FAST.Line.{i}.",
    access = "readOnly",
    numEntriesParameter = "LineNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Up",
          "Down",
          "Unknown",
          "Dormant",
          "NotPresent",
          "LowerLayerDown",
          "Error",
        },
      },
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
      },
      Name = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      LastChange = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LowerLayers = {
        access = "readOnly",
        list = true,
        max = "1024",
        type = "string",
        pathRef = true,
      },
      Upstream = {
        access = "readOnly",
        type = "boolean",
      },
      FirmwareVersion = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      LinkStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Up",
          "Initializing",
          "EstablishingLink",
          "NoSignal",
          "Disabled",
          "Error",
        },
      },
      AllowedProfiles = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "106a",
          "212a",
          "",
        },
      },
      CurrentProfile = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "106a",
          "212a",
          "",
        },
      },
      PowerManagementState = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "L0",
          "L2.1",
          "L2.2",
          "L3",
        },
      },
      SuccessFailureCause = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "5",
          },
        },
      },
      UPBOKLER = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "1280",
          },
        },
      },
      LastTransmittedDownstreamSignal = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "21",
          },
        },
      },
      LastTransmittedUpstreamSignal = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "21",
          },
        },
      },
      UPBOKLE = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "1280",
          },
        },
      },
      LineNumber = {
        access = "readOnly",
        type = "int",
        range = {
          {
            min = "1",
          },
        },
      },
      UpstreamMaxBitRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamMaxBitRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamNoiseMargin = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamNoiseMargin = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      UpstreamAttenuation = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamAttenuation = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      UpstreamPower = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamPower = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      SNRMRMCds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      SNRMRMCus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      BITSRMCpsds = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "4610",
        type = "int",
      },
      BITSRMCpsus = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "4610",
        type = "int",
      },
      FEXTCANCELds = {
        access = "readOnly",
        type = "boolean",
      },
      FEXTCANCELus = {
        access = "readOnly",
        type = "boolean",
      },
      ETRds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ETRus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ATTETRds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ATTETRus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      MINEFTR = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

local mapper = mapper
local nwmodel = require "transformer.shared.models.device2.network"
local GFASTLine = nwmodel.register("GFASTLine", Device_FAST_Line_i_.objectType.name)
local model
local xdslctl = require("transformer.shared.xdslctl")

local firmwareVersion = xdslctl.infoValue("firmware_version") or ""
local phonelinepairmapping = { Inner = "1" , Outer = "2" }
local xdslBinding = {config = "xdsl"}
local conn = mapper("ubus").connect()
local uciHelper = mapper("ucihelper")
local posix = require("tch.posix")
local lastStateChangeTime = 0
local isConfigChanged = false

local xdslInfoGetAllKeys = {
  "status",
  "maxrate",
  "currentrate",
  "mode",
  "snr",
  "attn",
  "pwr",
  "linkpowerstate",
  "vdsl2profile",
  "AllowedProfiles",
  "SNRMpb",
  "UPBOKLE",
  "US0MASK",
  "VirtualNoisePSD",
  "VirtualNoisePSD",
  "MINEFTR",
  "ATTETR",
  "ETR",
  "FEXTCANCEL",
  "BITSRMCps",
  "maxrate",
  "LastTransmittedUpstreamSignal",
}

local statusmap = {
  [-1] = "NoSignal",
  [0]  = "NoSignal",
  [1]  = "Initializing",
  [2]  = "Initializing",
  [3]  = "Initializing",
  [4]  = "EstablishingLink",
  [5]  = "Up",
  [6]  = "Initializing",
  [7]  = "Initializing",
  [8]  = "EstablishingLink"
}

local fastProfileValues = {
  "106a",
  "212a"
}

local function times10(val)
  local v = tonumber(val)
  if v == nil then
    return "0"
  end
  return tostring(10*v)
end

local function lineIdMap()
  local map = {}
  uciHelper.foreach_on_uci(xdslBinding, function(s)
    local name = s['.name']
    -- Replace dsl with line in name
    map["dsl:"..name] = string.gsub(name, "dsl", "line")
  end)
  return map
end
local xdslctlLineIdMap = lineIdMap()

local function getDevice(key)
  local dsl = model:get(key)
  if dsl then
    return dsl.device
  end
end

local function getStatus(key)
  local status = conn:call("xdsl", "status", {})
  if not status then
    return nil, "cannot retrieve xdsl status"
  end
  local lineId
  local _, j = string.find(key, "dsl:dsl")
  if j then
    local id = tonumber(string.sub(key, j+1))
    if id then
      lineId = "line"..tostring(id+1)
    end
  end
  if lineId and status[lineId] then
    status = statusmap[status[lineId].statuscode]
  else
    status = statusmap[status.statuscode]
  end
  if status == "Up" then
    return "Up"
  end
  return "Down"
end

local function getLinkStatus(key)
  local status = conn:call("xdsl", "status", {})
  if not status then
    return nil, "cannot retrieve xdsl status"
  end
  local lineId
  local _, j = string.find(key, "dsl:dsl")
  if j then
    local id = tonumber(string.sub(key, j+1))
    if id then
      lineId = "line"..tostring(id+1)
    end
  end
  if lineId and status[lineId] then
    status = statusmap[status[lineId].statuscode]
  else
    status = statusmap[status.statuscode]
  end
  if status then
    return status
  end
  return nil, "unknown xdsl status code"
end

local function getEnable(mapping, _, key)
  local device = getDevice(key)
  local mode = xdslctl.infoValue("mode", nil, nil, key)
  if mode == "G.fast" then
    xdslBinding.sectionname = device
    xdslBinding.option = "enabled"
    xdslBinding.default = "1"
    return uciHelper.get_from_uci(xdslBinding)
  else
    return "0"
  end
end

-- Return profile values after validation check with "106a" and "212a"
local function getAllowedProfileValues(key)
  local profileValues = xdslctl.infoValue("AllowedProfiles", nil, nil, xdslctlLineIdMap[key])
  local profiles = {}
  for _, value in ipairs(fastProfileValues) do
    if profileValues and string.match(profileValues, value) then
      profiles[#profiles+1] = value
    end
  end
  return table.concat(profiles, ",")
end

Device_FAST_Line_i_.get = {
  Enable = getEnable,
  Status = function (mapping, param, key)
    return getStatus(key)
  end,
  Alias = function (mapping, param, key)
  end,
  Name = function (mapping, param, key)
    return getDevice(key)
  end,
  LastChange = function (mapping, param, key)
    return xdslctl.stats("sincesync", "start", nil, xdslctlLineIdMap[key])
  end,
  LowerLayers = "",
  Upstream = "1",
  FirmwareVersion = firmwareVersion,
  LinkStatus = function (mapping, param, key)
    return getLinkStatus(key)
  end,
  AllowedProfiles = function (mapping, param, key)
    return getAllowedProfileValues(key)
  end,
  CurrentProfile = function (mapping, param, key)
    return xdslctl.infoValue("vdsl2profile", nil, nil, xdslctlLineIdMap[key])
  end,
  PowerManagementState = function (mapping, param, key)
    return xdslctl.infoValue("linkpowerstate", nil, nil, xdslctlLineIdMap[key])
  end,
  SuccessFailureCause = function (mapping, param, key)
    return xdslctl.infoValue("SuccessFailureCause", "", "", key)
  end,
  UPBOKLER = function (mapping, param, key)
  end,
  LastTransmittedDownstreamSignal = function (mapping, param, key)
    return xdslctl.infoValue("LastTransmittedDownstreamSignal", nil, nil, xdslctlLineIdMap[key])
  end,
  LastTransmittedUpstreamSignal = function (mapping, param, key)
    return xdslctl.infoValue("LastTransmittedUpstreamSignal", nil, nil, xdslctlLineIdMap[key])
  end,
  UPBOKLE = function (mapping, param, key)
    return xdslctl.infoValue("UPBOKLE", nil, nil, xdslctlLineIdMap[key])
  end,
  LineNumber = function (mapping, param, key)
    return phonelinepairmapping[xdslctl.profileValue("phonelinepair", nil, nil, xdslctlLineIdMap[key])]
  end,
  UpstreamMaxBitRate = function (mapping, param, key)
    return xdslctl.infoValue("maxrate", "us", "0", xdslctlLineIdMap[key])
  end,
  DownstreamMaxBitRate = function (mapping, param, key)
    return xdslctl.infoValue("maxrate", "ds", "0", xdslctlLineIdMap[key])
  end,
  UpstreamNoiseMargin = function (mapping, param, key)
    return times10(xdslctl.infoValue("snr", "us", "0", xdslctlLineIdMap[key]))
  end,
  DownstreamNoiseMargin = function (mapping, param, key)
    return times10(xdslctl.infoValue("snr", "ds", "0", xdslctlLineIdMap[key]))
  end,
  UpstreamAttenuation = function (mapping, param, key)
    return times10(xdslctl.infoValue("attn", "us", "0", xdslctlLineIdMap[key]))
  end,
  DownstreamAttenuation = function (mapping, param, key)
    return times10(xdslctl.infoValue("attn", "ds", "0", xdslctlLineIdMap[key]))
  end,
  UpstreamPower = function (mapping, param, key)
    return times10(xdslctl.infoValue("pwr", "us", "0", xdslctlLineIdMap[key]))
  end,
  DownstreamPower = function (mapping, param, key)
    return times10(xdslctl.infoValue("pwr", "ds", "0", xdslctlLineIdMap[key]))
  end,
  SNRMRMCds = function (mapping, param, key)
    return xdslctl.infoValue("SNRMRMC", "ds", "0", xdslctlLineIdMap[key])
  end,
  SNRMRMCus = function (mapping, param, key)
    return xdslctl.infoValue("SNRMRMC", "us", "0", xdslctlLineIdMap[key])
  end,
  BITSRMCpsds = function (mapping, param, key)
    return xdslctl.infoValue("BITSRMCps", "ds", "0", xdslctlLineIdMap[key])
  end,
  BITSRMCpsus = function (mapping, param, key)
    return xdslctl.infoValue("BITSRMCps", "us", "0", xdslctlLineIdMap[key])
  end,
  FEXTCANCELds = function (mapping, param, key)
    return xdslctl.infoValue("FEXTCANCEL", "ds", "0", xdslctlLineIdMap[key])
  end,
  FEXTCANCELus = function (mapping, param, key)
    return xdslctl.infoValue("FEXTCANCEL", "us", "0", xdslctlLineIdMap[key])
  end,
  ETRds = function (mapping, param, key)
    return xdslctl.infoValue("ETR", "ds", "0", xdslctlLineIdMap[key])
  end,
  ETRus = function (mapping, param, key)
    return xdslctl.infoValue("ETR", "us", "0", xdslctlLineIdMap[key])
  end,
  ATTETRds = function (mapping, param, key)
    return xdslctl.infoValue("ATTETR", "ds", "0", xdslctlLineIdMap[key])
  end,
  ATTETRus = function (mapping, param, key)
    return xdslctl.infoValue("ATTETR", "us", "0", xdslctlLineIdMap[key])
  end,
  MINEFTR = function (mapping, param, key)
    return xdslctl.infoValue("MINEFTR", "us", "0", xdslctlLineIdMap[key])
  end,
}

Device_FAST_Line_i_.getall = function(mapping, key)
  local xdslInfoValues = xdslctl.infoValueList(xdslInfoGetAllKeys, xdslctlLineIdMap[key])
  return {
    Enable = getEnable(mapping, nil, key),
    Status = getStatus(key)  or "",
    Alias = "",
    Name = getDevice(key),
    LowerLayers = "",
    Upstream = "1",
    FirmwareVersion = firmwareVersion or "",
    LinkStatus = getLinkStatus(key) or "0",
    AllowedProfiles = getAllowedProfileValues(key),
    CurrentProfile = xdslInfoValues["vdsl2profile"] or "0",
    PowerManagementState = xdslInfoValues["linkpowerstate"] or "0",
    SuccessFailureCause = "0",
    UPBOKLER = "0",
    LastTransmittedDownstreamSignal = xdslInfoValues["LastTransmittedDownstreamSignal"] or "0",
    LastTransmittedUpstreamSignal = xdslInfoValues["LastTransmittedUpstreamSignal"] or "0",
    UPBOKLE = xdslInfoValues["UPBOKLE"] or "0",
    LineNumber = phonelinepairmapping[xdslctl.profileValue("phonelinepair", nil, nil, xdslctlLineIdMap[key])] or "",
    UpstreamMaxBitRate = xdslInfoValues["maxrate"]["us"] or "0",
    DownstreamMaxBitRate = xdslInfoValues["maxrate"]["ds"] or "0",
    BITSRMCpsds = xdslInfoValues["BITSRMCps"]["ds"] or "0",
    BITSRMCpsus = xdslInfoValues["BITSRMCps"]["us"] or "0",
    FEXTCANCELds = xdslInfoValues["FEXTCANCEL"]["ds"] or "0",
    FEXTCANCELus = xdslInfoValues["FEXTCANCEL"]["us"] or "0",
    ETRds = xdslInfoValues["ETR"]["ds"] or "0",
    ETRus = xdslInfoValues["ETR"]["us"] or "0",
    ATTETRds = xdslInfoValues["ATTETR"]["ds"] or "0",
    ATTETRus = xdslInfoValues["ATTETR"]["us"] or "0",
    MINEFTR = xdslInfoValues["MINEFTR"] or "0",
  }
end

local getClockTime = posix.clock_gettime

Device_FAST_Line_i_.set = {
  Enable = function(mapping, param, value, key)
    local device = getDevice(key)
    xdslBinding.sectionname = device
    xdslBinding.option = "enabled"
    uciHelper.set_on_uci(xdslBinding, value, commitapply)
    isConfigChanged = true
  end,
}

Device_FAST_Line_i_.commit = function()
  if isConfigChanged then
    uciHelper.commit(xdslBinding)
    isConfigChanged = false
  end
end

local function setUbusEvent(mapping, action, data)
  if data["status"] then
    lastStateChangeTime = getClockTime(posix.CLOCK_MONOTONIC)
  end
end

Device_FAST_Line_i_.add_watchers = function(mapping)
  local ubusEventSource = eventsource("ubus")
  ubusEventSource.watch_event(mapping, setUbusEvent, "xdsl")
end

Device_FAST_Line_i_.set = {
  Enable = function(mapping, param, value, key)
    local device = getDevice(key)
    xdslBinding.sectionname = device
    xdslBinding.option = "enabled"
    uciHelper.set_on_uci(xdslBinding, value, commitapply)
    isConfigChanged = true
  end,
}

function Device_FAST_Line_i_.entries()
  model = nwmodel.load()
  return model:getKeys(GFASTLine)
end

Device_FAST_Line_i_.revert = function()
  if isConfigChanged then
    uciHelper.revert(xdslBinding)
    isConfigChanged = false
  end
end


register(Device_FAST_Line_i_)

