-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_IP_Interface_i_IPv6Prefix_i_ = {
  objectType = {
    name = "Device.IP.Interface.{i}.IPv6Prefix.{i}.",
    access = "readOnly",
    numEntriesParameter = "IPv6PrefixNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
--[[ TODO
      Enable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Disabled",
          "Enabled",
          "Error",
        },
        default = "Disabled",
      },
      PrefixStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Preferred",
          "Deprecated",
          "Invalid",
          "Inaccessible",
          "Unknown",
        },
        default = "Invalid",
      },
--]]
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
        max = "64",
      },
      Prefix = {
        access = "readOnly", --Setting of Prefix will disable lan, so cannot implement set functionality
        type = "string",
        default = "",
      },
--[[ TODO
      Origin = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "AutoConfigured",
          "PrefixDelegation",
          "RouterAdvertisement",
          "WellKnown",
          "Static",
          "Child",
        },
        default = "Static",
      },
      StaticType = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "Static",
          "Inapplicable",
          "PrefixDelegation",
          "Child",
        },
        default = "Static",
      },
      ParentPrefix = {
        access = "readWrite",
        type = "string",
        pathRef = true,
        targetParent = "Device.IP.Interface.{i}.IPv6Prefix.{i}.",
        default = "",
      },
      ChildPrefixBits = {
        access = "readWrite",
        type = "string",
        default = "",
      },
      OnLink = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      Autonomous = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
--]]
      PreferredLifetime = {
        access = "readOnly", -- readWrite currently not supported
        type = "dateTime",
        default = "9999-12-31T23:59:59Z",
      },
      ValidLifetime = {
        access = "readOnly", -- readWrite currently not supported
        type = "dateTime",
        default = "9999-12-31T23:59:59Z",
      },
    }
  }
}

local next, os = next, os
local ubusConnection = mapper("ubus").connect()

local prefixCache = {}

local function getCachedData(key, parentKey)
  local iplist = prefixCache[parentKey]
  return iplist and iplist[key] or {}
end

local function getPrefixValue(param, key, parentKey, cachedData)
  local prefix = cachedData or getCachedData(key, parentKey)
  if prefix.address and prefix.mask then
    return prefix.address .. "/" .. prefix.mask
  end
  return ""
end

local function getTime(param, key, parentKey, cachedData)
  local time
  local data = cachedData or getCachedData(key, parentKey)
  if param == "PreferredLifetime" then
    time = data.preferred or ""
  end
  if param == "ValidLifetime" then
    time = data.valid or ""
  end
  if time and time ~= "" then
   return os.date("%Y-%m-%dT%H:%M:%SZ",os.time()+ tonumber(time))
  end
  return "9999-12-31T23:59:59Z"
end

Device_IP_Interface_i_IPv6Prefix_i_.entries = function(mapping, parentKey)
  local keys = {}
  local cache = {}
  local prefixData = {}
  local ubusStatus = ubusConnection:call("network.interface." .. parentKey , "status", {})

  if ubusStatus then
    if ubusStatus["ipv6-prefix"] and next(ubusStatus["ipv6-prefix"]) then
      prefixData =  ubusStatus["ipv6-prefix"]
    elseif ubusStatus['ipv6-prefix-assignment'] and next(ubusStatus['ipv6-prefix-assignment']) then
      prefixData =  ubusStatus["ipv6-prefix-assignment"]
    end
  end

  for index, values in ipairs(prefixData) do
    local key = index==1 and parentKey or (parentKey..'|'..index)
    cache[key] = {address = values.address, preferred = values.preferred, valid = values.valid, mask=values.mask}
    keys[#keys+1] = key
  end
  prefixCache[parentKey] = cache
  return keys
end

local getterTable = {
  Prefix = getPrefixValue,
  PreferredLifetime = getTime,
  ValidLifetime = getTime
}

Device_IP_Interface_i_IPv6Prefix_i_.get = function(mapping, param, key, parentKey)
  return getterTable[param](param, key, parentKey)
end

Device_IP_Interface_i_IPv6Prefix_i_.getall = function(mapping, key, parentKey)
  local prefixData = getCachedData(key, parentKey)
  return {
    Prefix = getPrefixValue("Prefix", key, parentKey, prefixData),
    PreferredLifetime = getTime("PreferredLifetime", key, parentKey, prefixData),
    ValidLifetime = getTime("ValidLifetime", key, parentKey, prefixData),
  }
end

register(Device_IP_Interface_i_IPv6Prefix_i_)
