-- Automatically generated from Device:2.10
-- using generator version 2.3
local Device_IP_Interface_i_IPv6Prefix_i_ = {
  objectType = {
    name = "Device.IP.Interface.{i}.IPv6Prefix.{i}.",
    access = "readOnly",
    numEntriesParameter = "IPv6PrefixNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
--[[ TODO
      Enable = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Disabled",
          "Enabled",
          "Error",
        },
        default = "Disabled",
      },
      PrefixStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Preferred",
          "Deprecated",
          "Invalid",
          "Inaccessible",
          "Unknown",
        },
        default = "Invalid",
      },
--]]
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
        max = "64",
      },
      Prefix = {
        access = "readOnly", --Setting of Prefix will disable lan, so cannot implement set functionality
        type = "string",
        default = "",
      },
--[[ TODO
      Origin = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "AutoConfigured",
          "PrefixDelegation",
          "RouterAdvertisement",
          "WellKnown",
          "Static",
          "Child",
        },
        default = "Static",
      },
      StaticType = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "Static",
          "Inapplicable",
          "PrefixDelegation",
          "Child",
        },
        default = "Static",
      },
      ParentPrefix = {
        access = "readWrite",
        type = "string",
        pathRef = true,
        targetParent = "Device.IP.Interface.{i}.IPv6Prefix.{i}.",
        default = "",
      },
      ChildPrefixBits = {
        access = "readWrite",
        type = "string",
        default = "",
      },
      OnLink = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      Autonomous = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
--]]
      PreferredLifetime = {
        access = "readOnly", -- readWrite currently not supported
        type = "dateTime",
        default = "9999-12-31T23:59:59Z",
      },
      ValidLifetime = {
        access = "readOnly", -- readWrite currently not supported
        type = "dateTime",
        default = "9999-12-31T23:59:59Z",
      },
    }
  }
}

local ubusConnection = mapper("ubus").connect()

Device_IP_Interface_i_IPv6Prefix_i_.entries = function(mapping, parentkey)
  local ubusStatus = ubusConnection:call("network.interface." .. parentkey , "status", {})
  if ubusStatus and (ubusStatus["ipv6-prefix"] and next(ubusStatus["ipv6-prefix"])) or (ubusStatus['ipv6-prefix-assignment'] and next(ubusStatus['ipv6-prefix-assignment'])) then
    return {parentkey}
  end
  return {}
end

local paramMap = {
  Prefix = "address",
  PreferredLifetime = "preferred",
  ValidLifetime = "valid"
}

local function getPrefixValue(param,key,ubusStatus)
  ubusStatus = ubusStatus or ubusConnection:call("network.interface." .. key,"status",{})
  if next(ubusStatus["ipv6-prefix"]) and ubusStatus["ipv6-prefix"][1] then
    return ubusStatus["ipv6-prefix"][1][paramMap[param]] or ""
  elseif next(ubusStatus["ipv6-prefix-assignment"]) and ubusStatus["ipv6-prefix-assignment"][1] then
    return ubusStatus["ipv6-prefix-assignment"][1][paramMap[param]] or ""
  end
  return ""
end

local function getTime(param,key,ubusStatus)
  local time = getPrefixValue(param,key,ubusStatus)
  if time ~= "" then
   return os.date("%Y-%m-%dT%H:%M:%SZ",os.time()+ tonumber(time))
  end
  return "9999-12-31T23:59:59Z"
end

--getterTable is used as suggested in review #18675 to use the same functions to fetch value in both get and getall.
--As parentkey will come after key in function(mapping,param,key) declaration it is difficult to pass ubusStatus after
--key. So, to adapt the functions accordingly this getterTable is needed.

local getterTable = {
  Prefix = getPrefixValue,
  PreferredLifetime = getTime,
  ValidLifetime = getTime
}

Device_IP_Interface_i_IPv6Prefix_i_.get = function(mapping,param,key)
  return getterTable[param](param,key)
end

Device_IP_Interface_i_IPv6Prefix_i_.getall = function(mapping,key)
  local ubusStatus = ubusConnection:call("network.interface." .. key,"status",{})
  local allValues = {
    Prefix = getPrefixValue("Prefix",key,ubusStatus),
    PreferredLifetime = getTime("PreferredLifetime",key,ubusStatus),
    ValidLifetime = getTime("ValidLifetime",key,ubusStatus)
  }
  return allValues
end

register(Device_IP_Interface_i_IPv6Prefix_i_)


