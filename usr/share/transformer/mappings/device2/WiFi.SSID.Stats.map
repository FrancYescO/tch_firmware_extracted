-- Automatically generated from Device:2.2
-- using generator version 2.1
    local Device_WiFi_SSID_i_Stats_ = {
    objectType = {
    name = "Device.WiFi.SSID.{i}.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      BytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      PacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      PacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
       type = "unsignedLong",
      },
      ErrorsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ErrorsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      AggregatedPacketCount = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UnicastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      UnicastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      DiscardPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DiscardPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      MulticastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      MulticastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BroadcastPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
      BroadcastPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
      },
--[[      UnknownProtoPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },]]--
    }
  }
}

local network = require("transformer.shared.common.network")
local tostring = tostring

local statsEntries = {
  BytesSent = "tx_bytes",
  BytesReceived = "rx_bytes",
  PacketsSent = "tx_packets",
  PacketsReceived = "rx_packets",
  ErrorsSent = "tx_errors",
  ErrorsReceived = "rx_errors",
  AggregatedPacketCount = "tx_packets",
  UnicastPacketsSent = "tx_unicast_packets",
  UnicastPacketsReceived = "rx_unicast_packets",
  MulticastPacketsSent = "tx_multicast_packets",
  MulticastPacketsReceived = "rx_multicast_packets",
  BroadcastPacketsSent = "tx_broadcast_packets",
  BroadcastPacketsReceived = "rx_broadcast_packets",
  DiscardPacketsSent = "tx_discards",
  DiscardPacketsReceived = "rx_discards",
}

Device_WiFi_SSID_i_Stats_.get = function(mapping, param, key)
  local field = statsEntries[param]
  if field then
    return tostring(network.getSSIDStats(key)[field] or 0)
  end
  return "0"
end

Device_WiFi_SSID_i_Stats_.getall = function(mapping, key)
  local all = {}
  local data = network.getSSIDStats(key)
  for param, field in pairs(statsEntries) do
    all[param] = tostring(data[field] or 0)
  end
  return all
end

register(Device_WiFi_SSID_i_Stats_)
