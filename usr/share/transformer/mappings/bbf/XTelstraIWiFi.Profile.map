local function profile_commit()
end

local function profile_revert()
end

local Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.Profile.{i}.",
        access = "readOnly",
        minEntries = 0,
        maxEntries = math.huge,
        numEntriesParameter = "ProfileNumberOfEntries",
        parameters = {
            -- Configuration paramters
            Key  = {
                access = "readWrite",
                type = "string",
                max = "255",
            },
            -- End of Configuration paramters
        }
    }
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_.entries = function(mapping, parentkey)
    local entries = {}
    entries[1] = "TLS"
    entries[2] = "FON"
    return entries
end

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_.get = {
    Key = function(mapping, param, key)
        -- Not to be used phase1
        return ""
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_.set = {
    Key = function(mapping, param, value, key)
        -- Not to be used phase1
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_.commit = profile_commit
Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_.revert = profile_revert
local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end

local Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_CaptivePortal_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.Profile.{i}.CaptivePortal.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            -- Configuration paramters
            URL = {
                access = "readWrite",
                type = "string",
                max = "128",
            },
            IntegritySecret = {
                access = "readWrite",
                type = "string",
                max = "255",
            },
            TemporalCredential = {
                access = "readWrite",
                type = "string",
                max = "255",
            },
            -- End of Configuration paramters
        }
    }
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_CaptivePortal_.getall = function(mapping, key)
    local data = {
        URL = "",
        IntegritySecret = "",
        TemporalCredential = "",
    }

    return data
end

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_CaptivePortal_.get = {
    URL = function(mapping, param, key)
        return ""
    end,
    IntegritySecret = function(mapping, param, key)
        return ""
    end,
    TemporalCredential = function(mapping, param, key)
        return ""
    end,

}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_CaptivePortal_.set = {
    URL = function(mapping, param, value, key)
    end,
    IntegritySecret = function(mapping, param, value, key)
    end,
    TemporalCredential = function(mapping, param, value, key)
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_CaptivePortal_.commit = profile_commit
Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_CaptivePortal_.revert = profile_revert
duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_CaptivePortal_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end

local Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_EAP_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.Profile.{i}.EAP.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            -- Configuration paramters
            Mode = {
                access = "readWrite",
                type = "string",
                max = "32",
            },
            Server = {
                access = "readWrite",
                type = "string",
                max = "128",
            },
            Secret = {
                access = "readWrite",
                type = "string",
                max = "255",
            },
            -- End of Configuration paramters
        }
    }
}
Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_EAP_.getall = function(mapping, key)
    local data = {
        Mode = "",
        Server = "",
        Secret = "",
    }
    return data
end

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_EAP_.get = {
    Mode = function(mapping, param, key)
        return ""
    end,
    Server = function(mapping, param, key)
        return ""
    end,
    Secret = function(mapping, param, key)
        return ""
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_EAP_.set = {
    Mode = function(mapping, param, value, key)
        return nil, "Not to be used in this phase"
    end,
    Server = function(mapping, param, value, key)
        return nil, "Not to be used phase1"
    end,
    Secret = function(mapping, param, value, key)
        return nil, "Not to be used phase1"
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_EAP_.commit = profile_commit
Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_EAP_.revert = profile_revert
duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_EAP_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end

local Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.Profile.{i}.2G.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            -- Configuration paramters
            Enable = {
                access = "readWrite",
                type = "boolean",
                default = "0",
            },
            SSID = {
                access = "readWrite",
                type = "string",
                max = "128",
            },
            MaxAssocUsers = {
                access = "readWrite",
                type = "unsignedInt",
                default = "3",
            },
            -- End of Configuration paramters
        }
    }
}
Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_.getall = function(mapping, key)
    local data = {
        Enable = "0",
        SSID = "TELSTRA",
        MaxAssocUsers = "3",
    }
    return data
end

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_.get = {
    Enable = function(mapping, param, key)
	return "0"
    end,
    SSID = function(mapping, param, key)
	return "TELSTRA"
    end,
    MaxAssocUsers = function(mapping, param, key)
        return "3"
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_.set = {
    Enable = function(mapping, param, value, key)
    end,
    SSID = function(mapping, param, value, key)
    end,
    MaxAssocUsers = function(mapping, param, value, key)
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_.commit = profile_commit
Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_.revert = profile_revert
duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end

local Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_EAP_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.Profile.{i}.2G.EAP.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            -- Configuration paramters
            Enable = {
                access = "readWrite",
                type = "boolean",
                default = "0",
            },
            SSID = {
                access = "readWrite",
                type = "string",
                max = "128",
            },
            -- End of Configuration paramters
        }
    }
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_EAP_.getall = function(mapping, key)
    local data = {
        Enable = "0",
        SSID = "",
    }
    return data
end

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_EAP_.get = {
    Enable = function(mapping, param, key)
        -- Not to be used phase1
        return "0"
    end,
    SSID = function(mapping, param, key)
        -- Not to be used phase1
        return ""
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_EAP_.set = {
    Enable = function(mapping, param, value, key)
        return nil, "Not to be used phase1"
    end,
    SSID = function(mapping, param, value, key)
        return nil, "Not to be used phase1"
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_EAP_.commit = profile_commit
Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_EAP_.revert = profile_revert
duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_2G_EAP_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end

local Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.Profile.{i}.5G.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            -- Configuration paramters
            Enable = {
                access = "readWrite",
                type = "boolean",
                default = "0",
            },
            SSID = {
                access = "readWrite",
                type = "string",
                max = "128",
            },
            MaxAssocUsers = {
                access = "readWrite",
                type = "unsignedInt",
                default = "3",
            },
            -- End of Configuration paramters
        }
    }
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_.getall = function(mapping, key)
    local data = {
        Enable = "0",
        SSID = "",
        MaxAssocUsers = "3",
    }
    return data
end

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_.get = {
    Enable = function(mapping, param, key)
        return "0"
    end,
    SSID = function(mapping, param, key)
        return ""
    end,
    MaxAssocUsers = function(mapping, param, key)
        return "3"
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_.set = {
    Enable = function(mapping, param, value, key)
    end,
    SSID = function(mapping, param, value, key)
    end,
    MaxAssocUsers = function(mapping, param, value, key)
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_.commit = profile_commit
Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_.revert = profile_revert
duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end

local Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_EAP_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.Profile.{i}.5G.EAP.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            -- Configuration paramters
            Enable = {
                access = "readWrite",
                type = "boolean",
                default = "0",
            },
            SSID = {
                access = "readWrite",
                type = "string",
                max = "128",
            },
            -- End of Configuration paramters
        }
    }
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_EAP_.getall = function(mapping, key)
    local data = {
        Enable = "0",
        SSID = "",
    }
    return data
end

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_EAP_.get = {
    Enable = function(mapping, param, key)
        -- Not to be used phase1
        return "0"
    end,
    SSID = function(mapping, param, key)
        -- Not to be used phase1
        return ""
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_EAP_.set = {
    Enable = function(mapping, param, value, key)
        return nil, "Not to be used phase1"
    end,
    SSID = function(mapping, param, value, key)
        return nil, "Not to be used phase1"
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_EAP_.commit = profile_commit
Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_EAP_.revert = profile_revert
duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_Profile_i_5G_EAP_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
