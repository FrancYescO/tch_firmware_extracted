-- Manually generated
local Multi_MultiAP_X_000E50_ClientSteering_ = {
  objectType = {
    name = "#ROOT.X_000E50_ClientSteering.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "Object to customize ClientSteering",
    parameters = {
      Enabled = {
        access = "readWrite",
        type = "boolean",
        description = "Enable or Disable Mesh Wee controller"
      },
      LogLevel = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Debug log level"
      },
      SteeringRSSIThreshold = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-99",
            max = "0"
          },
        },
        description = "RSSI threshold of a station at which steering algorithm is triggered"
      },
      MonitorRSSIThreshold = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-99",
            max = "0"
          },
        },
        description = "RSSI threshold of station at which it is added to monitor list"
      },
      BeaconReportTimeout = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Steering algorithm will wait for this timeout to receive beacon metrics report from query time"
      },
      TargetBSSSelBeaconThreshold = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-99",
            max = "0"
          },
        },
        description = "Used for Target BSS selection , only BSSID with RSSI beyond this value will be taken for Steering"
      },
      TargetBSSSelUSMThreshold = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-99",
            max = "0"
          },
        },
        description = "Used for Target BSS selection , only BSSID with RSSI beyond this value will be taken for Steering"
      },
      TargetBSSSelTimeout = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Timeout beyond which target bss selection is dropped"
      },
      SteeringHoldDuration = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Timer to hold steering attempts due to momentary transition between good ... bad rssi"
      },
      SteeringParticipationHold = {
        access = "readWrite",
        type = "unsignedInt",
        description = "cooling period for a station which has recently joined in poor rssi to participate in steering"
      },
      PeriodicUSMEnable = {
        access = "readWrite",
        type = "boolean",
        description = "When enabled USM query is collected periodically from all the agents for stations which are in monitor mode"
      },
      USMQueryInterval = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Frequency of USM query when periodic_usm_enable flag is set",
      },
      USMReportAge = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Validity period of USM report since measurement"
      },
      BeaconReportAge = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Validity period of BCN report since measurement"
      },
      MacACLEnabled = {
        access = "readWrite",
        type = "boolean",
        description = "Enable or Disable mac access control"
      },
      TargetBSSSelFailPolicy = {
        access = "readWrite",
        type = "boolean",
        description = "Do not steer/steer if no Target BSS found"
      },
      SteeringRetryCount = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Steering algorithm will retry, if algorithm did not get enough metrics to find suitable target BSS"
      },
      SteeringWithDeauth = {
        access = "readWrite",
        type = "boolean",
        description = "Algorithm will try to send steering request along with 802.11 deauthentication to push the STA out",
      },
      DisassocImminent = {
        access = "readWrite",
        type = "boolean",
        description = "disassoc_imminent is a parameter in 802.11v BTM Query"
      },
      RCPIAdvancedPred = {
        access = "readWrite",
        type = "boolean",
        description = "When enabled it will try to predict beacon metrics report scale"
      },
      RCPIAdvancedUpperRange = {
        access = "readWrite",
        type = "int",
        description = "Parent beacon's upper range limit",
      },
      RCPIAdvancedLowerRange = {
        access = "readWrite",
        type = "int",
        description = "parent beacon's lower range limit"
      },
      STABlacklistingEnabled = {
        access = "readWrite",
        type = "boolean",
        description = "When enabled the steering algorithm will monitor STA for number of steering failures"
      },
      MaxFailures = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Maximum number of failures",
      },
      MaxFailurePeriod = {
        access = "readWrite",
        type = "unsignedInt",
        description = "starts when there is first STA steering failure"
      },
      NoSteeringPeriod = {
        access = "readWrite",
        type = "unsignedInt",
        description = "Station blacklist window"
      },
    }
  }
}

local uciHelper = mapper("ucihelper")
local getFromUci = uciHelper.get_from_uci
local getAllFromUci = uciHelper.getall_from_uci
local setOnUci = uciHelper.set_on_uci
local commit = uciHelper.commit
local revert = uciHelper.revert
local commitApply = commitapply
local steeringBinding = { config = "wee" , sectionname = "cs"}
local configChanged

local optionMappingTable = {
  Enabled = "enabled",
  LogLevel = "log_level",
  SteeringRSSIThreshold = "steering_rssi_threshold",
  MonitorRSSIThreshold = "monitor_rssi_threshold",
  BeaconReportTimeout = "beacon_report_timeout",
  TargetBSSSelBeaconThreshold = "target_bss_sel_bcn_threshold",
  TargetBSSSelUSMThreshold = "target_bss_sel_usm_threshold",
  TargetBSSSelTimeout = "target_bss_sel_timeout",
  SteeringHoldDuration = "steering_hold_duration",
  SteeringParticipationHold = "steering_participation_hold",
  PeriodicUSMEnable = "periodic_usm_enable",
  USMQueryInterval = "usm_query_interval",
  USMReportAge = "usm_report_age",
  BeaconReportAge = "bcn_report_age",
  MacACLEnabled = "enable_mac_acl",
  TargetBSSSelFailPolicy = "tbs_fail_policy",
  SteeringRetryCount = "steering_retry_count",
  SteeringWithDeauth = "steering_with_deauth",
  DisassocImminent = "disassoc_imminent",
  RCPIAdvancedPred = "rcpi_advanced_pred",
  RCPIAdvancedUpperRange = "rcpi_advanced_upper_range",
  RCPIAdvancedLowerRange = "rcpi_advanced_lower_range",
  STABlacklistingEnabled = "sta_blacklisting_enabled",
  MaxFailures = "sta_failcnt_threshold",
  MaxFailurePeriod = "sta_failcnt_mon_window",
  NoSteeringPeriod = "sta_blacklist_window",
}

local defaultMap = {
  Enabled = "0",
  LogLevel = "6",
  SteeringRSSIThreshold = "-65",
  MonitorRSSIThreshold = "",
  BeaconReportTimeout = "6",
  TargetBSSSelBeaconThreshold = "-65",
  TargetBSSSelUSMThreshold = "-65",
  TargetBSSSelTimeout = "10",
  SteeringHoldDuration = "50",
  SteeringParticipationHold = "20",
  PeriodicUSMEnable = "0",
  USMQueryInterval = "4",
  USMReportAge = "10",
  BeaconReportAge = "10",
  MacACLEnabled = "0",
  TargetBSSSelFailPolicy = "0",
  SteeringRetryCount = "1",
  SteeringWithDeauth = "0",
  DisassocImminent = "1",
  RCPIAdvancedPred = "1",
  RCPIAdvancedUpperRange = "30",
  RCPIAdvancedLowerRange = "-5",
  STABlacklistingEnabled = "1",
  MaxFailures = "5",
  MaxFailurePeriod = "1800",
  NoSteeringPeriod = "1800",
}

local function setUciValue(option, value)
  steeringBinding.option = option
  setOnUci(steeringBinding, value, commitApply)
  configChanged = true
end

Multi_MultiAP_X_000E50_ClientSteering_.set = function(mapping, param, value)
  setUciValue(optionMappingTable[param], value)
end

Multi_MultiAP_X_000E50_ClientSteering_.get = function(mapping, param)
  steeringBinding.default = defaultMap[param]
  steeringBinding.option = optionMappingTable[param]
  return getFromUci(steeringBinding) or defaultMap[param]
end

Multi_MultiAP_X_000E50_ClientSteering_.getall = function(mapping)
  local getAllValues = {}
  local result = getAllFromUci(steeringBinding) or {}
  for param, option in pairs(optionMappingTable) do
    getAllValues[param] = result[option] or defaultMap[param]
  end
  return getAllValues
end

Multi_MultiAP_X_000E50_ClientSteering_.commit = function()
  if configChanged then
    commit({config = "wee"})
  end
  configChanged = false
end

Multi_MultiAP_X_000E50_ClientSteering_.revert = function()
  if configChanged then
    revert({config =  "wee"})
  end
  configChanged = false
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_MultiAP_X_000E50_ClientSteering_, "#ROOT", { "Device.WiFi.MultiAP", "InternetGatewayDevice.X_000E50_MultiAP" })
for _, dupli in ipairs(duplicates) do
   register(dupli)
end
