local mapper, register = mapper, register
local leds = require("transformer.shared.leds")

local Multi_Leds_ = {
  objectType = {
    name = "#ROOT",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      LedNumberOfEntries = {
        access = "readOnly",
        type = "unsignedInt",
      },
      StatusLedsState = {
        access = "readWrite",
        type = "boolean",
        description = "LEDs power saving state",
      },
    }
  }
}

local commitapply = commitapply
local uciHelper = mapper('ucihelper')
local getFromUci = uciHelper.get_from_uci
local ledfwBinding = {config = "ledfw", sectionname = "status_led", option = "enable", default = "1"}
local setOnUci = uciHelper.set_on_uci
local configChanged = false

Multi_Leds_.get = {
  LedNumberOfEntries = function(mapping, param, key)
    local ledNumber = 0
    local ledsInfo = leds.getLedsInfo()
    for k, v in pairs(ledsInfo) do
      ledNumber = ledNumber + 1
    end
    return tostring(ledNumber)
  end,
  StatusLedsState = function()
    return getFromUci(ledfwBinding) == "1" and "0" or "1"
  end
}

Multi_Leds_.set = {
  StatusLedsState = function(mapping, param, value)
    value = value == "1" and "0" or "1"
    setOnUci(ledfwBinding, value, commitapply)
    configChanged = true
  end
}

Multi_Leds_.commit = function()
  if configChanged then
    uciHelper.commit(ledfwBinding)
  end
  configChanged = false
end

Multi_Leds_.revert = function()
  if configChanged then
    uciHelper.revert(ledfwBinding)
  end
  configChanged = false
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Leds_, "#ROOT", { "rpc.Leds.", "Device.Leds.", "InternetGatewayDevice.X_VODAFONE_LED." })
for _, dupli in ipairs(duplicates) do
  if dupli.objectType.name:match("^InternetGatewayDevice.") then
    dupli.objectType.parameters.LedNumberOfEntries = nil
  else
    dupli.objectType.parameters.StatusLedsState = nil
  end
  register(dupli)
end
