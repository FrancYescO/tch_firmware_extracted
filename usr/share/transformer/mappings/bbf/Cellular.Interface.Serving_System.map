local setmetatable = setmetatable
local helper = require("mobiled.scripthelpers")

local serving_system_obj = {
	objectType = {
		name = '#ROOT',
		access = 'readOnly',
		minEntries = 1,
		maxEntries = 1,
		parameters = {
			CellID = {
				access = "readOnly",
				type = "string"
			},
			TrackingAreaCode = {
				access = "readOnly",
				type = "string"
			},
			LocationAreaCode = {
				access = "readOnly",
				type = "string"
			}
		}
	}
}

local conn = mapper("ubus").connect()
if not conn then
	return nil, "Failed to connect to UBUS"
end

function serving_system_obj.getall(mapping, key)
	local info = helper.getUbusData(conn, "mobiled.device", "get", { imei = key })
	local dev_idx = tonumber(info.dev_idx) or 1

	local result = {}
	setmetatable(result, { __index = function() return "" end })
	local data = helper.getUbusData(conn, "mobiled.network", "serving_system", { dev_idx = dev_idx })
	result.CellID = data.cell_id
	result.TrackingAreaCode = data.tracking_area_code
	result.LocationAreaCode = data.location_area_code
	return result
end

function serving_system_obj.get(mapping, paramName, key)
	return serving_system_obj.getall(mapping, key)[paramName]
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(serving_system_obj, "#ROOT", {"InternetGatewayDevice.X_000E50_Cellular.Interface.{i}.Serving_System.", "Device.Cellular.Interface.{i}.X_000E50_Serving_System."})
for _, dupli in ipairs(duplicates) do
	register(dupli)
end
