local setmetatable, mapper = setmetatable, mapper
local helper = require("mobiled.scripthelpers")

local obj = {
	objectType = {
		name = "#ROOT.{i}.USIM.",
		access = "readOnly",
		minEntries = 1,
		maxEntries = 1,
		parameters = {
			Status = {
				access = "readOnly",
				type = "string",
				enumeration = {
					"None",
					"Available",
					"Valid",
					"Blocked",
					"Error"
				}
			},
			IMSI = {
				access = "readOnly",
				type = "string",
				max = "15"
			},
			ICCID = {
				access = "readOnly",
				type = "string",
				max = "20"
			},
			MSISDN = {
				access = "readOnly",
				type = "string",
				min = "14",
				max = "15"
			},
			PINCheck = {
				access = "readOnly",
				type = "string",
				enumeration = {
					"OnNetworkAccess",
					"Reboot",
					"Off"
				}
			},
			PIN = {
				access = "readOnly",
				type = "string",
				min = "4",
				max = "4"
			}
		}
	}
}

local conn = mapper("ubus").connect()
if not conn then
	return
end

local function getall(mapping, key)
	local result = {}
	setmetatable(result, { __index = function() return "" end })
	local simInfo = helper.getUbusData(conn, "mobiled.sim", "get", {})
	local pinInfo = helper.getUbusData(conn, "mobiled.sim.pin", "get", {})
	result.Status = "Error"
	if simInfo.sim_state == "not_present" then
	  result.Status = "None"
	elseif (simInfo.sim_state == "ready" or simInfo.sim_state == "locked") and pinInfo.pin_state == "enabled_not_verified" then
	  result.Status = "Available"
	elseif simInfo.sim_state == "ready" and (pinInfo.pin_state == "enabled_verified" or pinInfo.pin_state == "disabled") then
	  result.Status = "Valid"
	elseif (simInfo.sim_state == "ready" or simInfo.sim_state == "blocked") and (pinInfo.pin_state == "blocked" or pinInfo.pin_state == "permanently_blocked") then
	  result.Status = "Blocked"
	end
	result.IMSI = simInfo.imsi
	result.ICCID = simInfo.iccid
	result.MSISDN = simInfo.msisdn
	return result
end

local function get(mapping, paramName, key)
	return getall(mapping, key)[paramName]
end

obj.getall = getall
obj.get = get

local function mobiled_event(mapping, event, msg)
	if msg["event"] and msg["event"] == "sim_initialized" and msg["dev_idx"] then
		return {{ key = "cellular_interface_1", paramname = "IMSI" }}
	end
end

obj.add_watchers = function(mapping)
	local ubus_evsrc = eventsource("ubus")
	ubus_evsrc.watch_event(mapping, mobiled_event, "mobiled")
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(obj, "#ROOT", {"InternetGatewayDevice.X_000E50_Cellular.Interface", "Device.Cellular.Interface"})
for _, dupli in ipairs(duplicates) do
	register(dupli)
end
