-- Automatically generated from InternetGatewayDevice:1.14 and Device:2.10
-- using generator version 2.3
local Multi_Firewall_ = {
  objectType = {
    name = "#ROOT.Firewall.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
--[[ TODO
	Enable = {
        access = "readWrite",
        type = "boolean",
      },
--]]
      Config = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "High",
          "Low",
          -- "Advanced", We are not supporting Advanced option,
          "X_000E50_Lax",
          "X_000E50_User"
        },
      },
      Version = {
        access = "readOnly",
        type = "string",
        max = "16",
      },
--[[ TODO
      AdvancedLevel = {
        access = "readWrite",
        type = "string",
        pathRef = true,
        targetParent = "Device.Firewall.Level.{i}.",
      },
      Type = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Stateless",
          "Stateful",
        },
      },
      LastChange = {
        access = "readOnly",
        type = "dateTime",
      },
--]]
      -- LevelNumberOfEntries
      -- automatically created when Device.Firewall.Level.{i}. is loaded
      -- ChainNumberOfEntries
      -- automatically created when Device.Firewall.Chain.{i}. is loaded
    }
  }
}

local uciHelper = mapper("ucihelper")
local fwBinding = {config = "firewall"}
local fwZone = {config = "firewall", sectionname = "zone"}
local getFromUci = uciHelper.get_from_uci
local setOnUci = uciHelper.set_on_uci
local commitApply = commitapply
local isConfigChanged = false

--[[ fwConfigMap is mapped in order of {firewall.fwconfig.level, firewall.zone[wan].forward,
 firewall.zone[wan].input, firewall.defaultoutgoing.target} --]]
local fwConfigMap = {
  High = {"high", "DROP", "DROP", "DROP"},
  Low = {"normal", "DROP", "DROP", "ACCEPT"},
  X_000E50_Lax = {"lax", "ACCEPT", "ACCEPT", "ACCEPT"},
  X_000E50_User = {"user", "DROP", "DROP", "ACCEPT"}
}

local uciConfigMap = {
  high = "High",
  normal = "Low",
  lax = "X_000E50_Lax",
  user = "X_000E50_User"
}

local function setOutGoingPolicyTo(paramValue)
  fwBinding.sectionname = "defaultoutgoing"
  fwBinding.option = "target"
  setOnUci(fwBinding, fwConfigMap[paramValue][4], commitApply)
end

local function setFwConfigLevel(paramValue)
  fwBinding.sectionname = "fwconfig"
  fwBinding.option = "level"
  setOnUci(fwBinding, fwConfigMap[paramValue][1], commitApply)
end

local function setIncomingPolicyTo(paramValue)
-- set FORWARD and INPUT on wan zone to the policy
  uciHelper.foreach_on_uci(fwZone, function(s)
    if s["name"] == "wan" then
      fwBinding.sectionname = s[".name"]
      fwBinding.option = "forward"
      setOnUci(fwBinding, fwConfigMap[paramValue][2] , commitApply)

      fwBinding.option = "input"
      setOnUci(fwBinding, fwConfigMap[paramValue][3], commitApply)
      return false
    end
 end)
end

Multi_Firewall_.get = {
  Config = function(mapping, param, key, parentkey)
    fwBinding.sectionname = "fwconfig"
    fwBinding.option = "level"
    local value = getFromUci(fwBinding)
    return uciConfigMap[value] or "Low"
  end,

  Version = "",
}

Multi_Firewall_.set = {
  Config = function (mapping, paramName, paramValue, key)
    local options = {
      High = { "highrules", "0"},
      Low = { "normalrules", "0"},
      X_000E50_User = {"userrules", "0"},
      X_000E50_Lax = { "laxrules", "0"}
    }
    options[paramValue][2] = "1"

    fwBinding.default = ""
    for k,v in pairs(options) do
      fwBinding.sectionname = v[1]
      fwBinding.option = "enabled"
      setOnUci(fwBinding, v[2], commitApply)
    end
    setOutGoingPolicyTo(paramValue)
    setIncomingPolicyTo(paramValue)
    setFwConfigLevel(paramValue)
    isConfigChanged = true
  end,
}

Multi_Firewall_.commit = function()
  if isConfigChanged then
    uciHelper.commit(fwBinding)
    isConfigChanged = false
  end
end

Multi_Firewall_.revert = function()
  if isConfigChanged then
    uciHelper.revert(fwBinding)
    isConfigChanged = false
  end
end

local function uciEventCb (mapping, action, config, sectiontype, sectionname, option)
  return  { { key = "", paramName = "Config"} }
end

Multi_Firewall_.add_watchers = function(mapping)
  local uciEvsrc = eventsource("uci")
  uciEvsrc.watch(mapping, { set = uciEventCb }, "firewall", "rulesgroup", "highrules","enabled")
  uciEvsrc.watch(mapping, { set = uciEventCb }, "firewall", "rulesgroup", "userrules","enabled")
  uciEvsrc.watch(mapping, { set = uciEventCb }, "firewall", "rulesgroup", "normalrules","enabled")
  uciEvsrc.watch(mapping, { set = uciEventCb }, "firewall", "rulesgroup", "laxrules","enabled")
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Firewall_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
