-- Manually generated
local Multi_Services_X_000E50_AccessManagement_SSH_ServerAccess_i_= {
  objectType = {
    name = "#ROOT.Services.X_000E50_AccessManagement.SSH.ServerAccess.{i}.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    description = "Parameters to configure server access via ACS",
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
        description = "Enable/disable server access",
      },
      Interface = {
        access = "readOnly",
        type = "string",
        pathRef = true,
        description = "Specifies via which interface server access will be allowed. Empty value indicates any interface",
      },
    },
  },
}

local uciHelper = mapper("ucihelper")
local getFromUci = uciHelper.get_from_uci
local setOnUci = uciHelper.set_on_uci
local forEachOnUci = uciHelper.foreach_on_uci
local wanconn = require("transformer.shared.wanconnection")
local network = require("transformer.shared.common.network")
local dropbearBinding = { config = "dropbear" }
local configChanged = false

local function getUciValue(section, option, default)
  dropbearBinding.sectionname = section
  dropbearBinding.option = option
  dropbearBinding.default = default
  return getFromUci(dropbearBinding)
end

local function setUciValue(section, option, value)
  dropbearBinding.sectionname = section
  dropbearBinding.option = option
  setOnUci(dropbearBinding, value, commitapply)
  configChanged = true
end

Multi_Services_X_000E50_AccessManagement_SSH_ServerAccess_i_.entries = function()
  local entries = {}
  dropbearBinding.sectionname = "dropbear"
  forEachOnUci(dropbearBinding, function(s)
    entries[#entries + 1] = s['.name']
  end)
  return entries
end

Multi_Services_X_000E50_AccessManagement_SSH_ServerAccess_i_.get = {
  Enable = function(mapping, param, key)
    return getUciValue(key, "enable", "0")
  end,
  Interface = function(mapping, param, key)
    local path
    local interface = getUciValue(key, "Interface")
    if interface ~= "" then
      local lanInterfaces = network.getLanInterfaces()
      if lanInterfaces[interface] then
        path = resolve('InternetGatewayDevice.LANDevice.{i}.', interface)
      else
        local intf, status = wanconn.get_connection_key(interface)
        if intf and status then
          if status.proto == "pppoe" or status.proto == "pppoa" then
            path = resolve("InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.", intf)
          else
            path = resolve("InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.", intf)
          end
        end
      end
    end
    return path or ""
  end
}

Multi_Services_X_000E50_AccessManagement_SSH_ServerAccess_i_.set = {
  Enable = function(mapping, param, value, key)
    setUciValue(key, "enable", value)
  end
}

Multi_Services_X_000E50_AccessManagement_SSH_ServerAccess_i_.commit = function()
  if configChanged then
    uciHelper.commit(dropbearBinding)
  end
  configChanged = false
end

Multi_Services_X_000E50_AccessManagement_SSH_ServerAccess_i_.revert = function()
  if configChanged then
    uciHelper.revert(dropbearBinding)
  end
  configChanged = false
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Services_X_000E50_AccessManagement_SSH_ServerAccess_i_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
    register(dupli)
end
