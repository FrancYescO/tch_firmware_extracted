-- Automatically generated from Device:2.11
-- using generator version 2.3
local Multi_FAST_Line_i_TestParams_ = {
  objectType = {
    name = "#ROOT.TestParams.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "This object contains the FAST line test parameters that are available during the L0 (i.e., Showtime) state.",
    parameters = {
      SNRGds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Reports the number of sub-carriers in any one sub-carrier group used to represent the downstream SNR(f) values.",
      },
      SNRGus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Reports the number of sub-carriers in any one sub-carrier group used to represent the upstream SNR(f) values.",
      },
      SNRpsds = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "2047",
        type = "string",
        description = "Reports the downstream SNR(f) values.",
      },
      SNRpsus = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "2047",
        type = "string",
        description = "Reports the upstream SNR(f) values.",
      },
      SNRMTds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Reports the number of symbols used to measure the downstream SNR(f) values.",
      },
      SNRMTus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Reports the number of symbols used to measure the upstream SNR(f) values.",
      },
      ACTINP = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Reports the actual INP against SHINE.",
      },
      NFEC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Reports the DTU FEC codeword length (expressed in 1 byte unit).",
      },
      RFEC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
        description = "Reports the DTU FEC codeword redundancy.",
      },
      UpstreamCurrRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Reports the current physical layer aggregate data rate (expressed in Kbps) of the upstream FAST.",
      },
      DownstreamCurrRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Reports the current physical layer aggregate data rate (expressed in Kbps) of the upstream FAST.",
      },
      ACTINPREIN = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Reports the actual INP against REIN.",
      },
    }
  }
}

local _, xdslctl = pcall(require,"transformer.shared.xdslctl")

local function xdslctlLineIdMap2(key)
  if string.find(key, "dsl:dsl") then
    return string.gsub(key, "dsl:dsl", "line")
  elseif string.find(key, "dsl") then
    return string.gsub(key, "dsl", "line")
  else
    return nil
  end
end

local function getdslData(dslInfo, val, default, key, size)
  local dslData = xdslctl.infoValue(dslInfo, val, default, key) or "0"
  if #dslData > size then
    local finaldslData = string.sub(dslData, 1, size)
    return string.match(finaldslData, "(.*)%,")
  end
  return dslData
end

Multi_FAST_Line_i_TestParams_.get = {
  SNRGds = function(mapping, param, key)
    return xdslctl.infoValue("SNRG", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  SNRGus = function(mapping, param, key)
    return xdslctl.infoValue("SNRG", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  SNRpsds = function(mapping, param, key)
    return getdslData("SNRps", "ds", nil, xdslctlLineIdMap2(key), 2047) or "0"
  end,
  SNRpsus = function(mapping, param, key)
    return getdslData("SNRps", "us", nil, xdslctlLineIdMap2(key), 2047) or "0"
  end,
  SNRMTds = function(mapping, param, key)
    return xdslctl.infoValue("SNRMT", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  SNRMTus = function(mapping, param, key)
    return xdslctl.infoValue("SNRMT", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  ACTINP = function(mapping, param, key)
    return xdslctl.infoValue("ACTINP", nil, nil, xdslctlLineIdMap2(key)) or "0"
  end,
  NFEC = function(mapping, param, key)
    return xdslctl.infoValue("NFEC", nil, nil, xdslctlLineIdMap2(key)) or "0"
  end,
  RFEC = function(mapping, param, key)
    return xdslctl.infoValue("RFEC", nil, nil, xdslctlLineIdMap2(key)) or "0"
  end,
  UpstreamCurrRate = function(mapping, param, key)
    return xdslctl.infoValue("currentrate", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  DownstreamCurrRate = function(mapping, param, key)
    return xdslctl.infoValue("currentrate", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  ACTINPREIN = function(mapping, param, key)
    return xdslctl.infoValue("ACTINP", nil, nil, xdslctlLineIdMap2(key)) or "0"
  end,
}

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_FAST_Line_i_TestParams_, "#ROOT", { "InternetGatewayDevice.X_000E50_FAST.Line.{i}", "Device.FAST.Line.{i}" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end

