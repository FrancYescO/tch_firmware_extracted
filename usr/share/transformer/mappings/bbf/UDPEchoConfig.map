local open, match, mapper, resolve, commitapply = io.open, string.match, mapper, resolve, commitapply
local nwcommon = mapper("nwcommon")
local wanconn = require("transformer.shared.wanconnection")
local inet = require "tch.inet"
local udpechoconfigBinding = { config = "udpechoconfig" }
local uciHelper = mapper("ucihelper")
local configChanged
local filePath = "/tmp/tr143/udp_echo_"

local Multi_UDPEchoConfig_ = {
  objectType = {
    name = "#ROOT.UDPEchoConfig.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      Interface = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      SourceIPAddress = {
        access = "readWrite",
        type = "string",
      },
      UDPPort = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "65535",
          },
        },
      },
      EchoPlusEnabled = {
        access = "readWrite",
        type = "boolean",
      },
      EchoPlusSupported = {
        access = "readOnly",
        type = "boolean",
      },
      PacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      PacketsResponded = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      BytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      BytesResponded = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      TimeFirstPacketReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      TimeLastPacketReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
    }
  }
}

local inputParaList = {
  Enable = "0",
  Interface = "",
  SourceIPAddress = "0.0.0.0",
  UDPPort = "0",
  EchoPlusEnabled = "0",
  EchoPlusSupported = "1",
  PacketsReceived = "0",
  PacketsResponded = "0",
  BytesReceived = "0",
  BytesResponded = "0",
  TimeFirstPacketReceived = "",
  TimeLastPacketReceived = ""
}

local function getUciValue(mapping, option)
  udpechoconfigBinding.sectionname = mapping.section
  udpechoconfigBinding.option = option
  return uciHelper.get_from_uci(udpechoconfigBinding)
end

local function setUciValue(mapping, option, value)
  udpechoconfigBinding.sectionname = mapping.section
  udpechoconfigBinding.option = option
  uciHelper.set_on_uci(udpechoconfigBinding, value, commitapply)
  configChanged = true
end

local function getUdpEchoResult (filepath, paramname)
  local fd = open(filepath)
  if fd then
    local name, value
    for line in fd:lines() do
      --line format: name = value such as SourceIPAddress = 10.11.58.95
      name, value = match (line, "^(%w+) = ([%w-:.]+)$")
      if paramname == name then
        fd:close()
        return value
      end
    end
    fd:close()
  else
    -- return default values if diagnostics test have not been run, or any error while opening result file.
    return inputParaList[paramname]
  end
end

Multi_UDPEchoConfig_.get = {
  Enable = function (mapping, paramname)
    return getUciValue(mapping, paramname)
  end,
  Interface = function (mapping, paramname)
    local value = getUciValue(mapping, paramname)
    local path = ""
    local lanInterfaces = nwcommon.findLanWanInterfaces(false)
    local isLan = false
    for _, j in pairs(lanInterfaces) do
      if value == j then
        isLan = true
        break
      end
    end
    if match(mapping.objectType.name, "^Device") then -- device2
      path = resolve("Device.IP.Interface.{i}.", value)
    else -- igd
      if isLan then
        path = resolve('InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.IPInterface.{i}.', value)
      else
        local key, status = wanconn.get_connection_key(value)
        if key and status then
          if status.proto == "pppoe" or status.proto == "pppoa" then
            path = resolve("InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.", key)
          else
            path = resolve("InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.", key)
          end
        end
      end
    end
    return path or ""
  end,
  SourceIPAddress = function (mapping, paramname)
    return getUciValue(mapping, paramname)
  end,
  UDPPort = function (mapping, paramname)
    return getUciValue(mapping, paramname)
  end,
  EchoPlusEnabled = function (mapping, paramname)
    return getUciValue(mapping, paramname)
  end,
  EchoPlusSupported = function (mapping, paramname)
    return getUciValue(mapping, paramname)
  end,
  PacketsReceived = function (mapping, paramname)
    return getUdpEchoResult (filePath .. mapping.section .. ".out", paramname)
  end,
  PacketsResponded = function (mapping, paramname)
    return getUdpEchoResult (filePath .. mapping.section .. ".out", paramname)
  end,
  BytesReceived = function (mapping, paramname)
    return getUdpEchoResult (filePath .. mapping.section .. ".out", paramname)
  end,
  BytesResponded = function (mapping, paramname)
    return getUdpEchoResult (filePath .. mapping.section .. ".out", paramname)
  end,
  TimeFirstPacketReceived = function (mapping, paramname)
    return getUdpEchoResult (filePath .. mapping.section .. ".out", paramname)
  end,
  TimeLastPacketReceived = function (mapping, paramname)
    return getUdpEchoResult (filePath .. mapping.section .. ".out", paramname)
  end,
}

local function setInterface(mapping, paramvalue)
  if paramvalue ~= "" then
    -- Convert path to key; this is always the UCI/UBUS interface name, like wan, lan, ...
    if match(mapping.objectType.name, "^Device") then --device2
      paramvalue = tokey(paramvalue, "Device.IP.Interface.{i}.")
    else
      local value = tokey(paramvalue,
        "InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.IPInterface.{i}.",
        "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.",
        "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.")
      -- Update the interface name from WANDevice.WANConnectionDevice.WANIP/WANPPP key
      if value then
        local ifname
        paramvalue, ifname = nwcommon.split_key(value)
        if paramvalue then
          if paramvalue == "ACTIVE" then
            paramvalue = ifname
          end
        else
          paramvalue = value
        end
      else
        return nil, "Invalid value"
      end
    end
    if not paramvalue then
      return nil, "Invalid value"
    end
  end
  setUciValue(mapping, "Interface", paramvalue)
  return true
end

Multi_UDPEchoConfig_.set = {
  Enable = function (mapping, paramname, paramvalue)
    setUciValue(mapping, paramname, paramvalue)
  end,
  Interface = function (mapping, paramname, paramvalue)
    local res, errmsg = setInterface(mapping, paramvalue)
    if not res then
      return nil, errmsg
    end
  end,
  SourceIPAddress = function (mapping, paramname, paramvalue)
    local rc, err = inet.isValidIPv4(paramvalue)
    if not rc then
      return nil, err
    end
    setUciValue(mapping, paramname, paramvalue)
  end,
  UDPPort = function (mapping, paramname, paramvalue)
    setUciValue(mapping, paramname, paramvalue)
  end,
  EchoPlusEnabled = function (mapping, paramname, paramvalue)
    setUciValue(mapping, paramname, paramvalue)
  end
}

Multi_UDPEchoConfig_.commit = function()
  if configChanged then
    uciHelper.commit(udpechoconfigBinding)
    configChanged = false
  end
end

Multi_UDPEchoConfig_.revert = function()
  if configChanged then
    uciHelper.revert(udpechoconfigBinding)
    configChanged = false
  end
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_UDPEchoConfig_, "#ROOT", {"InternetGatewayDevice", "Device.IP.Diagnostics"})
for _, dupli in ipairs(duplicates) do
  if dupli.objectType.name:match("^Device") then
    dupli.section = "device2"
  else
    dupli.section = "igd"
  end
  register(dupli)
end
