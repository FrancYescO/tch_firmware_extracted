local Multi_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.L2TP.PPPConnection.{i}.",
        access = "readOnly",
        minEntries = 0,
        maxEntries = math.huge,
        numEntriesParameter = "PPPConnectionNumberOfEntries",
        parameters = {
            -- Diagnostic parameters
            ConnectionStatus = {
                access = "readOnly",
                type = "string",
                max = "32",
            },
            PPPoESessionID = {
                access = "readOnly",
                type = "unsignedInt",
            },
            Name = {
                access = "readOnly",
                type = "string",
                max = "256",
            },
            Uptime = {
                access = "readOnly",
                type = "unsignedInt",
            },
            LastConnectionError = {
                access = "readOnly",
                type = "string",
                max = "64",
            },
            AutoDisconnectTime = {
                access = "readOnly",
                type = "unsignedInt",
                default = " ",
            },
            IdleDiscconnectTime = {
                access = "readOnly",
                type = "unsignedInt",
            },
            Username = {
                access = "readOnly",
                type = "string",
                max = "64",
            },
            Password = {
                access = "readOnly",
                type = "string",
                max = "64",
            },
            ExternalIPAddress = {
                access = "readOnly",
                type = "string",
                max = "45",
            },
            RemoteIPAddress = {
                access = "readOnly",
                type = "string",
                max = "45",
            },
            MACAddress = {
                access = "readOnly",
                type = "string",
                max = "17",
            },
            PPPoEACName = {
                access = "readOnly",
                type = "string",
                max = "256",
            },
            PPPoEServiceName = {
                access = "readOnly",
                type = "string",
                max = "256",
            },
            PPPLCPEcho = {
                access = "readOnly",
                type = "unsignedInt",
            },
            PPPLCPEchoRetry = {
                access = "readOnly",
                type = "unsignedInt",
            },
            -- End of Diagnostic parameters
        }
    }
}

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_.entries = function(mapping, parentkey)
    local entries = {}
    entries[#entries + 1] = "FON_Telstra_L2TP"
    return entries
end

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_.getall = function(mapping, key)
    local res = {
        ConnectionStatus = "",
        PPPoESessionID = "",
        Name = "",
        Uptime = "",
        LastConnectionError = "",
        AutoDisconnectTime = "",
        IdleDiscconnectTime = "",
        Username = "",
        Password = "",
        ExternalIPAddress = "",
        RemoteIPAddress = "",
        MACAddress = "",
        PPPoEACName = "",
        PPPoEServiceName = "",
        PPPLCPEcho = "",
        PPPLCPEchoRetry = "",
    }
    return res

end

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_.get = {
    ConnectionStatus = function(mapping, param, key)
        return ""
    end,
    PPPoESessionID = function(mapping, param, key)
        return ""
    end,
    Name = function(mapping, param, key)
        return ""
    end,
    Uptime = function(mapping, param, key)
        return ""
    end,
    LastConnectionError = function(mapping, param, key)
        return ""
    end,
    AutoDisconnectTime = function(mapping, param, key)
        return ""
    end,
    IdleDiscconnectTime = function(mapping, param, key)
        return ""
    end,
    Username = function(mapping, param, key)
        return ""
    end,
    Password = function(mapping, param, key)
        return ""
    end,
    ExternalIPAddress = function(mapping, param, key)
        return ""
    end,
    RemoteIPAddress = function(mapping, param, key)
        return ""
    end,
    MACAddress = function(mapping, param, key)
        return ""
    end,
    PPPoEACName = function(mapping, param, key)
        return ""
    end,
    PPPoEServiceName = function(mapping, param, key)
        return ""
    end,
    PPPLCPEcho = function(mapping, param, key)
        return ""
    end,
    PPPLCPEchoRetry = function(mapping, param, key)
        return ""
    end,
}

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end

local Multi_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_Stats_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.L2TP.PPPConnection.{i}.Stats.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            -- Diagnostic parameters
            EthernetBytesSent = {
                access = "readOnly",
                type = "unsignedInt",
            },
            EthernetBytesReceived = {
                access = "readOnly",
                type = "unsignedInt",
            },
            EthernetPacketsSent = {
                access = "readOnly",
                type = "unsignedInt",
            },
            EthernetPacketsRecieved = {
                access = "readOnly",
                type = "unsignedInt",
            },
            EthernetErrorsSent = {
                access = "readOnly",
                type = "unsignedInt",
            },
            EthernetErrorsReceived = {
                access = "readOnly",
                type = "unsignedInt",
            },
            -- End of Diagnostic parameters
        }
    }
}

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_Stats_.getall = function(mapping, key)
    local res= {}
    res["EthernetBytesSent"] = ""
    res["EthernetBytesReceived"] = ""
    res["EthernetPacketsSent"] = ""
    res["EthernetPacketsRecieved"] = ""
    res["EthernetErrorsSent"] = ""
    res["EthernetErrorsReceived"] = ""
    return res
end

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_Stats_.get = {
    EthernetBytesSent = function(mapping, param, key)
        return ""
    end,
    EthernetBytesReceived = function(mapping, param, key)
        return ""
    end,
    EthernetPacketsSent = function(mapping, param, key)
        return ""
    end,
    EthernetPacketsRecieved = function(mapping, param, key)
        return ""
    end,
    EthernetErrorsSent = function(mapping, param, key)
        return ""
    end,
    EthernetErrorsReceived = function(mapping, param, key)
        return ""
    end,
}

duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_Stats_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
