local Multi_Services_X_TELSTRA_IWIFI_i_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.",
        access = "readOnly",
        minEntries = 0,
        maxEntries = math.huge,
        numEntriesParameter = "XTelstraIWiFiNumberOfEntries",
        parameters = {
            -- Configuration paramters
            Enable = {
                access = "readWrite",
                type = "boolean",
                default = "0",
            },
            BandwidthEgress = {
                access = "readWrite",
                type = "unsignedInt",
                default = "0",
            },
            BandwidthIngress = {
                access = "readWrite",
                type = "unsignedInt",
                default = "0",
            },
            BandwidthThreshold = {
                access = "readWrite",
                type = "unsignedInt",
                default = "2000",
            },
            BandwidthHysteresis = {
                access = "readWrite",
                type = "unsignedInt",
                default = "500",
            },
            DHCPLeaseTime = {
                access = "readWrite",
                type = "unsignedInt",
                default = "600",
            },
            IdleTimeout = {
                access = "readWrite",
                type = "unsignedInt",
                default = "600",
            },
            StaticWhitelist = {
                access = "readWrite",
                type = "string",
                max = "2048",
            },
            DynamicWhitelist = {
                access = "readWrite",
                type = "string",
                max = "2048",
            },
            VenueClass = {
                access = "readWrite",
                type = "unsignedInt",
                default = "0",
            },
            LocationName = {
              access = "readWrite",
              type = "string",
              max = "64",
            },
            -- ProfileNumberOfEntries
            -- End of Configuration paramters
            -- Diagnostic parameters
            Status = {
                access = "readOnly",
                type = "string",
                max = "32",
                default = "Disabled",
            },
            ExtendedStatus = {
                access = "readOnly",
                type = "string",
                max = "1024",
            },
            -- End of Diagnostic parameters
        }
    }
}

Multi_Services_X_TELSTRA_IWIFI_i_.entries = function(mapping, parentkey)
    local entries = {}
    entries[#entries + 1] = "FON_Telstra"
    return entries
end

Multi_Services_X_TELSTRA_IWIFI_i_.getall = function(mapping, key)
    local data = {
        Enable = "0",
        BandwidthEgress = "0",
        BandwidthIngress = "0",
        BandwidthThreshold = "2000",
        BandwidthHysteresis = "500",
        DHCPLeaseTime = "600",
        IdleTimeout = "600",
        StaticWhitelist = "",
        DynamicWhitelist = "",
        VenueClass = "0",
        Status = "Disabled",
        ExtendedStatus = "",
        LocationName = "",
    }
    return data
end

Multi_Services_X_TELSTRA_IWIFI_i_.get = {
    Enable = function(mapping, param, key)
        return "0"
    end,
    BandwidthEgress = function(mapping, param, key)
        return "0"
    end,
    BandwidthIngress = function(mapping, param, key)
        return "0"
    end,
    BandwidthThreshold = function(mapping, param, key)
        return "2000"
    end,
    BandwidthHysteresis = function(mapping, param, key)
        return "500"
    end,
    DHCPLeaseTime = function(mapping, param, key)
        return "600"
    end,
    IdleTimeout = function(mapping, param, key)
        return "600"
    end,
    StaticWhitelist = function(mapping, param, key)
        return ""
    end,
    DynamicWhitelist = function(mapping, param, key)
        return ""
    end,
    VenueClass = function(mapping, param, key)
        return "0"
    end,
    LocationName = function(mapping, param, key)
        return ""
    end,
    Status = function(mapping, param, key)
        return "Disabled"
    end,
    ExtendedStatus = function(mapping, param, key)
        return ""
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_.set = {
    Enable = function(mapping, param, value, key)
    end,
    BandwidthEgress = function(mapping, param, value, key)
    end,
    BandwidthIngress = function(mapping, param, value, key)
    end,
    BandwidthThreshold = function(mapping, param, value, key)
    end,
    BandwidthHysteresis = function(mapping, param, value, key)
    end,
    DHCPLeaseTime = function(mapping, param, value, key)
    end,
    IdleTimeout = function(mapping, param, value, key)
    end,
    StaticWhitelist = function(mapping, param, value, key)
    end,
    DynamicWhitelist = function(mapping, param, value, key)
    end,
    VenueClass = function(mapping, param, value, key)
    end,
    LocationName = function(mapping, param, value, key)
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_.commit = function()
end

Multi_Services_X_TELSTRA_IWIFI_i_.revert = function()
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
