local mapper = mapper
local uci = require("uci")

local obj = {
	objectType = {
		name = "#ROOT.",
		access = "readOnly",
		minEntries = 1,
		maxEntries = 1,
		parameters = {
			RoamingEnabled = {
				access = "readWrite",
				type = "boolean",
				default = "false"
			},
			RoamingStatus = {
				access = "readOnly",
				type = "string",
				enumeration = {
					"Home",
					"Roaming"
				}
			}
		}
	}
}

local helper = require("mobiled.scripthelpers")
local uci_helper = mapper("ucihelper")
local conn = mapper("ubus").connect()
if not conn then
	return
end

local function getFromMobiledDevice(key, param)
	local c = uci.cursor()
	local data
	c:foreach("mobiled", "device", function(s) 
		if s.imei == key then
			local binding={sectionname=s[".name"],config="mobiled",option=param,default=""}
			data = uci_helper.get_from_uci(binding)
			return false
		end
	end)
	return data or ""
end

local function setOnMobiledDevice(key, param, val)
	local c = uci.cursor()
	c:foreach("mobiled", "device", function(s) 
		if s.imei == key then
			local binding={sectionname=s[".name"],config="mobiled",option=param,default=""}
			uci_helper.set_on_uci(binding, val, commitapply)
			uci_helper.commit(binding)
			return false
		end
	end)
end

local function getall(mapping, key)
	local data = {}
	setmetatable(data, { __index = function() return "" end })

	local roaming = getFromMobiledDevice(key, 'roaming')
	if not roaming or roaming == '' then
		roaming = '1'
	end

	data.RoamingEnabled = roaming
	local info = helper.getUbusData(conn, "mobiled.network", "serving_system", {})
	if info.roaming_state == "roaming" then
		data.RoamingStatus = "Roaming"
	elseif info.roaming_state == "home" then
		data.RoamingStatus = "Home"
	end
	return data
end

local function get(mapping, paramName, key)
	return getall(mapping, key)[paramName]
end

local set = {
	RoamingEnabled = function(mapping, paramname, paramvalue, key)
		setOnMobiledDevice(key, "roaming", paramvalue)
	end
}

obj.getall = getall
obj.get = get
obj.set = set

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(obj, "#ROOT", {"InternetGatewayDevice.X_000E50_Cellular", "Device.Cellular"})
for _, dupli in ipairs(duplicates) do
	register(dupli)
end

