local Multi_Services_X_TELSTRA_IWIFI_i_L2TP_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.L2TP.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            -- Configuration paramters
            Enabled = {
                access = "readOnly",
                type = "boolean",
                default = "0",
            },
            ByPass = {
                access = "readOnly",
                type = "boolean",
                default = "0",
            },
            Server = {
                access = "readWrite",
                type = "string",
                max = "1024",
            },
            StartMaxRetry = {
                access = "readWrite",
                type = "unsignedInt",
                default = "3",
            },
            MaxRetry = {
                access = "readWrite",
                type = "unsignedInt",
                default = "3",
            },
            StartRtxDelay = {
                access = "readWrite",
                type = "unsignedInt",
                default = "1",
            },
            RtxDelay = {
                access = "readWrite",
                type = "unsignedInt",
                default = "30",
            },
            HelloDelay = {
                access = "readWrite",
                type = "unsignedInt",
                default = "30",
            },
            MaxAuthUsers = {
                access = "readWrite",
                type = "unsignedInt",
                default = "3",
            },
            MaxPreAuthUsers = {
                access = "readWrite",
                type = "unsignedInt",
                default = "6",
            },
            PPPTimeout = {
                access = "readWrite",
                type = "unsignedInt",
                default = "15",
            },
            PPPLCPEchoInterval = {
                access = "readWrite",
                type = "unsignedInt",
                default = "600",
            },
            PPPLCPEchoFailure = {
                access = "readWrite",
                type = "unsignedInt",
                default = "2",
            },
            -- End of Configuration paramters
            -- Diagnostic parameters
            Status = {
                access = "readOnly",
                type = "string",
                max = "32",
            },
            PPPConnectionTotal = {
                access = "readOnly",
                type = "unsignedInt",
                default = "0",
            },
            PPPConnectionAuth = {
                access = "readOnly",
                type = "unsignedInt",
                default = "0",
            },
            PPPConnectionPreAuth = {
                access = "readOnly",
                type = "unsignedInt",
                default = "0",
            },
            -- PPPConnectionNumberOfEntries
            -- End of Diagnostic parameters
        }
    }
}

local function getPPPConnectionNumber()
    local i = 0
    local fd = io.open("/proc/net/pppol2tp", "r")
    if not fd then
        return i
    end
    while(true) do
        local line = fd:read("*l")
        if not line then
            break
        end
        local interface = string.match(line, "interface%s(.*)")
        if interface and interface ~= "(null)" then
            i = i+1
        end
    end
    fd:close()
    return i
end



Multi_Services_X_TELSTRA_IWIFI_i_L2TP_.getall = function(mapping, key)
    local data = {
        Enabled = "0",
        ByPass = "0",
        Server = "",
        StartMaxRetry = "3",
        MaxRetry = "3",
        StartRtxDelay = "1",
        RtxDelay = "30",
        HelloDelay = "30",
        MaxAuthUsers = "2",
        MaxPreAuthUsers = "4",
        PPPTimeout = "15",
        PPPLCPEchoInterval = "600",
        PPPLCPEchoFailure = "2",
        Status = "",
        PPPConnectionTotal = "", -- "0",
        PPPConnectionAuth = "", -- "0",
        PPPConnectionPreAuth = "", -- "0",
    }

    return data
end

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_.get = {
    Enabled = function(mapping, param, key)
        return "0"
    end,
    ByPass = function(mapping, param, key)
        return "0"
    end,
    Server = function(mapping, param, key)
        return ""
    end,
    MaxRetry = function(mapping, param, key)
        return "5"
    end,
    StartMaxRetry = function(mapping, param, key)
        return "5"
    end,
    StartRtxDelay = function(mapping, param, key)
        return "1"
    end,
    RtxDelay = function(mapping, param, key)
        return "1"
    end,
    HelloDelay = function(mapping, param, key)
        return "1"
    end,
    MaxAuthUsers = function(mapping, param, key)
        return "3"
    end,
    MaxPreAuthUsers = function(mapping, param, key)
        return "6"
    end,
    PPPTimeout = function(mapping, param, key)
        return "15"
    end,
    PPPLCPEchoInterval = function(mapping, param, key)
        return "600"
    end,
    PPPLCPEchoFailure = function(mapping, param, key)
        return "2"
    end,
    Status = function(mapping, param, key)
        return ""
    end,
    PPPConnectionTotal = function(mapping, param, key)
        return ""
    end,
    PPPConnectionAuth = function(mapping, param, key)
        return ""
    end,
    PPPConnectionPreAuth = function(mapping, param, key)
        return ""
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_.set = {
    Server = function(mapping, param, value, key)
    end,
    MaxRetry = function(mapping, param, value, key)
    end,
    StartMaxRetry = function(mapping, param, value, key)
    end,
    StartRtxDelay = function(mapping, param, value, key)
    end,
    RtxDelay = function(mapping, param, value, key)
    end,
    HelloDelay = function(mapping, param, value, key)
    end,
    MaxAuthUsers = function(mapping, param, value, key)
    end,
    MaxPreAuthUsers = function(mapping, param, value, key)
    end,
    PPPTimeout = function(mapping, param, value, key)
    end,
    PPPLCPEchoInterval = function(mapping, param, value, key)
    end,
    PPPLCPEchoFailure = function(mapping, param, value, key)
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_.commit = function()
end

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_.revert = function()
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_L2TP_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
