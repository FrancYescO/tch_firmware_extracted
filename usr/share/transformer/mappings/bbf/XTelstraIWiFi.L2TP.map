local uci_helper = mapper("ucihelper")
local transactions = {}
local binding = { config = "hotspotd" }
local cvtBoolean = setmetatable({
    ["true"] = "1",
    ["false"] = "0",
}, { __index = function() return "0" end })

local Multi_Services_X_TELSTRA_IWIFI_i_L2TP_ = {
    objectType = {
        name = "#ROOT.Services.X_TELSTRA_IWIFI.{i}.L2TP.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            -- Configuration paramters
            Enabled = {
                access = "readOnly",
                type = "boolean",
                default = "0",
            },
            ByPass = {
                access = "readOnly",
                type = "boolean",
                default = "0",
            },
            Server = {
                access = "readWrite",
                type = "string",
                max = "1024",
            },
            StartMaxRetry = {
                access = "readWrite",
                type = "unsignedInt",
                default = "3",
            },
            MaxRetry = {
                access = "readWrite",
                type = "unsignedInt",
                default = "3",
            },
            StartRtxDelay = {
                access = "readWrite",
                type = "unsignedInt",
                default = "1",
            },
            RtxDelay = {
                access = "readWrite",
                type = "unsignedInt",
                default = "30",
            },
            HelloDelay = {
                access = "readWrite",
                type = "unsignedInt",
                default = "30",
            },
            MaxAuthUsers = {
                access = "readWrite",
                type = "unsignedInt",
                default = "3",
            },
            MaxPreAuthUsers = {
                access = "readWrite",
                type = "unsignedInt",
                default = "6",
            },
            PPPTimeout = {
                access = "readWrite",
                type = "unsignedInt",
                default = "15",
            },
            PPPLCPEchoInterval = {
                access = "readWrite",
                type = "unsignedInt",
                default = "600",
            },
            PPPLCPEchoFailure = {
                access = "readWrite",
                type = "unsignedInt",
                default = "2",
            },
            -- End of Configuration paramters
            -- Diagnostic parameters
            Status = {
                access = "readOnly",
                type = "string",
                max = "32",
            },
            PPPConnectionTotal = {
                access = "readOnly",
                type = "unsignedInt",
                default = "0",
            },
            PPPConnectionAuth = {
                access = "readOnly",
                type = "unsignedInt",
                default = "0",
            },
            PPPConnectionPreAuth = {
                access = "readOnly",
                type = "unsignedInt",
                default = "0",
            },
            -- PPPConnectionNumberOfEntries
            -- End of Diagnostic parameters
        }
    }
}

local function getPPPConnectionNumber()
    local i = 0
    local fd = io.open("/proc/net/pppol2tp", "r")
    if not fd then
        return i
    end
    while(true) do
        local line = fd:read("*l")
        if not line then
            break
        end
        local interface = string.match(line, "interface%s(.*)")
        if interface and interface ~= "(null)" then
            i = i+1
        end
    end
    fd:close()
    return i
end



Multi_Services_X_TELSTRA_IWIFI_i_L2TP_.getall = function(mapping, key)
    local data = {
        Enabled = "0",
        ByPass = "0",
        Server = "",
        StartMaxRetry = "3",
        MaxRetry = "3",
        StartRtxDelay = "1",
        RtxDelay = "30",
        HelloDelay = "30",
        MaxAuthUsers = "2",
        MaxPreAuthUsers = "4",
        PPPTimeout = "15",
        PPPLCPEchoInterval = "600",
        PPPLCPEchoFailure = "2",
        Status = "",
        PPPConnectionTotal = "", -- "0",
        PPPConnectionAuth = "", -- "0",
        PPPConnectionPreAuth = "", -- "0",
    }

    binding.sectionname = "tunnel"
    local v = uci_helper.getall_from_uci(binding)
    data.Enabled = v.enabled and cvtBoolean[v.enabled]
    data.ByPass = v.fallback and cvtBoolean[v.fallback]
    data.Server = v.server and type(v.server) == "table" and table.concat(v.server, ",") or data.Server
    data.MaxRetry = v.l2tp_max_retry and string.match(v.l2tp_max_retry, "%d+") and v.l2tp_max_retry or data.MaxRetry
    data.StartMaxRetry = v.l2tp_start_max_retry and string.match(v.l2tp_start_max_retry, "%d+") and v.l2tp_start_max_retry or data.StartMaxRetry
    data.StartRtxDelay = v.l2tp_start_rtx_delay and string.match(v.l2tp_start_rtx_delay, "%d+") and v.l2tp_start_rtx_delay or data.StartRtxDelay
    data.RtxDelay = v.l2tp_rtx_delay and string.match(v.l2tp_rtx_delay, "%d+") and v.l2tp_rtx_delay or data.RtxDelay
    data.HelloDelay = v.l2tp_hello_delay and string.match(v.l2tp_hello_delay, "%d+") and v.l2tp_hello_delay or data.HelloDelay
    data.PPPTimeout = v.pppd_timeout and string.match(v.pppd_timeout, "%d+") and v.pppd_timeout or data.PPPTimeout
    data.PPPLCPEchoInterval = v.lcp_echo_interval and string.match(v.lcp_echo_interval, "%d+") and v.lcp_echo_interval or data.PPPLCPEchoInterval
    data.PPPLCPEchoFailure = v.lcp_echo_failure and string.match(v.lcp_echo_failure, "%d+") and v.lcp_echo_failure or data.PPPLCPEchoFailure

    binding.sectionname = "client"
    binding.option = "preauth_limit"
    v = uci_helper.get_from_uci(binding)
    data.MaxPreAuthUsers = string.match(v, "%d+") and v or data.MaxPreAuthUsers

    binding.sectionname = "client"
    binding.option = "auth_limit"
    v = uci_helper.get_from_uci(binding)
    data.MaxAuthUsers = string.match(v, "%d+") and v or data.MaxAuthUsers

    local ppp_number = getPPPConnectionNumber()
    data.PPPConnectionTotal = tostring(ppp_number)
    data.status = ppp_number>0 and "UP" or "DOWN"

    return data
end

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_.get = {
    Enabled = function(mapping, param, key)
        binding.sectionname = "tunnel"
        binding.option = "enabled"
        return cvtBoolean[uci_helper.get_from_uci(binding)]
    end,
    ByPass = function(mapping, param, key)
        binding.sectionname = "tunnel"
        binding.option = "fallback"
        return cvtBoolean[uci_helper.get_from_uci(binding)]
    end,
    Server = function(mapping, param, key)
        binding.sectionname = "tunnel"
        binding.option = "server"
        local value = uci_helper.get_from_uci(binding)
        if type(value) == "table" then
            return table.concat(value, ",")
        end
        return ""
    end,
    MaxRetry = function(mapping, param, key)
        binding.sectionname = "tunnel"
        binding.option = "l2tp_max_retry"
        local value = uci_helper.get_from_uci(binding)
        if string.match(value, "%d+") then
            return value
        end
        return "5"
    end,
    StartMaxRetry = function(mapping, param, key)
        binding.sectionname = "tunnel"
        binding.option = "l2tp_start_max_retry"
        local value = uci_helper.get_from_uci(binding)
        if string.match(value, "%d+") then
            return value
        end
        return "5"
    end,
    StartRtxDelay = function(mapping, param, key)
        binding.sectionname = "tunnel"
        binding.option = "l2tp_start_rtx_delay"
        local value = uci_helper.get_from_uci(binding)
        if string.match(value, "%d+") then
            return value
        end
        return "1"
    end,
    RtxDelay = function(mapping, param, key)
        binding.sectionname = "tunnel"
        binding.option = "l2tp_rtx_delay"
        local value = uci_helper.get_from_uci(binding)
        if string.match(value, "%d+") then
            return value
        end
        return "1"
    end,
    HelloDelay = function(mapping, param, key)
        binding.sectionname = "tunnel"
        binding.option = "l2tp_hello_delay"
        local value = uci_helper.get_from_uci(binding)
        if string.match(value, "%d+") then
            return value
        end
        return "1"
    end,
    MaxAuthUsers = function(mapping, param, key)
        binding.sectionname = "client"
        binding.option = "auth_limit"
        local value = uci_helper.get_from_uci(binding)
        if string.match(value, "%d+") then
            return value
        end
        return "3"
    end,
    MaxPreAuthUsers = function(mapping, param, key)
        binding.sectionname = "client"
        binding.option = "preauth_limit"
        local value = uci_helper.get_from_uci(binding)
        if string.match(value, "%d+") then
            return value
        end
        return "6"
    end,
    PPPTimeout = function(mapping, param, key)
        binding.sectionname = "tunnel"
        binding.option = "pppd_timeout"
        local value = uci_helper.get_from_uci(binding)
        if string.match(value, "%d+") then
            return value
        end
        return "15"
    end,
    PPPLCPEchoInterval = function(mapping, param, key)
        binding.sectionname = "tunnel"
        binding.option = "lcp_echo_interval"
        local value = uci_helper.get_from_uci(binding)
        if string.match(value, "%d+") then
            return value
        end
        return "600"
    end,
    PPPLCPEchoFailure = function(mapping, param, key)
        binding.sectionname = "tunnel"
        binding.option = "lcp_echo_failure"
        local value = uci_helper.get_from_uci(binding)
        if string.match(value, "%d+") then
            return value
        end
        return "2"
    end,
    Status = function(mapping, param, key)
        local pppnumbers = getPPPConnectionNumber()
        return pppnumbers>0 and "UP" or "DOWN"
    end,
    PPPConnectionTotal = function(mapping, param, key)
        return tostring(getPPPConnectionNumber())
    end,
    PPPConnectionAuth = function(mapping, param, key)
        -- Avaliable on Sprint36
        -- return "0"
        return ""
    end,
    PPPConnectionPreAuth = function(mapping, param, key)
        -- Avaliable on Sprint36
        -- return "0"
        return ""
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_.set = {
    Server = function(mapping, param, value, key)
        binding.sectionname = "tunnel"
        binding.option = "server"
        local tvalue = {}
        for v in string.gmatch(value, "[^,%s]+") do
            if string.find(v, "%.") then
                tvalue[#tvalue + 1] = v
            end
        end
        if #tvalue > 0 then
            uci_helper.set_on_uci(binding, tvalue, commitapply)
            transactions[binding.config] = true
        else
            return nil, "The parmeter value is illegal."
        end
    end,
    MaxRetry = function(mapping, param, value, key)
        binding.sectionname = "tunnel"
        binding.option = "l2tp_max_retry"
        uci_helper.set_on_uci(binding, value, commitapply)
        transactions[binding.config] = true
    end,
    StartMaxRetry = function(mapping, param, value, key)
        binding.sectionname = "tunnel"
        binding.option = "l2tp_start_max_retry"
        uci_helper.set_on_uci(binding, value, commitapply)
        transactions[binding.config] = true
    end,
    StartRtxDelay = function(mapping, param, value, key)
        binding.sectionname = "tunnel"
        binding.option = "l2tp_start_rtx_delay"
        uci_helper.set_on_uci(binding, value, commitapply)
        transactions[binding.config] = true
    end,
    RtxDelay = function(mapping, param, value, key)
        binding.sectionname = "tunnel"
        binding.option = "l2tp_rtx_delay"
        uci_helper.set_on_uci(binding, value, commitapply)
        transactions[binding.config] = true
    end,
    HelloDelay = function(mapping, param, value, key)
        binding.sectionname = "tunnel"
        binding.option = "l2tp_hello_delay"
        uci_helper.set_on_uci(binding, value, commitapply)
        transactions[binding.config] = true
    end,
    MaxAuthUsers = function(mapping, param, value, key)
        binding.sectionname = "client"
        binding.option = "auth_limit"
        uci_helper.set_on_uci(binding, value, commitapply)
        transactions[binding.config] = true
    end,
    MaxPreAuthUsers = function(mapping, param, value, key)
        binding.sectionname = "client"
        binding.option = "preauth_limit"
        uci_helper.set_on_uci(binding, value, commitapply)
        transactions[binding.config] = true
    end,
    PPPTimeout = function(mapping, param, value, key)
        binding.sectionname = "tunnel"
        binding.option = "pppd_timeout"
        uci_helper.set_on_uci(binding, value, commitapply)
        transactions[binding.config] = true
    end,
    PPPLCPEchoInterval = function(mapping, param, value, key)
        binding.sectionname = "tunnel"
        binding.option = "lcp_echo_interval"
        uci_helper.set_on_uci(binding, value, commitapply)
        transactions[binding.config] = true
    end,
    PPPLCPEchoFailure = function(mapping, param, value, key)
        binding.sectionname = "tunnel"
        binding.option = "lcp_echo_failure"
        uci_helper.set_on_uci(binding, value, commitapply)
        transactions[binding.config] = true
    end,
}

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_.commit = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.commit(binding)
    end
    transactions = {}
end

Multi_Services_X_TELSTRA_IWIFI_i_L2TP_.revert = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.revert(binding)
    end
    transactions = {}
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Services_X_TELSTRA_IWIFI_i_L2TP_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
