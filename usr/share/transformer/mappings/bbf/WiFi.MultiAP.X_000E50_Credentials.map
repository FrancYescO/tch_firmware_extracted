-- Manually generated

local Multi_MultiAP_X_000E50_Credentials_i_ = {
  objectType = {
    name = "#ROOT.MultiAP.X_000E50_Credentials.{i}.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    description = "This object contains the credentials and configuration to be applied by the Easymesh Controller.",
    parameters = {
      AdminState = {
        access = "readWrite",
        type = "boolean",
        description = "Indicates if the credential config is enabled or not."
      },
      SSID = {
        access = "readWrite",
        type = "string",
        description = "The SSID that is configured on the Easymesh Agent BSSID (32 byte UTF-8)"
      },
      PassphraseOrKey = {
        access = "readWrite",
        type = "string",
        hidden = "true",
        max = 64,
        description = "The PSK (64 hex char) or PSK passphrase (<64 characters) that is configured on the EasyMesh Agent BSSID.",
      },
      SecurityMode = {
        access = "readWrite",
        type = "string",
        description = "Security mode that is configured on the Easymesh Agent BSSID.",
        enumeration = {
           "None",
           "WPA2-Personal",
           "WPA-WPA2-Personal",
           "WPA3-Personal",
           "WPA3-Personal-Transition",
        }
      },
      Fronthaul = {
        access = "readWrite",
        type = "boolean",
        description = "Indicates if this corresponds to FH credentials."
      },
      Backhaul = {
        access = "readWrite",
        type = "boolean",
        description = "Indicates if this corresponds to BH credentials."
      },
      FrequencyBands = {
        access = "readWrite",
        type = "string",
        description = "Indicates the frequency bands to which the credential is applicable.",
	enumeration = {
         "2.4GHz",
         "2.4GHz,5GHzLow",
         "5GHzLow,2.4GHz",
         "2.4GHz,5GHzHigh",
         "5GHzHigh,2.4GHz",
         "2.4GHz,5GHzHigh,5GHzLow",
         "2.4GHz,5GHzLow,5GHzHigh",
         "5GHzLow,5GHzHigh,2.4GHz",
         "5GHzHigh,2.4GHz,5GHzLow",
         "5GHzLow,2.4GHz,5GHzHigh",
         "5GHzHigh,5GHzLow,2.4GHz",
         "5GHzHigh,5GHzLow",
         "5GHzLow,5GHzHigh",
         "5GHzLow",
         "5GHzHigh"
        }
      }
    }
  }
}

local uciHelper = mapper("ucihelper")
local forEachOnUci = uciHelper.foreach_on_uci
local setOnUci = uciHelper.set_on_uci
local multiAPBinding = { config = "multiap" }
local configChanged = false
local uciSupportedMode = {}
local uciSupportedFreq = {}
local wirelessBinding = { config = "wireless" }

local supportedModesMap = {
  ["None"]              = "none",
  ["WPA2-Personal"]     = "wpa2-psk",
  ["WPA-WPA2-Personal"] = "wpa-wpa2-psk",
  ["WPA3-Personal"]     = "wpa3-psk",
  ["WPA3-Personal-Transition"] = "wpa2-wpa3-psk"
}

local frequencyband = {
  ["2.4GHz"]   =  "radio_2G",
  ["2.4GHz,5GHzLow"] = "radio_2G,radio_5Gl",
  ["5GHzLow,2.4GHz"] = "radio_5Gl,radio_2G",
  ["2.4GHz,5GHzHigh"] = "radio_2G,radio_5Gu",
  ["5GHzHigh,2.4GHz"] = "radio_5Gu,radio_2G",
  ["2.4GHz,5GHzHigh,5GHzLow"] = "radio_2G,radio_5Gu,radio_5Gl",
  ["2.4GHz,5GHzLow,5GHzHigh"] = "radio_2G,radio_5Gl,radio_5Gu",
  ["5GHzLow,5GHzHigh,2.4GHz"] = "radio_5Gl,radio_5Gu,radio_2G",
  ["5GHzHigh,2.4GHz,5GHzLow"] = "radio_5Gu,radio_2G,radio_5Gl",
  ["5GHzLow,2.4GHz,5GHzHigh"] = "radio_5Gl,radio_2G,radio_5Gu",
  ["5GHzHigh,5GHzLow,2.4GHz"] = "radio_5Gu,radio_5Gl,radio_2G",
  ["5GHzHigh,5GHzLow"] = "radio_5Gu,radio_5Gl",
  ["5GHzLow,5GHzHigh"] = "radio_5Gl,radio_5Gu",
  ["5GHzLow"] = "radio_5Gl",
  ["5GHzHigh"] = "radio_5Gu"
}

for key, mode in pairs(supportedModesMap) do
  uciSupportedMode[mode] = key
end

for key, freq in pairs(frequencyband) do
  uciSupportedFreq[freq] = key
end

local function getUciValue(key, option)
  multiAPBinding.sectionname = key
  multiAPBinding.option = option
  return uciHelper.get_from_uci(multiAPBinding)
end

local function setUciValue(key, option, value)
  multiAPBinding.sectionname = key
  multiAPBinding.option = option
  setOnUci(multiAPBinding, value, commitapply)
  configChanged = true
end

local paramNameToOption = {
  AdminState = "state",
  SSID = "ssid",
  PassphraseOrKey = "wpa_psk_key",
  SecurityMode = "security_mode",
  Fronthaul = "fronthaul",
  Backhaul = "backhaul",
  FrequencyBands = "frequency_bands"
}

Multi_MultiAP_X_000E50_Credentials_i_.get = function(mapping, param, key)
  if paramNameToOption[param] then
    if param == "SecurityMode" then
      return uciSupportedMode[getUciValue(key, paramNameToOption[param])] or ""
    elseif param == "FrequencyBands" then
      return uciSupportedFreq[getUciValue(key, paramNameToOption[param])] or ""
    end
    return getUciValue(key, paramNameToOption[param]) or ""
  end
end

Multi_MultiAP_X_000E50_Credentials_i_.set = function(mapping, param, value, key)
  if paramNameToOption[param] then
    if param == "SecurityMode" then
      local securitymode = value
      local flag = false
      local wirelessAP, radiotype, supportedModes
      radiotype = key == "cred0" and "radio_2G" or key == "cred1" and "radio_5G"
      value = supportedModesMap[value]
      if radiotype or key == "cred2" then
        wirelessBinding.sectionname = "wifi-iface"
        forEachOnUci(wirelessBinding, function(s)
          if (s.device == radiotype and (s.fronthaul and s.fronthaul == "1" or "")) or s.backhaul == "1" then
            wirelessAP = s[".name"]
            return true
          end
        end)
      end
      if wirelessAP then
        wirelessBinding.sectionname = "wifi-ap"
        forEachOnUci(wirelessBinding, function(s)
           if s.iface == wirelessAP then
             supportedModes = s.supported_security_modes
             return true
           end
        end)
        if supportedModes then
          for mode in string.gmatch(supportedModes, "%S+") do
            if mode == value then
              flag = true
              break
            end
          end
          if not flag then
            return nil, string.format("%s Mode is not supported in wireless", securitymode)
          end
        end
      end
    elseif param == "FrequencyBands" then
       value = frequencyband[value]
    end
    setUciValue(key, paramNameToOption[param], value)
  end
end

Multi_MultiAP_X_000E50_Credentials_i_.entries = function()
  local entries = {}
  multiAPBinding.sectionname = "controller_credentials"
  forEachOnUci(multiAPBinding, function(s)
    entries[#entries + 1]  = s[".name"]
  end)
  return entries
end

Multi_MultiAP_X_000E50_Credentials_i_.commit = function()
  if configChanged then
    uciHelper.commit(multiAPBinding)
    configChanged = false
  end
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_MultiAP_X_000E50_Credentials_i_, "#ROOT", { "Device.WiFi", "rpc.X_000E50_MultiAP", "InternetGatewayDevice.X_000E50_MultiAP" })
for _, dupli in ipairs(duplicates) do
  register(dupli)
end

