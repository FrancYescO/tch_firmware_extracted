local Multi_Services_X_000E50_WiFiAgent_Certificate = {
  objectType = {
    name = "#ROOT_WiFiAgent.Certificate.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "Information about the device certificate issued by the Wi-Fi Doctor cloud",
    parameters = {
      SerialNumber = {
        description = "The serial number of the certificate",
        access = "readOnly",
        type = "string",
        max = "64",
        default = ""
      },
      Issuer = {
        description = "The issuer of the certificate",
        access = "readOnly",
        type = "string",
        max = "256",
        default = ""
      },
      NotBefore = {
        description = "The notBefore date of the certificate",
        access = "readOnly",
        type = "dateTime",
        default = "0001-01-01T00:00:00Z"
      },
      NotAfter = {
        description = "The notAfter date of the certificate",
        access = "readOnly",
        type = "dateTime",
        default = "0001-01-01T00:00:00Z"
      },
      Subject = {
        description = "The subject of the certificate",
        access = "readOnly",
        type = "string",
        max = "256",
        default = ""
      },
      HomeID = {
        description = "The ID of the home/group to which this device belongs",
        access = "readOnly",
        type = "string",
        max = "256",
        default = ""
      },
    }
  }
}

local x509 = require("tch.crypto.x509")
local ucihelper = mapper("ucihelper")
local get_from_uci = ucihelper.get_from_uci
local format, match, byte = string.format, string.match, string.byte
local binding_certpath = { config = "wifi_doctor_agent", sectionname = "config",
                           option = "cert_path", default = "/tmp/certs/" }

local monthToNum = {
    Jan = "01",
    Feb = "02",
    Mar = "03",
    Apr = "04",
    May = "05",
    Jun = "06",
    Jul = "07",
    Aug = "08",
    Sep = "09",
    Oct = "10",
    Nov = "11",
    Dec = "12",
}

local function convertDateTime(str)
  if not str then
    return
  end
  local month, day, time, year = match(str, "(%a%a%a) +(%d%d?) (%d%d:%d%d:%d%d) (%d%d%d%d)")
  if month then
    return format("%s-%s-%02dT%sZ", year, monthToNum[month], tonumber(day), time)
  end
end

local function load_cert()
  local certpath = get_from_uci(binding_certpath)
  if (byte(certpath, -1) ~= 47) then
    certpath = certpath .. "/"
  end
  certpath = certpath .. "chain.pem"
  return x509.new_from_file(certpath)
end

local param2method = {
  SerialNumber = "serialNumber",
  Issuer = "issuer",
  NotBefore = "notBefore",
  NotAfter = "notAfter",
  Subject = "subject",
  HomeID = "subject"
}

local function get_param_from_cert(cert, paramname)
  if not cert then
    return
  end
  local value = cert[param2method[paramname]](cert)
  if paramname == "NotBefore" or paramname == "NotAfter" then
    value = convertDateTime(value)
  elseif paramname == "HomeID" then
    value = value and match(value, ", OU%=(%S+)") or nil
  end
  return value
end

Multi_Services_X_000E50_WiFiAgent_Certificate.get = function(mapping, paramname)
  local cert = load_cert()
  local value = get_param_from_cert(cert, paramname)
  if cert then
    cert:free()
  end
  return value or mapping.objectType.parameters[paramname].default
end

Multi_Services_X_000E50_WiFiAgent_Certificate.getall = function(mapping)
  local cert = load_cert();
  local values = {}
  for paramname, param in pairs(mapping.objectType.parameters) do
    values[paramname] = get_param_from_cert(cert, paramname) or param.default
  end
  if cert then
    cert:free()
  end
  return values
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Services_X_000E50_WiFiAgent_Certificate, "#ROOT",
  { "InternetGatewayDevice.Services.X_000E50", "Device.Services.X_000E50", "Device.Services.X_BELGACOM" })
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
