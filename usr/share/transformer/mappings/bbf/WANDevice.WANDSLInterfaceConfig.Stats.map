-- Automatically generated from InternetGatewayDevice:1.4
-- using generator version 2.1

-- "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats."
-- "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Total."
-- "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Showtime."
-- "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.QuarterHour."
-- "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.CurrentDay."
-- "Device.DSL.Line.{i}.Stats.Total."
-- "Device.DSL.Line.{i}.Stats.Showtime."
-- "Device.DSL.Line.{i}.Stats.QuarterHour."
-- "Device.DSL.Line.{i}.Stats.CurrentDay."
-- "Device.DSL.Channel.{i}.Stats.Total."
-- "Device.DSL.channel.{i}.Stats.Showtime."
-- "Device.DSL.Channel.{i}.Stats.QuarterHour."
-- "Device.DSL.Channel.{i}.Stats.CurrentDay."

local InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = 1,
    parameters = {
    }
  }
}

local Multi_Stats_parameters_ = {
  CRCErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  ErroredSecs = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  SeverelyErroredSecs = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  FECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  ATUCFECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  ATUCCRCErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  XTURFECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  XTUCFECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  XTURHECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  XTUCHECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  XTURCRCErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  XTUCCRCErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  LinkRetrain = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  HECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  ATUCHECErrors = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  InitTimeouts = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  LossOfFraming = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  LInit = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "boolean",
  },
  ATUCErroredSecs = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  ATUCSeverelyErroredSecs = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
  },
  X_FASTWEB_UnavailableSeconds = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
    description = "Count of seconds in Unavailability State during the interval",
  },
  X_000E50_UnavailableSeconds = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
    description = "Count of seconds in Unavailability State during the interval",
  },
  X_FASTWEB_Linit = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
    description = "Incremental number of xDSL line syncronization events",
  },
  X_000E50_Linit = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
    description = "Incremental number of xDSL line syncronization events",
  },
  X_FASTWEB_LastResyncReason = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
    description = "Indicates the last retrained information performed on the line"
  },
  X_000E50_LastResyncReason = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
    description = "Indicates the last retrained information performed on the line"
  },
  X_FASTWEB_ErroredUPErroredSecs = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
    description = "Total number of errored seconds"
  },
  X_FASTWEB_ErroredUPSeverelyErroredSecs = {
    access = "readOnly",
    activeNotify = "canDeny",
    type = "unsignedInt",
    description = "Total number of severely errored seconds"
  },
}

local ipairs = ipairs
local register = register

local Multi_Stats_Total_ = {
  objectType = {
    name = "#ROOT.Stats.Total.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = Multi_Stats_parameters_ ,
  }
}

local Multi_Stats_Showtime_ = {
  objectType = {
    name = "#ROOT.Stats.Showtime.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = Multi_Stats_parameters_ ,
  }
}

local Multi_Stats_QuarterHour_ = {
  objectType = {
    name = "#ROOT.Stats.QuarterHour.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = Multi_Stats_parameters_ ,
  }
}

local Multi_Stats_CurrentDay_ = {
  objectType = {
    name = "#ROOT.Stats.CurrentDay.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = Multi_Stats_parameters_ ,
  }
}

local Multi_Stats_LastShowtime_ = {
  objectType = {
    name = "#ROOT.Stats.LastShowtime.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = Multi_Stats_parameters_ ,
  }
}
----------------------------------------------------------
-- Local definitions
----------------------------------------------------------

local xdslctl = require("transformer.shared.xdslctl")
local wandevice = require 'transformer.shared.models.igd.wandevice'
local getDevtypeAndName = wandevice.getDevtypeAndName

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_.entries = function(mapping, parentKey)
  if mapping.objectType.name:match("^InternetGatewayDevice%.") then
    -- in IGD this object is only present it the parent WANDevice is DSL
    local devtype = getDevtypeAndName(parentKey)
    if devtype == "DSL" then
      return {parentKey}
    end
  elseif mapping.objectType.name:match("^Device%.") then
    -- this object is not optional in Device2, but in order to multiroot it
    -- it pretends it is. It is unconditionnally present.
    return {parentKey}
  end
  return {}
end

--parameters needed for Device.DSL.Channel. file
local dev2DSLChannelParams = {
  "XTURFECErrors",
  "XTUCFECErrors",
  "XTURHECErrors",
  "XTUCHECErrors",
  "XTURCRCErrors",
  "XTUCCRCErrors",
}

local igdDSLParams = {
  "CRCErrors",
  "FECErrors",
  "ATUCFECErrors",
  "ATUCCRCErrors",
  "LinkRetrain",
  "HECErrors",
  "ATUCHECErrors",
  "InitTimeouts",
  "ATUCSeverelyErroredSecs",
  "ATUCErroredSecs",
  "LossOfFraming",
  "LInit",
}

--parameters needed for Device.DSL.Line. file
local dev2DSLLineParams = {
  "ErroredSecs",
  "SeverelyErroredSecs",
  "InitTimeouts"
}

--parameters needed for DSL Fastweb-specific
local fastWebParams = {
  "X_FASTWEB_UnavailableSeconds",
  "X_000E50_UnavailableSeconds",
  "X_FASTWEB_Linit",
  "X_000E50_Linit",
  "X_FASTWEB_LastResyncReason",
  "X_000E50_LastResyncReason",
  "X_FASTWEB_ErroredUPErroredSecs",
  "X_FASTWEB_ErroredUPSeverelyErroredSecs"
}

local function xdslctl_stats(key, section, skey, dir,mapping)
  return xdslctl.stats(section, skey, dir)
end

local function get_instance(instance, mapping, param, key)
  if param == "CRCErrors" or param == "XTURCRCErrors" then
      return xdslctl_stats(key, instance, "crc", "ds",mapping)
  elseif param == "ErroredSecs" then
      return xdslctl_stats(key, instance, "es", "ds",mapping)
  elseif param == "SeverelyErroredSecs" then
      return xdslctl_stats(key, instance, "ses", "ds",mapping)
  elseif param == "FECErrors"  or param == "XTURFECErrors" then
      return xdslctl_stats(key, instance, "fec", "ds",mapping)
  elseif param == "ATUCFECErrors" or param == "XTUCFECErrors" then
      return xdslctl_stats(key, instance, "fec", "us",mapping)
  elseif param == "ATUCCRCErrors" or param == "XTUCCRCErrors" then
      return xdslctl_stats(key, instance, "crc", "us",mapping)
  elseif param == "LinkRetrain" then
      local lrCheck = xdslctl_stats(key, instance, "retr", "",mapping)
      return lrCheck ~= "nil"  and lrCheck or "0"
  elseif param == "HECErrors" or param == "XTURHECErrors" then
      return xdslctl_stats(key, instance, "hec", "ds",mapping)
  elseif param == "ATUCHECErrors" or param == "XTUCHECErrors" then
      return xdslctl_stats(key, instance, "hec", "us",mapping)
  elseif param == "InitTimeouts" then
      local itCheck = xdslctl_stats(key, instance, "retr", "",mapping)
      return itCheck ~= "nil" and itCheck or "0"
  elseif param == "LossOfFraming" then
      local lofCheck = xdslctl_stats(key, instance, "lof", "ds",mapping)
      return lofCheck ~= "nil" and lofCheck or "0"
  elseif param == "LInit" then
      local status = tonumber(xdslctl.infoValue("linit", nil, nil, key,mapping) or "0")
      if status == 0 or status > 6 then
        return "0"
      end
      return "1"
  elseif param == "ATUCErroredSecs" then
      return xdslctl_stats(key, instance, "es", "us",mapping)
  elseif param == "ATUCSeverelyErroredSecs" then
      return xdslctl_stats(key, instance, "ses", "us",mapping)
  elseif param == "X_FASTWEB_UnavailableSeconds" then
      local uas = xdslctl_stats(key, instance, "uas", "ds", mapping)
      return uas ~= "nil" and uas or "0"
  elseif param == "X_000E50_UnavailableSeconds" then
      local uas = xdslctl_stats(key, instance, "uas", "ds", mapping)
      return uas ~= "nil" and uas or "0"
  elseif param == "X_FASTWEB_Linit" then
      local retr = xdslctl_stats(key, instance, "retr", "", mapping)
      return retr ~= "nil" and retr or "0"
  elseif param == "X_000E50_Linit" then
      local retr = xdslctl_stats(key, instance, "retr", "", mapping)
      return retr ~= "nil" and retr or "0"
  elseif param == "X_FASTWEB_LastResyncReason" then
      local lrtr = xdslctl_stats(key, instance, "lrtr", "", mapping)
      return lrtr ~= "nil" and lrtr or "0"
  elseif param == "X_000E50_LastResyncReason" then
      local lrtr = xdslctl_stats(key, instance, "lrtr", "", mapping)
      return lrtr ~= "nil" and lrtr or "0"
  elseif param == "X_FASTWEB_ErroredUPSeverelyErroredSecs" then
      return xdslctl_stats(key, instance, "ses", "us",mapping)
  elseif param == "X_FASTWEB_ErroredUPErroredSecs" then
      return xdslctl_stats(key, instance, "es", "us",mapping)
  end
  return ""
end

Multi_Stats_Total_.get = function(mapping, param, key)
  return get_instance("total", mapping, param, key)
end

Multi_Stats_Showtime_.get = function(mapping, param, key)
  return get_instance("sincesync", mapping, param, key)
end

Multi_Stats_QuarterHour_.get = function(mapping, param, key)
  return get_instance("currentquarter", mapping, param, key)
end

Multi_Stats_CurrentDay_.get = function(mapping, param, key)
  return get_instance("currentday", mapping, param, key)
end

Multi_Stats_LastShowtime_.get = function(mapping, param, key)
  return get_instance("lastshowtime", mapping, param, key)
end


local function getall_instance(instance, mapping, key)
  local allValues = {
    CRCErrors = "4294967295",
    XTURCRCErrors = "4294967295",
    XTUCCRCErrors = "4294967295",
    ErroredSecs = "4294967295",
    SeverelyErroredSecs = "4294967295",
    FECErrors = "4294967295",
    XTURFECErrors = "4294967295",
    XTUCFECErrors = "4294967295",
    HECErrors = "4294967295",
    XTURHECErrors = "4294967295",
    XTUCHECErrors = "4294967295",
    ATUCFECErrors = "4294967295",
    ATUCHECErrors = "4294967295",
    ATUCCRCErrors = "4294967295",
    LinkRetrain = "4294967295",
    InitTimeouts = "4294967295",
    LossOfFraming = "4294967295",
    ATUCErroredSecs = "4294967295",
    ATUCSeverelyErroredSecs = "4294967295",
    X_FASTWEB_UnavailableSeconds = "4294967295",
    X_000E50_UnavailableSeconds = "4294967295",
    X_FASTWEB_Linit = "4294967295",
    X_000E50_Linit = "4294967295",
    X_FASTWEB_LastResyncReason = "4294967295",
    X_000E50_LastResyncReason = "4294967295",
    X_FASTWEB_ErroredUPErroredSecs = "4294967295",
    X_FASTWEB_ErroredUPSeverelyErroredSecs = "4294967295"
  }
  local allstats = xdslctl.allstats()
  allValues.CRCErrors = allstats[instance].crc.ds
  allValues.XTURCRCErrors = allstats[instance].crc.ds
  allValues.XTUCCRCErrors = allstats[instance].crc.us
  allValues.ErroredSecs = allstats[instance].es.ds
  allValues.SeverelyErroredSecs = allstats[instance].ses.ds
  allValues.FECErrors = allstats[instance].fec.ds
  allValues.XTUCFECErrors = allstats[instance].fec.us
  allValues.XTURFECErrors = allstats[instance].fec.ds
  allValues.HECErrors = allstats[instance].hec.ds
  allValues.XTURHECErrors = allstats[instance].hec.ds
  allValues.XTUCHECErrors = allstats[instance].hec.us
  allValues.ATUCFECErrors = allstats[instance].fec.us
  allValues.ATUCHECErrors = allstats[instance].hec.us
  allValues.ATUCCRCErrors = allstats[instance].crc.us
  allValues.LinkRetrain = allstats[instance].retr ~= "nil" and allstats[instance].retr or "0"
  allValues.InitTimeouts = allstats[instance].retr ~= "nil" and allstats[instance].retr or "0"
  allValues.LossOfFraming = allstats[instance].lof.ds ~= "nil" and allstats[instance].lof.ds or "0"
  allValues.ATUCErroredSecs = allstats[instance].es.us
  allValues.ATUCSeverelyErroredSecs = allstats[instance].ses.us
  allValues.X_FASTWEB_UnavailableSeconds = allstats[instance].uas.ds ~= "nil" and allstats[instance].uas.ds or "0"
  allValues.X_000E50_UnavailableSeconds = allstats[instance].uas.ds ~= "nil" and allstats[instance].uas.ds or "0"
  allValues.X_FASTWEB_Linit = allstats[instance].retr ~= "nil" and allstats[instance].retr or "0"
  allValues.X_000E50_Linit = allstats[instance].retr ~= "nil" and allstats[instance].retr or "0"
  allValues.X_FASTWEB_LastResyncReason = allstats[instance].lrtr ~= "nil" and allstats[instance].lrtr or "0"
  allValues.X_000E50_LastResyncReason = allstats[instance].lrtr ~= "nil" and allstats[instance].lrtr or "0"
  allValues.X_FASTWEB_ErroredUPErroredSecs = allstats[instance].es.us
  allValues.X_FASTWEB_ErroredUPSeverelyErroredSecs = allstats[instance].ses.us
  return allValues
end

Multi_Stats_Total_.getall = function(mapping, key)
   return getall_instance("total", mapping, key)
end

Multi_Stats_Showtime_.getall = function(mapping, key)
  return getall_instance("sincesync", mapping, key)
end

Multi_Stats_QuarterHour_.getall = function(mapping, key)
  return getall_instance("currentquarter", mapping, key)
end

Multi_Stats_CurrentDay_.getall = function(mapping, key)
  return getall_instance("currentday", mapping, key)
end

Multi_Stats_LastShowtime_.getall = function(mapping, key)
  return getall_instance("lastshowtime", mapping, key)
end

local function file_exists(path)
  local file = io.open(path, "rb")
  if file ~= nil then
    file.close(file)
    return true
  end
  return false
end

-- register on XDSL platforms

if file_exists("/etc/config/xdsl") then
  local duplicator = mapper("multiroot").duplicate
  local dslStats = {Multi_Stats_Total_, Multi_Stats_Showtime_, Multi_Stats_LastShowtime_, Multi_Stats_QuarterHour_, Multi_Stats_CurrentDay_}
  for _, objectName in ipairs(dslStats) do
    local duplicates = duplicator(objectName, "#ROOT", {"InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig", "Device.DSL.Line.{i}", "Device.DSL.Channel.{i}"})
    for _, dupli in ipairs(duplicates) do
      if dupli.objectType.name:match("^InternetGatewayDevice%.") then
        for _, param in ipairs(dev2DSLChannelParams) do
          dupli.objectType.parameters[param] = nil
        end
        for _, param in ipairs(fastWebParams) do
          if not dupli.objectType.name:match("^InternetGatewayDevice%.WANDevice%.[^%.]+%.WANDSLInterfaceConfig%.Stats%.Total%.") then
            dupli.objectType.parameters[param] = nil
          end
        end
      elseif dupli.objectType.name:match("^Device%.DSL%.Line%.") then
        for _, param in ipairs(dev2DSLChannelParams) do
          dupli.objectType.parameters[param] = nil
        end
        for _, param in ipairs(fastWebParams) do
          if not dupli.objectType.name:match("^Device%.DSL%.Line%.[^%.]+%.Stats%.Total%.") then
            dupli.objectType.parameters[param] = nil
          end
        end
      elseif dupli.objectType.name:match("^Device%.DSL%.Channel%.") then
        for _, param in ipairs(dev2DSLLineParams) do
          dupli.objectType.parameters[param] = nil
        end
        for _, param in ipairs(igdDSLParams) do
          dupli.objectType.parameters[param] = nil
        end
        for _, param in ipairs(fastWebParams) do
          dupli.objectType.parameters[param] = nil
        end
      end
      register(dupli)
    end
  end
  register(InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_)
end
