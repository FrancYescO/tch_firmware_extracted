-- Manually Generated
local Multi_X_000E50_SpeedService_Result_i_ = {
  objectType = {
    name = "#ROOT.X_000E50_SpeedService.Result.{i}.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      GoodPut = {
        access = "readOnly",
        type = "unsignedInt",
        description = "best_kbps output from the result ubus call for the requested measure parameters",
      },
      PayLoadRate = {
        access = "readOnly",
        type = "unsignedInt",
        description = "payload_kbps output from the result ubus call for the requested measure parameters",
      },
      PacketLoss = {
        access = "readOnly",
        type = "unsignedInt",
        description = "payload_kbps output from the result ubus call for the requested measure parameters",
      },
      AvgLatency = {
        access = "readOnly",
        type = "unsignedInt",
        description = "best_latency output from the result ubus call for the requested measure parameters",
      },
      AdjustReceivedRate = {
        access = "readOnly",
        type = "unsignedInt",
        description = "best_rx_kbps output from the result ubus call for the requested measure parameters",
      },
      ReceivedTime = {
        access = "readOnly",
        type = "unsignedInt",
        description = "best_rx_time_usec output from the result ubus call for the requested measure parameters",
      },
      Overhead = {
        access = "readOnly",
        type = "unsignedInt",
        description = "overhead output from the result ubus call for the requested measure parameters",
      },
      RunTime = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Last test updated Runtime",
      },
      Direction = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Default direction used in measure ubus call",
      },
    }
  }
}

local uciHelper = mapper("ucihelper")
local getFromUci = uciHelper.get_from_uci
local getAllFromUci = uciHelper.getall_from_uci
local forEachOnUci = uciHelper.foreach_on_uci
local spdBinding = { config = "bcm_spdsvc" }

Multi_X_000E50_SpeedService_Result_i_.entries = function(mapping)
  local entries = {}
  spdBinding.sectionname = "result"
  forEachOnUci(spdBinding, function(s)
    entries[#entries + 1] = s['.name']
  end)
  return entries
end

local resultSpeedTestOptions = {
  GoodPut = "best_kbps",
  PayLoadRate = "payload_kbps",
  PacketLoss = "min_loss",
  AvgLatency = "best_latency",
  AdjustReceivedRate = "best_rx_kbps",
  ReceivedTime = "best_rx_time_usec",
  Overhead = "overhead",
  RunTime = "runtime",
  Direction = "direction",
}

local resultDefaultSpeedTestValue = {
  GoodPut = "0",
  PayLoadRate = "0",
  PacketLoss = "0",
  AvgLatency = "0",
  AdjustReceivedRate = "0",
  ReceivedTime = "0",
  Overhead = "0",
  RunTime = "0",
  Direction = "upstream",
}

Multi_X_000E50_SpeedService_Result_i_.get = function(mapping, param, key)
  spdBinding.sectionname = key
  spdBinding.option = resultSpeedTestOptions[param]
  spdBinding.default = resultDefaultSpeedTestValue[param]
  return getFromUci(spdBinding)
end

Multi_X_000E50_SpeedService_Result_i_.getall = function(mapping, key)
  spdBinding.sectionname = key
  local allValues = getAllFromUci(spdBinding)
  return {
    GoodPut = allValues.best_kbps or "0",
    PayLoadRate = allValues.payload_kbps or "0",
    PacketLoss = allValues.min_loss or "0",
    AvgLatency = allValues.best_latency or "0",
    AdjustReceivedRate = allValues.best_rx_kbps or "0",
    ReceivedTime = allValues.best_rx_time_usec or "0",
    Overhead = allValues.overhead or "0",
    RunTime = allValues.runtime or "0",
    Direction = allValues.direction or "upstream",
  }
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_X_000E50_SpeedService_Result_i_, "#ROOT", { "Device", "InternetGatewayDevice", "rpc" })
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
