-- Manually generated

local Multi_Services_X_000E50_AccessManagement_SIP_= {
    objectType = {
        name = "#ROOT.Services.X_000E50_AccessManagement.SIP.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        description = "Parameter to configure via ACS the server IPs to interact with SIP client",
        parameters = {
            AllowIP = {
                access = "readWrite",
                type = "string",
                default = "",
                description = "Specifies which Server IP will be allowed to access local SIP client",
            },
        },
    },
}

----------------------------------------------------------------
--SIP ACL MAPPER
----------------------------------------------------------------
local concat = table.concat
local uciHelper = mapper("ucihelper")
local getFromUci = uciHelper.get_from_uci
local getallFromUci = uciHelper.getall_from_uci
local setOnUci = uciHelper.set_on_uci
local forEachOnUci = uciHelper.foreach_on_uci
local delOnUci = uciHelper.delete_on_uci
local fwBinding = { config = "firewall" }
local ipsetBinding = { config = "ipset" }
local transactions = {}

local ipsetMap = {
    storage = "hash",
    enabled = 1,
    match = "src_ip",
    family = "ipv4",
}

local fwIpsetMap = {
    external = "sip_ipset",
    storage = "hash",
    match = "src_ip",
    family = "ipv4",
}

local fwRuleMap = {
    src = "wan",
    proto = "udp",
    dest_port = "5060",
    ipset = "sip_ipset",
    target = "ACCEPT",
}

local portMap = {
    UDP = "udp",
    TCP = "tcp",
    TLS = "tcp"
}

local sipnetMap = {
    proto = "transport_type",
    dest_port = "local_port",
    src = "interface"
}

local function setUciValue(binding, section, option, value)
    binding.sectionname = section
    binding.option = option
    setOnUci(binding, value, commitapply)
    transactions[binding.config] = true
end

Multi_Services_X_000E50_AccessManagement_SIP_.get = {
    AllowIP = function()
        local ipList = {}
        ipsetBinding.sectionname = "ipset_entry"
        forEachOnUci(ipsetBinding, function(s)
            if s.ip and s.ipset == "sip_ipset" then
                ipList[#ipList + 1] = s.ip
            end
        end)
        return concat(ipList, ",")
    end,
}

-- remove all the existing ipset_entry in ipset config for sip_ipset
local function removeAllSipIpsetEntries()
    ipsetBinding.sectionname = "sip_ipset"
    ipsetBinding.option = nil
    delOnUci(ipsetBinding, commitapply)
    ipsetBinding.sectionname = "ipset_entry"
    forEachOnUci(ipsetBinding, function(s)
        if s.ipset and s.ipset == "sip_ipset" then
            ipsetBinding.sectionname = s[".name"]
            delOnUci(ipsetBinding, commitapply)
         end
    end)
    transactions[ipsetBinding.config] = true
end

-- create ipset_entry for each input IP in ipset config
local function createIpsetEntries(value)
    local count = 1
    local section = ""
    ipsetBinding.sectionname = "sip_ipset"
    local ipsetSection = getallFromUci(ipsetBinding)
    if not next(ipsetSection) then
        ipsetBinding.option = nil
        setOnUci(ipsetBinding, "ipset", commitapply)
        for option, val in pairs(ipsetMap) do
            setUciValue(ipsetBinding, "sip_ipset", option, val)
        end
    end
    for ipaddr in value:gmatch("([^,]+)") do
        section = "sip_ipsetentry" .. count
        ipsetBinding.sectionname = section
        ipsetBinding.option = nil
        setOnUci(ipsetBinding, "ipset_entry", commitapply)
        setUciValue(ipsetBinding, section, "ip", ipaddr)
        setUciValue(ipsetBinding, section, "ipset", "sip_ipset")
        count = count + 1
        if count > 6 then
            break
        end
    end
end

-- create rule for each input IP in firewall config
local function addNewRule()
    local sipnetBinding = { config = "mmpbxrvsipnet", sectionname = "sip_net" }
    local data = ""
    fwBinding.sectionname = "sip_rule_1"
    fwBinding.option = nil
    setOnUci(fwBinding, "rule", commitapply)
    for option, val in pairs(fwRuleMap) do
        if sipnetMap[option] then
            sipnetBinding.option = sipnetMap[option]
            data = getFromUci(sipnetBinding)
            if option == "proto" then
                val = portMap[data] or val
            else
                val = data ~= "" and data or val
            end
        end
        setUciValue(fwBinding, "sip_rule_1", option, val)
    end
end

-- check & add ipset config option in firewall config
local function addSipIpsetToFirewall()
    fwBinding.sectionname = "sip_ipset"
    local fwSection = getallFromUci(fwBinding)
    if not next(fwSection) then
        fwBinding.option = nil
        setOnUci(fwBinding, "ipset", commitapply)
        for option, val in pairs(fwIpsetMap) do
            setUciValue(fwBinding, "sip_ipset", option, val)
        end
    end
    addNewRule()
end

local function removeFirewallSipIpset()
    fwBinding.sectionname = "sip_ipset"
    fwBinding.option = nil
    delOnUci(fwBinding, commitapply)
    fwBinding.sectionname = "sip_rule_1"
    delOnUci(fwBinding, commitapply)
    transactions[fwBinding.config] = true
end

Multi_Services_X_000E50_AccessManagement_SIP_.set = {
    AllowIP = function(mapping, param, value)
        removeAllSipIpsetEntries()
        if value ~= "" then
            createIpsetEntries(value)
            addSipIpsetToFirewall()
        else
            removeFirewallSipIpset()
        end
    end
}

Multi_Services_X_000E50_AccessManagement_SIP_.commit = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uciHelper.commit(binding)
    end
    transactions = {}
end

Multi_Services_X_000E50_AccessManagement_SIP_.revert = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uciHelper.revert(binding)
    end
    transactions = {}
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Services_X_000E50_AccessManagement_SIP_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
    register(dupli)
end
