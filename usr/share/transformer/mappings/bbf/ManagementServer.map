-- Automatically generated from InternetGatewayDevice:1.14 and Device:2.10
-- using generator version 2.3
local Multi_ManagementServer_ = {
  objectType = {
    name = "#ROOT.ManagementServer.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      EnableCWMP = {
        access = "readWrite",
        type = "boolean",
        default = "true",
      },
      URL = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      Username = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      Password = {
        access = "readWrite",
        hidden = "true",
        type = "string",
        max = "256",
      },
--[[ TODO:
      ScheduleReboot = {
        access = "readWrite",
        type = "dateTime",
      },
      DelayReboot = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
          },
        },
      },
--]]
      PeriodicInformEnable = {
        access = "readWrite",
        type = "boolean",
      },
      PeriodicInformInterval = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1",
          },
        },
      },
      PeriodicInformTime = {
        access = "readWrite",
        type = "dateTime",
      },
      ParameterKey = {
        access = "readOnly",
        activeNotify = "canDeny",
        forcedInform = "true",
        type = "string",
        max = "32",
      },
      ConnectionRequestURL = {
        access = "readOnly",
        activeNotify = "forceDefaultEnabled",
        forcedInform = "true",
        type = "string",
        max = "256",
      },
      ConnectionRequestUsername = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      ConnectionRequestPassword = {
        access = "readWrite",
        hidden = "true",
        type = "string",
        max = "256",
      },
      AliasBasedAddressing = {
        access = "readOnly",
        forcedInform = "true",
        type = "boolean",
      },
      DefaultActiveNotificationThrottle = {
        access = "readWrite",
        type = "unsignedInt",
      },
      UpgradesManaged = {
        access = "readWrite",
        type = "boolean",
      },
--[[ TODO:
      KickURL = {
        access = "readOnly",
        type = "string",
        max = "256",
      },
      DownloadProgressURL = {
        access = "readOnly",
        type = "string",
        max = "256",
      },
      DefaultActiveNotificationThrottle = {
        access = "readWrite",
        type = "unsignedInt",
      },
      UDPConnectionRequestAddressNotificationLimit = {
        access = "readWrite",
        type = "unsignedInt",
      },
--]]
      CWMPRetryMinimumWaitInterval = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1",
            max = "65535",
          },
        },
      },
      CWMPRetryIntervalMultiplier = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1000",
            max = "65535",
          },
        },
      },
--[[ TODO
      UDPConnectionRequestAddress = {
        access = "readOnly",
        type = "string",
        max = "256",
      },
      STUNEnable = {
        access = "readWrite",
        type = "boolean",
      },
      STUNServerAddress = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      STUNServerPort = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "65535",
          },
        },
      },
      STUNUsername = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      STUNPassword = {
        access = "readWrite",
        hidden = "true",
        type = "string",
        max = "256",
      },
      STUNMaximumKeepAlivePeriod = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
          },
        },
      },
      STUNMinimumKeepAlivePeriod = {
        access = "readWrite",
        type = "unsignedInt",
      },
      NATDetected = {
        access = "readOnly",
        type = "boolean",
      },
      InstanceMode = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "InstanceNumber",
          "InstanceAlias",
        },
        default = "InstanceNumber",
      },
      AutoCreateInstances = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
--]]
      -- ManageableDeviceNumberOfEntries
      -- automatically created when Device.ManagementServer.ManageableDevice.{i}. is loaded
      ManageableDeviceNotificationLimit = {
        access = "readWrite",
        type = "unsignedInt",
      },

      -- EmbeddedDeviceNumberOfEntries
      -- automatically created when Device.ManagementServer.EmbeddedDevice.{i}. is loaded
      -- VirtualDeviceNumberOfEntries
      -- automatically created when Device.ManagementServer.VirtualDevice.{i}. is loaded
--[[ TODO
      SupportedConnReqMethods = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "HTTP",
          "STUN",
          "XMPP",
        },
      },
      ConnReqXMPPConnection = {
        access = "readWrite",
        type = "string",
        pathRef = true,
        targetParent = "Device.XMPP.Connection.{i}.",
      },
      ConnReqAllowedJabberIDs = {
        access = "readWrite",
        list = true,
        maxItems = "32",
        type = "string",
        max = "256",
      },
      ConnReqJabberID = {
        access = "readOnly",
        activeNotify = "forceDefaultEnabled",
        type = "string",
      },
      HTTPCompressionSupported = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "GZIP",
          "Compress",
          "Deflate",
          "Disabled",
        },
      },
      HTTPCompression = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "GZIP",
          "Compress",
          "Deflate",
          "Disabled",
        },
        default = "Disabled",
      },
      LightweightNotificationProtocolsSupported = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "UDP",
          "",
        },
      },
      LightweightNotificationProtocolsUsed = {
        access = "readWrite",
        list = true,
        type = "string",
        enumeration = {
          "UDP",
          "",
        },
      },
      UDPLightweightNotificationHost = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      UDPLightweightNotificationPort = {
        access = "readWrite",
        type = "unsignedInt",
      },
--]]
      X_000E50_DelayUpgrade = {
        access = "readWrite",
        type = "boolean",
        description = "If true no automatic switchover is done when a new firmware is installed; an explicit trigger needs to be given."
      },
      X_000E50_ConnectionRequestAllowedIPs = {
        access = "readWrite",
        type = "string",
        description = "Comma-separated list of IP address ranges (ip/mask) that are allowed to initiate a connection request."
      },
      -- InformParameterNumberOfEntries
      -- automatically created when Device.ManagementServer.InformParameter.{i}. is loaded

    }
  }
}


local cwmpOption = {
  ["EnableCWMP"] = "state",
  ["URL"] = "acs_url",
  ["Username"] = "acs_user",
  ["Password"] = "acs_pass",
  ["PeriodicInformEnable"] = "periodicinform_enable",
  ["PeriodicInformInterval"] = "periodicinform_interval",
  ["PeriodicInformTime"] = "periodicinform_time",
  ["ParameterKey"] = "parameter_key",
  ["ConnectionRequestURL"] = "connectionrequest_url",
  ["ConnectionRequestUsername"] = "connectionrequest_username",
  ["ConnectionRequestPassword"] = "connectionrequest_password",
  ["DefaultActiveNotificationThrottle"] = "activenotification_throttle",
  ["UpgradesManaged"] = "upgradesmanaged",
  ["CWMPRetryMinimumWaitInterval"] = "backoff_minwait",
  ["CWMPRetryIntervalMultiplier"] = "backoff_multiplier",
  ["ManageableDeviceNotificationLimit"] = "manageabledevice_notification_limit",
  ["X_000E50_DelayUpgrade"] = "upgrade_switchovertype",
  ["X_000E50_ConnectionRequestAllowedIPs"] = "connectionrequest_allowedips",
}

local mapper = mapper
local os = os
local tonumber = tonumber
local pairs = pairs
local next = next
local uciHelper = mapper("ucihelper")
local getFromUci = uciHelper.get_from_uci
local cwmpBinding = {config = "cwmpd", sectionname = "cwmpd_config"}
local transactions = {}
local uci = require("uci")
local find, sub, gmatch = string.find, string.sub, string.gmatch
local inet = require("tch.inet")

local function removeFromState(option)
  local cursor = uci.cursor(nil,"/var/state") -- Can not use ucihelper, because it does not contain this kind of cursor.
  cursor:revert("cwmpd", "cwmpd_config", option)
  cursor:close()
end

local function getManageableDeviceNotificationLimit(param)
  cwmpBinding.option = cwmpOption[param]
  local value = getFromUci(cwmpBinding)
  return value ~= "" and value or "0"
end

local function getPeriodicInformTime(param)
  cwmpBinding.option = cwmpOption[param]
  local value = getFromUci(cwmpBinding)
  value = value ~= "" and tonumber(value)
  return value and os.date("!%Y-%m-%dT%H:%M:%SZ", value) or "0001-01-01T00:00:00Z"
end

-- Returns the number of seconds that must be added to local time to yield UTC
local function getUtcOffset(timestamp)
  local dateWithTZ = os.date("*t", timestamp)
  local dateUTC = os.date("!*t", timestamp)
  -- The timestamp may correspond where DST is in effect and we must compensate for this by resetting the isdst flag.
  dateWithTZ.isdst = false
  return os.difftime(os.time(dateUTC), os.time(dateWithTZ))
end

local function setPeriodicInformTime(value)
  local date = {}
  if value:match("(%d+)%-(%d+)%-(%d+)T(%d+):(%d+):(%d+)Z") then
    date.year, date.month, date.day, date.hour, date.min, date.sec = value:match("(%d+)%-(%d+)%-(%d+)T(%d+):(%d+):(%d+)Z")
    -- os.time() yields epoch corresponding to date, as if date were in local time, but we accept it in UTC.
    -- Hence, it will have an offset corresponding to the timezone the machine is configured to.
    local epochWithOffset = os.time(date)
    -- PeriodicInformTime is received and stored in UTC: apply the calculated UTC offset to compensate the offset introduced by os.time()
    return epochWithOffset - getUtcOffset(epochWithOffset)
  end
  return nil, "Invalid Value"
end

-- Get IP address and mask from "ip"
-- Return IP address and mask
local function getIPAddrAndMask(ip)
    local ipAddr = ip
    local mask
    local ipAddrEnd = find(ip, "/")
    if ipAddrEnd then
        ipAddr = sub(ip, 1, ipAddrEnd-1)
        mask = sub(ip, ipAddrEnd+1)
    end
    return ipAddr, mask
end

-- Check if "ipAddr" is a valid IPv4 address and "mask" is a valid subnet mask
-- Return true if valid, otherwise, return false
local function validateIPv4(ipAddr, mask)
    if not inet.isValidIPv4(ipAddr) then
        return false
    end

    if mask then
        mask = tonumber(mask)
        if not mask or mask < 0 or mask > 32 then
            return false
        end
    end
    return true
end

-- Check if "ipAddr" is a valid IPv6 address and "mask" is a valid subnet mask
-- Return true if valid, otherwise, return false
local function validateIPv6(ipAddr, mask)
    if ipAddr then
        if not inet.isValidIPv6(ipAddr) then
            return false
        end
    else
        return false
    end

    if mask then
        mask = tonumber(mask)
        if not mask or mask < 0 or mask > 128 then
            return false
        end
    end
    return true
end

-- Check if "value" is a valid IPv4 or IPv6 address with/without a subnet mask
-- Return the original value if it is valid, otherwise, return nil, <error message>
local function setConnectionRequestAllowedIPs(value)
    if value == "," or find(value, ",,") then
        return nil, "Not a comma-separated list of valid IP address ranges"
    end
    for ip in gmatch(value, "([^,]+)") do
        local ipAddr, mask = getIPAddrAndMask(ip)
        if not validateIPv4(ipAddr, mask) and not validateIPv6(ipAddr, mask) then
            return nil, "Not a comma-separated list of valid IP address ranges"
        end
    end
    return value
end

Multi_ManagementServer_.get = function(mapping, param)
  if param == "PeriodicInformTime" then
    return getPeriodicInformTime(param)
  elseif param == "AliasBasedAddressing" then
    return "0"
  elseif param == "ManageableDeviceNotificationLimit" then
    return getManageableDeviceNotificationLimit(param)
  end
  local default
  if param == "X_000E50_DelayUpgrade" then
    default = "0"
  end
  cwmpBinding.option = cwmpOption[param]
  cwmpBinding.default = default
  return getFromUci(cwmpBinding)
end

-- A getall implementation is not done as it will not bring any improvement

Multi_ManagementServer_.set = function(mapping, param, value)
  local errMsg
  if param == "PeriodicInformTime" then
    value, errMsg = setPeriodicInformTime(value)
    if not value then
      return nil, errMsg
    end
  end
  if param == "X_000E50_ConnectionRequestAllowedIPs" then
    value, errMsg = setConnectionRequestAllowedIPs(value)
    if not value then
      return nil, errMsg
    end
  end
  cwmpBinding.option = cwmpOption[param]
  uciHelper.set_on_uci(cwmpBinding, value, commitapply)
  transactions[cwmpBinding.option] = true
end

Multi_ManagementServer_.commit = function()
  if next(transactions) then
    for option in pairs(transactions) do
      removeFromState(option)
    end
    uciHelper.commit(cwmpBinding)
    transactions = {}
  end
end

Multi_ManagementServer_.revert = function()
  if next(transactions) then
    uciHelper.revert(cwmpBinding)
    transactions = {}
  end
end

local lastTime = 0
local function ubus_event_cb(mapping, event, data)
  local notificationLimit = getManageableDeviceNotificationLimit("ManageableDeviceNotificationLimit")
  notificationLimit = tonumber(notificationLimit)

  if not notificationLimit then
    notificationLimit = 0
  end

  local currentTime = os.time()
  if currentTime - lastTime >= notificationLimit then
    lastTime = currentTime
    return { { key = "", paramname = "ManageableDeviceNumberOfEntries" } }
  end
end

local function translate_cb(mapping, action, config, sectiontype, sectionname, option)
  return { { key = "", paramname = "PeriodicInformInterval" } }
end

Multi_ManagementServer_.add_watchers = function(mapping)
  local eventSource = eventsource
  local uciEventsrc = eventSource("uci")
  uciEventsrc.watch(mapping, { set = translate_cb }, "cwmpd", nil, "cwmpd_config", "periodicinform_interval")

  local ubusEventsrc = eventSource("ubus")
  ubusEventsrc.watch_event(mapping, ubus_event_cb, "hostmanager.devicechanged")
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_ManagementServer_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
