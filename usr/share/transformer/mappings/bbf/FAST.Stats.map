-- Automatically generated from Device:2.11
-- using generator version 2.3
local Multi_FAST_Line_i_Stats_ = {
  objectType = {
    name = "#ROOT.Line.{i}.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "Throughput statistics for this interface.",
    parameters = {
      BytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
        description = "The total number of bytes transmitted out of the interface, including framing characters.",
      },
      BytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
        description = "The total number of bytes received on the interface, including framing characters.",
      },
      PacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
        description = "The total number of packets transmitted out of the interface.",
      },
      PacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedLong",
        description = "The total number of packets received on the interface.",
      },
      ErrorsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "The total number of outbound packets that could not be transmitted because of errors.",
      },
      ErrorsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "The total number of inbound packets that contained errors preventing them from being delivered to a higher-layer protocol.",
      },
      DiscardPacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "The total number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted.",
      },
      DiscardPacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "The total number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being delivered.",
      },
      TotalStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "The Number of seconds since the beginning of the period used for collection of Total statistics.",
      },
      ShowtimeStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "The Number of seconds since the most recent DSL Showtime - the beginning of the period used for collection of Showtime statistics.",
      },
      LastShowtimeStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "The Number of seconds since the second most recent DSL Showtime-the beginning of the period used for collection of LastShowtime statistics.",
      },
      CurrentDayStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "The Number of seconds since the beginning of the period used for collection of CurrentDay statistics.",
      },
      QuarterHourStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "The Number of seconds since the beginning of the period used for collection of QuarterHour statistics.",
      },
    }
  }
}

local _, xdslctl = pcall(require,"transformer.shared.xdslctl")

local function xdslctlLineIdMap2(key)
  if string.find(key, "dsl:dsl") then
    return string.gsub(key, "dsl:dsl", "line")
  elseif string.find(key, "dsl") then
    return string.gsub(key, "dsl", "line")
  else
    return nil
  end
end

Multi_FAST_Line_i_Stats_.get = {
  BytesSent = function(mapping, param, key)
    return xdslctl.infoValue("counters_totalcells", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  BytesReceived = function(mapping, param, key)
    return xdslctl.infoValue("counters_totalcells", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  PacketsSent = function(mapping, param, key)
    return xdslctl.infoValue("counters_datacells", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  PacketsReceived = function(mapping, param, key)
    return xdslctl.infoValue("counters_datacells", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  ErrorsSent = function(mapping, param, key)
    return xdslctl.infoValue("counters_biterr", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  ErrorsReceived = function(mapping, param, key)
    return xdslctl.infoValue("counters_biterr", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  DiscardPacketsSent = function(mapping, param, key)
    return xdslctl.infoValue("counters_dropcells", "us", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  DiscardPacketsReceived = function(mapping, param, key)
    return xdslctl.infoValue("counters_dropcells", "ds", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  TotalStart = function(mapping, param, key)
    return xdslctl.stats("total", "start", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  ShowtimeStart = function(mapping, param, key)
    return xdslctl.stats("sincesync", "start", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  LastShowtimeStart = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "start", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  CurrentDayStart = function(mapping, param, key)
    return xdslctl.stats("currentday", "start", nil, xdslctlLineIdMap2(key)) or "0"
  end,
  QuarterHourStart = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "start", nil, xdslctlLineIdMap2(key)) or "0"
  end,
}

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_FAST_Line_i_Stats_, "#ROOT", { "InternetGatewayDevice.X_000E50_FAST", "Device.FAST" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end

local Multi_FAST_Line_i_Stats_Total_ = {
  objectType = {
    name = "#ROOT.Line.{i}.Stats.Total.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "This object contains DSL line total statistics.",
    parameters = {
      ErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of errored seconds as defined in ITU-T Rec. [G.997.2].",
      },
      SeverelyErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of severely errored seconds as defined in ITU-T Rec. [G.997.2].",
      },
      LOSS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of loss of signal seconds (LOSS) as defined in ITU-T Rec. [G.997.2].",
      },
      LORS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of loss of RMC seconds (LORS) as defined in ITU-T Rec. [G.997.2].",
      },
      UAS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of unavailable seconds (UAS) as defined in ITU-T Rec. [G.997.2].",
      },
      RTXUC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of uncorrected DTU anomalies (rtx_uc).",
      },
      RTXTX = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of retransmitted DTU anomalies (rtx_tx).",
      },
      SuccessBSW = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful bit swap (BSW) primitives.",
      },
      SuccessSRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful autonomous SRA (seamless rate adaptation) primitives.",
      },
      SuccessFRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful FRA (fast rate adaptation) primitives.",
      },
      SuccessRPA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful RPA (RMC parameter adjustment) primitives.",
      },
      SuccessTIGA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful TIGA (transmitter initiated gain adjustment) primitives.",
      },
    }
  }
}

Multi_FAST_Line_i_Stats_Total_.get = {
  ErroredSecs = function(mapping, param, key)
    return xdslctl.stats("total", "es", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SeverelyErroredSecs = function(mapping, param, key)
    return xdslctl.stats("total", "ses", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LOSS = function(mapping, param, key)
    return xdslctl.stats("total", "los", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LORS = function(mapping, param, key)
    --return xdslctl.stats("total", "es", "ds", xdslctlLineIdMap2(key)) or "0"
    return "0"
  end,
  UAS = function(mapping, param, key)
    return xdslctl.stats("total", "uas", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXUC = function(mapping, param, key)
    return xdslctl.stats("total", "rtx", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXTX = function(mapping, param, key)
    return xdslctl.stats("total", "rtx", "us", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessBSW = function(mapping, param, key)
    return xdslctl.stats("total", "bswCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessSRA = function(mapping, param, key)
    return xdslctl.stats("total", "sraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessFRA = function(mapping, param, key)
    return xdslctl.stats("total", "fraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessRPA = function(mapping, param, key)
    return xdslctl.stats("total", "rpaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessTIGA = function(mapping, param, key)
    return xdslctl.stats("total", "tigaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
}

duplicates = duplicator(Multi_FAST_Line_i_Stats_Total_, "#ROOT", { "InternetGatewayDevice.X_000E50_FAST", "Device.FAST" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end

local Multi_FAST_Line_i_Stats_Showtime_ = {
  objectType = {
    name = "#ROOT.Line.{i}.Stats.Showtime.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "This object contains FAST line statistics since the most recent showtime.",
    parameters = {
      ErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of errored seconds as defined in ITU-T Rec. [G.997.2].",
      },
      SeverelyErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of severely errored seconds as defined in ITU-T Rec. [G.997.2].",
      },
      LOSS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of loss of signal seconds (LOSS) as defined in ITU-T Rec. [G.997.2].",
      },
      LORS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of loss of RMC seconds (LORS) as defined in ITU-T Rec. [G.997.2].",
      },
      UAS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of unavailable seconds (UAS) as defined in ITU-T Rec. [G.997.2].",
      },
      RTXUC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of uncorrected DTU anomalies (rtx_uc).",
      },
      RTXTX = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of retransmitted DTU anomalies (rtx_tx).",
      },
      SuccessBSW = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful bit swap (BSW) primitives.",
      },
      SuccessSRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful autonomous SRA (seamless rate adaptation) primitives.",
      },
      SuccessFRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful FRA (fast rate adaptation) primitives.",
      },
      SuccessRPA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful RPA (RMC parameter adjustment) primitives.",
      },
      SuccessTIGA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful TIGA (transmitter initiated gain adjustment) primitives.",
      },
    }
  }
}

Multi_FAST_Line_i_Stats_Showtime_.get = {
  ErroredSecs = function(mapping, param, key)
    return xdslctl.stats("sincesync", "es", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SeverelyErroredSecs = function(mapping, param, key)
    return xdslctl.stats("sincesync", "ses", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LOSS = function(mapping, param, key)
    return xdslctl.stats("sincesync", "los", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LORS = function(mapping, param, key)
    return "0"
  end,
  UAS = function(mapping, param, key)
    return xdslctl.stats("sincesync", "uas", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXUC = function(mapping, param, key)
    return xdslctl.stats("sincesync", "rtx", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXTX = function(mapping, param, key)
    return xdslctl.stats("sincesync", "rtx", "us", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessBSW = function(mapping, param, key)
    return xdslctl.stats("sincesync", "bswCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessSRA = function(mapping, param, key)
    return xdslctl.stats("sincesync", "sraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessFRA = function(mapping, param, key)
    return xdslctl.stats("sincesync", "fraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessRPA = function(mapping, param, key)
    return xdslctl.stats("sincesync", "rpaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessTIGA = function(mapping, param, key)
    return xdslctl.stats("sincesync", "tigaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
}

duplicates = duplicator(Multi_FAST_Line_i_Stats_Showtime_, "#ROOT", { "InternetGatewayDevice.X_000E50_FAST", "Device.FAST" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end

local Multi_FAST_Line_i_Stats_LastShowtime_ = {
  objectType = {
    name = "#ROOT.Line.{i}.Stats.LastShowtime.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "This object contains FAST line statistics since the second most recent showtime.",
    parameters = {
      ErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of errored seconds as defined in ITU-T Rec. [G.997.2].",
      },
      SeverelyErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of severely errored seconds as defined in ITU-T Rec. [G.997.2].",
      },
      LOSS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of loss of signal seconds (LOSS) as defined in ITU-T Rec. [G.997.2].",
      },
      LORS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of loss of RMC seconds (LORS) as defined in ITU-T Rec. [G.997.2].",
      },
      UAS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of unavailable seconds (UAS) as defined in ITU-T Rec. [G.997.2].",
      },
      RTXUC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of uncorrected DTU anomalies (rtx_uc).",
      },
      RTXTX = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of retransmitted DTU anomalies (rtx_tx).",
      },
      SuccessBSW = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful bit swap (BSW) primitives.",
      },
      SuccessSRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful autonomous SRA (seamless rate adaptation) primitives.",
      },
      SuccessFRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful FRA (fast rate adaptation) primitives.",
      },
      SuccessRPA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful RPA (RMC parameter adjustment) primitives.",
      },
      SuccessTIGA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "his parameter reports a count of the successful TIGA (transmitter initiated gain adjustment) primitives.",
      },
    }
  }
}

Multi_FAST_Line_i_Stats_LastShowtime_.get = {
  ErroredSecs = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "es", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SeverelyErroredSecs = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "ses", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LOSS = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "los", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LORS = function(mapping, param, key)
    return "0"
  end,
  UAS = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "uas", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXUC = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "rtx", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXTX = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "rtx", "us", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessBSW = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "bswCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessSRA = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "sraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessFRA = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "fraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessRPA = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "rpaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessTIGA = function(mapping, param, key)
    return xdslctl.stats("lastshowtime", "tigaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
}

duplicates = duplicator(Multi_FAST_Line_i_Stats_LastShowtime_, "#ROOT", { "InternetGatewayDevice.X_000E50_FAST", "Device.FAST" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end

local Multi_FAST_Line_i_Stats_CurrentDay_ = {
  objectType = {
    name = "#ROOT.Line.{i}.Stats.CurrentDay.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "This object contains FAST line statistics accumulated during the current day.",
    parameters = {
      ErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of errored seconds as defined in ITU-T Rec. [G.997.2].",
      },
      SeverelyErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of severely errored seconds as defined in ITU-T Rec. [G.997.2].",
      },
      LOSS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of loss of signal seconds (LOSS) as defined in ITU-T Rec. [G.997.2].",
      },
      LORS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of loss of RMC seconds (LORS) as defined in ITU-T Rec. [G.997.2].",
      },
      UAS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of unavailable seconds (UAS) as defined in ITU-T Rec. [G.997.2].",
      },
      RTXUC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of uncorrected DTU anomalies (rtx_uc).",
      },
      RTXTX = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of retransmitted DTU anomalies (rtx_tx).",
      },
      SuccessBSW = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful bit swap (BSW) primitives.",
      },
      SuccessSRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful autonomous SRA (seamless rate adaptation) primitives.",
      },
      SuccessFRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful FRA (fast rate adaptation) primitives.",
      },
      SuccessRPA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful RPA (RMC parameter adjustment) primitives.",
      },
      SuccessTIGA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful TIGA (transmitter initiated gain adjustment) primitives.",
      },
    }
  }
}

Multi_FAST_Line_i_Stats_CurrentDay_.get = {
  ErroredSecs = function(mapping, param, key)
    return xdslctl.stats("currentday", "es", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SeverelyErroredSecs = function(mapping, param, key)
    return xdslctl.stats("currentday", "ses", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LOSS = function(mapping, param, key)
    return xdslctl.stats("currentday", "los", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LORS = function(mapping, param, key)
    return "0"
  end,
  UAS = function(mapping, param, key)
    return xdslctl.stats("currentday", "uas", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXUC = function(mapping, param, key)
    return xdslctl.stats("currentday", "rtx", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXTX = function(mapping, param, key)
    return xdslctl.stats("currentday", "rtx", "us", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessBSW = function(mapping, param, key)
    return xdslctl.stats("currentday", "bswCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessSRA = function(mapping, param, key)
    return xdslctl.stats("currentday", "sraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessFRA = function(mapping, param, key)
    return xdslctl.stats("currentday", "fraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessRPA = function(mapping, param, key)
    return xdslctl.stats("currentday", "rpaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessTIGA = function(mapping, param, key)
    return xdslctl.stats("currentday", "tigaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
}

duplicates = duplicator(Multi_FAST_Line_i_Stats_CurrentDay_, "#ROOT", { "InternetGatewayDevice.X_000E50_FAST", "Device.FAST" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end

local Multi_FAST_Line_i_Stats_QuarterHour_ = {
  objectType = {
    name = "#ROOT.Line.{i}.Stats.QuarterHour.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    description = "This object contains FAST line statistics accumulated during the current quarter hour.",
    parameters = {
      ErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of errored seconds as defined in ITU-T Rec. [G.997.2]. ",
      },
      SeverelyErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of severely errored seconds as defined in ITU-T Rec. [G.997.2].",
      },
      LOSS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of loss of signal seconds (LOSS) as defined in ITU-T Rec.",
      },
      LORS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of loss of RMC seconds (LORS) as defined in ITU-T Rec. [G.997.2].",
      },
      UAS = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "Total number of unavailable seconds (UAS) as defined in ITU-T Rec. [G.997.2].",
      },
      RTXUC = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of uncorrected DTU anomalies (rtx_uc).",
      },
      RTXTX = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of retransmitted DTU anomalies (rtx_tx).",
      },
      SuccessBSW = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful bit swap (BSW) primitives.",
      },
      SuccessSRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful autonomous SRA (seamless rate adaptation) primitives.",
      },
      SuccessFRA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful FRA (fast rate adaptation) primitives.",
      },
      SuccessRPA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful RPA (RMC parameter adjustment) primitives.",
      },
      SuccessTIGA = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        description = "This parameter reports a count of the successful TIGA (transmitter initiated gain adjustment) primitives.",
      },
    }
  }
}

Multi_FAST_Line_i_Stats_QuarterHour_.get = {
  ErroredSecs = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "es", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SeverelyErroredSecs = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "ses", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LOSS = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "los", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  LORS = function(mapping, param, key)
    return "0"
  end,
  UAS = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "uas", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXUC = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "rtx", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  RTXTX = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "rtx", "us", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessBSW = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "bswCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessSRA = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "sraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessFRA = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "fraCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessRPA = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "rpaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
  SuccessTIGA = function(mapping, param, key)
    return xdslctl.stats("currentquarter", "tigaCompleted", "ds", xdslctlLineIdMap2(key)) or "0"
  end,
}

duplicates = duplicator(Multi_FAST_Line_i_Stats_QuarterHour_, "#ROOT", { "InternetGatewayDevice.X_000E50_FAST", "Device.FAST" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end
