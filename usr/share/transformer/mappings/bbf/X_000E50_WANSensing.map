local Multi_X_000E50_WANSensing_ = {
  objectType = {
    name = "#ROOT.X_000E50_WANSensing.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      L2Type = {
        access = "readOnly",
        type = "string",
        max = "32",
      },
      L3Type = {
        access = "readOnly",
        type = "string",
        max = "32",
      },
      InitMode = {
        access = "readWrite",
        type = "string",
        max = "32",
      },
      AutoFailover = {
        access = "readWrite",
        type = "boolean",
      },
      AutoFailoverMaxWait = {
        access = "readWrite",
        type = "unsignedInt",
      },
      WANSupervision = {
        access = "readWrite",
        type = "string",
        enumeration = {
            "BFD",
            "DNS",
            "Disabled",
          },
      },
    }
  }
}

----------------------------------------------------------
-- Local definitions
-- -------------------------------------------------------
local uci_helper = mapper("ucihelper")
local binding={config="wansensing", sectionname="global"}
local binding_mobiled = {config = "mobiled", sectionname = "device"}
local transactions = {}

----------------------------------------------------------
-- Mapper implementation
----------------------------------------------------------

Multi_X_000E50_WANSensing_.get = {
  Enable = function(mapping)
    binding.option = "enable"
    return uci_helper.get_from_uci(binding)
  end,
  L2Type = function(mapping)
    binding.option = "l2type"
    return uci_helper.get_from_uci(binding)
  end,
  L3Type =function(mapping)
    binding.option = "l3type"
    return uci_helper.get_from_uci(binding)
  end,
  InitMode = function(mapping)
    binding.option = "initmode"
    return uci_helper.get_from_uci(binding)
  end,
  AutoFailover = function(mapping)
    binding.option = "autofailover"
    return uci_helper.get_from_uci(binding)
  end,
  AutoFailoverMaxWait = function(mapping)
    binding.option = "autofailovermaxwait"
    return uci_helper.get_from_uci(binding)
  end,
  WANSupervision = function(mapping)
    binding.option = "supervision_mode"
    return uci_helper.get_from_uci(binding)
  end,
}

Multi_X_000E50_WANSensing_.getall = function(mapping)
  local allValues = uci_helper.getall_from_uci(binding)
  return {
    Enable = allValues.enable or '',
    L2Type = allValues.l2type or '',
    L3Type = allValues.l3type or '',
    InitMode = allValues.initmode or '',
    AutoFailover = allValues.autofailover or '0',
    AutoFailoverMaxWait = allValues.autofailovermaxwait or '',
    WANSupervision = allValues.supervision_mode or ""
  }
end

Multi_X_000E50_WANSensing_.set = {
  Enable = function(mapping, param, value)
    binding.option = "enable"
    uci_helper.set_on_uci(binding, value, commitapply)
    transactions[binding.config] = true
  end,
  AutoFailover = function(mapping, param, value)
    binding.option = "autofailover"
    uci_helper.set_on_uci(binding, value, commitapply)
    transactions[binding.config] = true
  end,
  AutoFailoverMaxWait = function(mapping, param, value)
    binding.option = "autofailovermaxwait"
    uci_helper.set_on_uci(binding, value, commitapply)
    transactions[binding.config] = true

    binding_mobiled.sectionname = "device_customer_defaults"
    binding_mobiled.option = "maximum_attach_delay"
    local dev = uci_helper.getall_from_uci(binding_mobiled)
    if not dev['.name'] then
      return nil, "Section not present in mobiled"
    end
    uci_helper.set_on_uci(binding_mobiled, value, commitapply)

    binding_mobiled.sectionname = "device"
    uci_helper.foreach_on_uci(binding_mobiled, function(s)
      binding_mobiled.sectionname = s[".name"]
      uci_helper.set_on_uci(binding_mobiled, value, commitapply)
    end)

    transactions[binding_mobiled.config] = true
  end,
  InitMode = function(mapping, param, value)
    local state_binding = {config = "wansensing", sectionname = "L2State"}
    local isLxState = false
    uci_helper.foreach_on_uci(state_binding, function(s)
      if s['name'] == value then
        isLxState = true
        return false  -- exit loop
      end
    end)
    if not isLxState then
      state_binding.sectionname = "L3State"
      uci_helper.foreach_on_uci(state_binding, function(s)
         if s['name'] == value then
           isLxState = true
           return false  -- exit loop
         end
      end)
    end

    if isLxState then
      binding.option = "initmode"
      uci_helper.set_on_uci(binding, value, commitapply)
      transactions[binding.config] = true
    else
      return nil, "Invalid value for InitMode"
    end
  end,
  WANSupervision = function(mapping, param, value)
    binding.option = "supervision_mode"
    uci_helper.set_on_uci(binding, value, commitapply)
    transactions[binding.config] = true
  end,
}

Multi_X_000E50_WANSensing_.commit = function()
  local binding = {}
  for config,_ in pairs(transactions) do
    binding.config = config
    uci_helper.commit(binding)
  end
  transactions = {}
end

Multi_X_000E50_WANSensing_.revert = function()
  local binding = {}
  for config,_ in pairs(transactions) do
    binding.config = config
    uci_helper.revert(binding)
  end
  transactions = {}
end


--Wansensing Worker Section

local Multi_X_000E50_WANSensing_Worker_ = {
			objectType = {
				name = "#ROOT.X_000E50_WANSensing.Worker.{i}.",
				access = "readOnly",
				minEntries = 1,
				maxEntries = math.huge,
				--aliasParameter = "Alias",
				parameters = {
					Name = {
						access = "readWrite",
						type = "string",
						},
					Enable = {
						access = "readWrite",
						type = "boolean",
						},
					Toggle_Time = {
						access = "readWrite",
						type = "string",
						},
					Mains = {
						access = "readWrite",
						type = "string",
						},
				},
			},
		}
		

local worker_binding={config="wansensing", type = "worker", options={Name = "name", Enable = "enable", Toggle_Time = "toggle_time", Mains = "mains"}}
local transactions = {}

local function GetSetUCI(mapping, paramname, key, set, value)
	local binding ={config = "wansensing"}
	local result
	binding.sectionname = key
	binding.option = mapping.binding.options[paramname]
	if set then
		uci_helper.set_on_uci(binding, value, commitapply)
		transactions[binding] = true
	else
		result = uci_helper.get_from_uci(binding)
		return result or ""
	end
end


--needed if mapping is wanted to be correct
Multi_X_000E50_WANSensing_Worker_.binding = worker_binding

--Needed always
Multi_X_000E50_WANSensing_Worker_.entries=function()
	local binding = {config = "wansensing"}
  local entries = {}
  binding.sectionname = "worker"
  uci_helper.foreach_on_uci(binding, function(s)
    entries[#entries + 1]  = s[".name"]
  end)
  return entries
end

Multi_X_000E50_WANSensing_Worker_.get={

	Name = function(mapping, paramname, key)
		return GetSetUCI(mapping, paramname, key, false)
  end,
	Enable = function(mapping, paramname, key)
		return GetSetUCI(mapping, paramname, key, false)
  end,
	Toggle_Time = function(mapping, paramname, key)
		return GetSetUCI(mapping, paramname, key, false)
  end,
	Mains = function(mapping, paramname, key)
		return GetSetUCI(mapping, paramname, key, false)
  end,	

}

Multi_X_000E50_WANSensing_Worker_.set={

	Name = function(mapping, paramname, value, key)
		GetSetUCI(mapping, paramname, key, true, value)
	end,
	Enable = function(mapping, paramname, value, key)
		GetSetUCI(mapping, paramname, key, true, value)
	end,
	Toggle_Time = function(mapping, paramname, value, key)
		GetSetUCI(mapping, paramname, key, true, value)
	end,
	Mains = function(mapping, paramname, value, key)
		GetSetUCI(mapping, paramname, key, true, value)
	end,

}

Multi_X_000E50_WANSensing_Worker_.commit=function()
	for binding in pairs(transactions) do
    uci_helper.commit(binding)
  end
  transactions = {}
end

Multi_X_000E50_WANSensing_Worker_.revert = function()
  for binding in pairs(transactions) do
    uci_helper.revert(binding)
  end
  transactions = {}
end


local duplicator = mapper("multiroot").duplicate
local Tab_to_reg = {
	Multi_X_000E50_WANSensing_,
	Multi_X_000E50_WANSensing_Worker_
	}
	
for i,v in ipairs(Tab_to_reg) do
	local duplicates = duplicator(v, "#ROOT", {"InternetGatewayDevice", "Device.DeviceInfo.NetworkProperties"})
	for _, dupli in ipairs(duplicates) do
		register(dupli)
	end
end
