--Automatically generated from InternetGatewayDevice:1.14
-- using generator version 2.3
local Multi_QueueManagement_Queue_i_ = {
  objectType = {
    name = "#ROOT.{i}.",
    access = "readOnly",
    numEntriesParameter = "QueueNumberOfEntries",
    enableParameter = "QueueEnable",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
--[[ TODO
      QueueKey = {
        access = "readOnly",
        status = "obsoleted",
        type = "unsignedInt",
      },
--]]
      QueueEnable = {
        access = "readOnly",
        type = "boolean",
        default = "false",
      },
      QueueStatus = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Disabled",
          "Enabled",
          "Error",
        },
        default = "Disabled",
      },
--[[ TODO
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
      },
--]]
      TrafficClasses = {
        access = "readWrite",
        list = true,
        max = "256",
        type = "unsignedInt",
        default = "",
      },
--[[ TODO
      QueueInterface = {
        access = "readWrite",
        type = "string",
        max = "256",
        default = "",
      },
      QueueBufferLength = {
        access = "readOnly",
        type = "unsignedInt",
      },
--]]
      QueueWeight = {
        access = "readWrite",
        type = "unsignedInt",
        default = "0",
      },
      QueuePrecedence = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1",
          },
        },
        default = "1",
      },
--[[ TODO
      REDThreshold = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            max = "100",
          },
        },
        default = "0",
      },
      REDPercentage = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            max = "100",
          },
        },
        default = "0",
      },
      DropAlgorithm = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "RED",
          "DT",
          "WRED",
          "BLUE",
        },
        default = "DT",
      },
--]]
      SchedulerAlgorithm = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "WFQ",
          "WRR",
          "SP",
        },
        default = "SP",
      },
--[[ TODO
      ShapingRate = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
          },
        },
        default = "-1",
      },
      ShapingBurstSize = {
        access = "readWrite",
        type = "unsignedInt",
        default = "0",
      },
--]]
      Enable = {
        access = "readOnly",
        type = "boolean",
        default = "false",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Disabled",
          "Enabled",
          "Error_Misconfigured",
          "Error",
        },
      default = "Disabled",
      },
--[[ TODO
      Interface = {
        access = "readWrite",
        type = "string",
        max = "256",
        pathRef = true,
        default = "",
      },
      AllInterfaces = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      HardwareAssisted = {
        access = "readOnly",
        type = "boolean",
        default = "false",
      },
      BufferLength = {
        access = "readOnly",
        type = "unsignedInt",
      },
--]]
      Weight = {
        access = "readWrite",
        type = "unsignedInt",
        default = "0",
      },
      Precedence = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1",
          },
        },
        default = "1",
      },
    }
  }
}

local uciHelper = mapper("ucihelper")
local qosBinding = { config = "qos" }
local forEachOnUci = uciHelper.foreach_on_uci
local getAllFromUci = uciHelper.getall_from_uci
local configChanged = false

local function setUciValue(sectionName, option, value)
  qosBinding.sectionname = sectionName
  qosBinding.option = option
  uciHelper.set_on_uci(qosBinding, value, commitApply)
  configChanged = true
end

local function getUciValue(sectionName,paramName,default)
  qosBinding.sectionname = sectionName
  qosBinding.option = paramName
  qosBinding.default = default
  return uciHelper.get_from_uci(qosBinding)
end

local queueParamMap = {
  Weight = "weight",
  QueueWeight = "weight",
  Precedence = "priority",
  QueuePrecedence = "priority",
  TrafficClasses = "trafficid",
  SchedulerAlgorithm = "policy",
}

local lookUp = {
  sp = "SP",
  wrr = "WRR",
  wfq = "WFQ",
}

local function convertStringToTable(str)
  local tbl={}
  -- uci entries of type "list" are interpretted as 'table' when they have multiple elements,
  -- and interpretted as 'string' when they have a single element. So, handle 'table' types before processing.
  if type(str) == 'table' then
    return str
  end
  -- if the input string is a single element, then only one entry is added into the table
  -- if it is a comma separated list, then all the comma separated entries are added into the table.
  for item in string.gmatch(str or "", "([^,]+),?") do
     tbl[#tbl + 1] = item
  end
  -- If the input is an empty string, then we return a table with one element containing ""
  return #tbl > 0 and tbl or {""}
end

Multi_QueueManagement_Queue_i_.entries = function(mapping)
  qosBinding.sectionname = "class"
  local queueEntry = {}
  forEachOnUci(qosBinding,function(s)
    queueEntry[#queueEntry + 1] = s[".name"]
  end)
  return queueEntry
end

local function getSchedulerAlgorithm(mapping, param, key)
  qosBinding.sectionname = "classgroup"
  local SchedulerAlgo
  forEachOnUci(qosBinding, function(s)
    if string.match(s.classes,key) then
      SchedulerAlgo = s.policy
      return false
    end
  end)
  return lookUp[SchedulerAlgo] and lookUp[SchedulerAlgo] or "sp"
end

Multi_QueueManagement_Queue_i_.get = {
  QueueEnable = "1", -- always enabled, since there is no lower layer support available
  Enable = "1", -- always enabled, since there is no lower layer support available
  Status  = "Enabled", -- always enabled, since there is no lower layer support available
  QueueStatus  = "Enabled", -- always enabled, since there is no lower layer support available
  TrafficClasses = function(mapping, param, key)
    local TrafficidList = getUciValue(key, queueParamMap[param], {})
    local TrafficidStr = table.concat(TrafficidList, ',')
    return TrafficidStr
  end,
  QueueWeight = function(mapping, param, key)
    return getUciValue(key, queueParamMap[param], "0")
  end,
  Weight = function(mapping, param, key)
    return getUciValue(key, queueParamMap[param], "0")
  end,
  QueuePrecedence  = function(mapping, param, key)
    return getUciValue(key, queueParamMap[param], "0")
  end,
  Precedence = function(mapping, param, key)
    return getUciValue(key, queueParamMap[param], "0")
  end,
  SchedulerAlgorithm = getSchedulerAlgorithm
}

Multi_QueueManagement_Queue_i_.getall = function(mapping,key)
  qosBinding.sectionname = key
  qosBinding.option = nil
  local qosValues = getAllFromUci(qosBinding)
  return {
    TrafficClasses = qosValues["trafficid"] and table.concat(qosValues["trafficid"], ',') or "",
    QueueWeight = qosValues["weight"] and qosValues["weight"] or "0",
    Weight = qosValues["weight"] and qosValues["weight"] or "0",
    QueuePrecedence = qosValues["priority"] and qosValues["priority"] or "0",
    Precedence = qosValues["priority"] and qosValues["priority"] or "0",
  }
end

Multi_QueueManagement_Queue_i_.set = {
  TrafficClasses = function(mapping, param, value, key)
    local trafficTable = convertStringToTable(value)
    setUciValue(key, queueParamMap[param], trafficTable)
  end,
  QueueWeight = function(mapping, param, value, key)
    setUciValue(key, queueParamMap[param], value)
  end,
  Weight = function(mapping, param, value, key)
    setUciValue(key, queueParamMap[param], value)
  end,
  QueuePrecedence = function(mapping, param, value, key)
    setUciValue(key, queueParamMap[param], value)
  end,
  Precedence = function(mapping, param, value, key)
    setUciValue(key, queueParamMap[param], value)
  end,
  SchedulerAlgorithm = function(mapping, param, value, key)
    qosBinding.sectionname = "classgroup"
    forEachOnUci(qosBinding, function(s)
      if string.match(s.classes,key) then
        setUciValue(s[".name"], queueParamMap[param], string.lower(value))
        return false
      end
    end)
  end
}

Multi_QueueManagement_Queue_i_.commit = function()
  if configChanged then
    uciHelper.commit(qosBinding)
    configChanged = false
  end
end

Multi_QueueManagement_Queue_i_.revert = function()
  if configChanged then
    uciHelper.revert(qosBinding)
    configChanged = false
  end
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_QueueManagement_Queue_i_, "#ROOT", {"InternetGatewayDevice.QueueManagement.Queue", "Device.QoS.Queue"})
for _, dupli in ipairs(duplicates) do
  if dupli.objectType.name:match('^InternetGatewayDevice.') then
    -- Remove device2-specific parameters from igd
    dupli.objectType.parameters.Enable = nil
    dupli.objectType.parameters.Status = nil
    dupli.objectType.parameters.Weight = nil
    dupli.objectType.parameters.Precedence = nil
  else
    -- Remove igd-specific parameters from device2
    dupli.objectType.parameters.QueueEnable = nil
    dupli.objectType.parameters.QueueStatus = nil
    dupli.objectType.parameters.QueueWeight = nil
    dupli.objectType.parameters.QueuePrecedence =  nil
  end
  register(dupli)
end
