local Multi_X_000E50_wifi_doctor_agent_ = {
  objectType = {
    name = "#ROOT.X_000E50_WiFiDoctorAgent.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enabled = {
        access = "readWrite",
        type = "boolean",
      },
      URL = {
        access = "readWrite",
        type = "string",
      },
      BufferSize = {
        access = "readWrite",
        type = "unsignedInt",
      },
      ReportingPeriod = {
        access = "readWrite",
        type = "unsignedInt",
      },
      ActiveRadio = {
        access = "readWrite",
        type = "string",
      },
      AuthPasswd = {
        access = "readWrite",
        hidden = "true",
        type = "string",
      },
      Status = {
        description = "Indicates the overall status of the Wi-Fi Dr onboarding for any boosters and gateways",
        access = "readOnly",
        type = "string",
        enumeration = {
          "On",
          "Off",
          "Error",
        },
      },
      OnboardingStart = {
        description = "Parameter to trigger the Wi-Fi Dr onboarding",
        access = "readWrite",
        type = "boolean",
      },
      OnboardingStatus = {
        description = "Indicates the overall status of the Wi-Fi Dr onboarding for any boosters and gateways",
        access = "readOnly",
        type = "string",
        enumeration = {
          "NEEDED",
          "IN_PROGRESS",
          "FAILED",
          "SUCCESS",
        },
      }
    }
  }
}

local Multi_X_000E50_wifi_doctor_agent_radio_ = {
  objectType = {
    name = "#ROOT.X_000E50_WiFiDoctorAgent.Radio.{i}.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      Name = {
        access = "readOnly",
        type = "string",
      },
      ACSAllowedChannels = {
        access = "readWrite",
        type = "string",
      },
    }
  }
}

----------------------------------------------------------
-- Local definitions
-- -------------------------------------------------------
local commitapply, mapper = commitapply, mapper
local uci_helper = mapper("ucihelper")
local binding={config="wifi_doctor_agent", sectionname="config"}
local bindingWireless={config="wireless"}
local binding_vendorextension = { config = "vendorextensions", sectionname = "multiap_vendorextensions", option = "onboardingstatus", default = "NEEDED" }
local bindingAuth={config="wifi_doctor_agent", sectionname="as_config"}
local setSomething
local setSomethingRadio
local ubus = mapper("ubus").connect()

local radios = {}
uci_helper.foreach_on_uci(bindingWireless, function(s)
  if s['.type'] == 'wifi-device' then
    radios[#radios + 1] = s['.name']
  end
end)

----------------------------------------------------------
-- Mapper implementation
----------------------------------------------------------

-- wifi_doctor_agent_

local function get_agent_oper_state()
  local wda_service = ubus:call("service", "list", { name = "wifi-doctor-agent" })
  wda_service = wda_service["wifi-doctor-agent"] and wda_service["wifi-doctor-agent"]["instances"] and wda_service["wifi-doctor-agent"]["instances"]["wifi-doctor-agent"] or {}
  return wda_service.running and "1" or "0"
end

local function getStatus()
  local agent_oper_state = get_agent_oper_state()
  binding.option = "enabled"
  binding.default = "0"
  local agent_admin_state = uci_helper.get_from_uci(binding)
  if agent_admin_state ~=  agent_oper_state then
    return "Error"
  end
  return agent_oper_state == "1" and "On" or "Off"
end

Multi_X_000E50_wifi_doctor_agent_.get = {
  Enabled = function(mapping)
    binding.option = "enabled"
    binding.default = "0"
    return uci_helper.get_from_uci(binding)
  end,
  URL = function(mapping)
    binding.option = "cs_url"
    binding.default = ""
    return uci_helper.get_from_uci(binding)
  end,
  BufferSize = function(mapping)
    binding.option = "cs_buf_sz"
    binding.default = "0"
    return uci_helper.get_from_uci(binding)
  end,
  ReportingPeriod = function(mapping)
    binding.option = "cs_buf_period"
    binding.default = "0"
    return uci_helper.get_from_uci(binding)
  end,
  ActiveRadio = function(mapping)
    binding.option = "active_radio"
    binding.default = ""
    return uci_helper.get_from_uci(binding)
  end,
  AuthPasswd = function(mapping)
    return ""
  end,
  Status = getStatus,
  OnboardingStart = "0",
  OnboardingStatus = function()
     return uci_helper.get_from_uci(binding_vendorextension)
  end,
}

Multi_X_000E50_wifi_doctor_agent_.getall = function(mapping)
  local allValues = uci_helper.getall_from_uci(binding)
  return {
    Enabled = allValues.enabled or "0",
    URL = allValues.cs_url or "",
    BufferSize = allValues.cs_buf_sz or "0",
    ReportingPeriod = allValues.cs_buf_period or "0",
    ActiveRadio = allValues.active_radio or "",
    AuthPasswd = "",
    Status = getStatus() or "",
    OnboardingStart = "0",
    OnboardingStatus = uci_helper.get_from_uci(binding_vendorextension)
  }
end

local function checkValue(binding, newValue)
  local oldValue = uci_helper.get_from_uci(binding)
  if newValue ~= oldValue then
    return true
  end
end

Multi_X_000E50_wifi_doctor_agent_.set = {
  Enabled = function(mapping, param, value)
    binding.option = "enabled"
    if checkValue(binding, value) then
      uci_helper.set_on_uci(binding, value, commitapply)
      setSomething = true
    end
  end,
  URL = function(mapping, param, value)
    binding.option = "cs_url"
    if checkValue(binding, value) then
      uci_helper.set_on_uci(binding, value, commitapply)
      setSomething = true
    end
  end,
  BufferSize = function(mapping, param, value)
    binding.option = "cs_buf_sz"
    if checkValue(binding, value) then
      uci_helper.set_on_uci(binding, value, commitapply)
      setSomething = true
    end
  end,
  ReportingPeriod = function(mapping, param, value)
    binding.option = "cs_buf_period"
    if checkValue(binding, value) then
      uci_helper.set_on_uci(binding, value, commitapply)
      setSomething = true
    end
  end,
  ActiveRadio = function(mapping, param, value)
    binding.option = "active_radio"
    if checkValue(binding, value) then
      uci_helper.set_on_uci(binding, value, commitapply)
      setSomething = true
    end
  end,
  AuthPasswd = function(mapping, param, value)
    bindingAuth.option = "passwd"
    if checkValue(bindingAuth, value) then
      uci_helper.set_on_uci(bindingAuth, value, commitapply)
      setSomething = true
    end
  end,
  OnboardingStart = function(_, _, value)
    if value == "1" then
      commitapply:newset("WifiDrOnboardingStart")
    end
  end,
}

Multi_X_000E50_wifi_doctor_agent_.commit = function()
  if setSomething then
    uci_helper.commit(binding)
    setSomething = nil
  end
end

Multi_X_000E50_wifi_doctor_agent_.revert = function()
  if setSomething then
    uci_helper.revert(binding)
    setSomething = nil
  end
end

-- wifi_doctor_agent_radio_

Multi_X_000E50_wifi_doctor_agent_radio_.entries = function()
  return radios
end

Multi_X_000E50_wifi_doctor_agent_radio_.get = {
  ACSAllowedChannels = function(mapping, paramName, key)
    bindingWireless.option = "acs_allowed_channels"
    bindingWireless.default = ""
    bindingWireless.sectionname = key
    return uci_helper.get_from_uci(bindingWireless)
  end,
  Name = function(mappingiWireless, paramName, key)
    return key
  end,
}

Multi_X_000E50_wifi_doctor_agent_radio_.set = {
  ACSAllowedChannels = function(mapping, param, value, key)
    bindingWireless.option = "acs_allowed_channels"
    bindingWireless.sectionname = key
    uci_helper.set_on_uci(bindingWireless, value, commitapply)
    setSomethingRadio = true
  end,
}

Multi_X_000E50_wifi_doctor_agent_radio_.commit = function()
  if setSomethingRadio then
    uci_helper.commit(bindingWireless)
    setSomethingRadio = nil
  end
end

Multi_X_000E50_wifi_doctor_agent_radio_.revert = function()
  if setSomethingRadio then
    uci_helper.revert(bindingWireless)
    setSomethingRadio = nil
  end
end

-- register wifi_doctor_agent_

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_X_000E50_wifi_doctor_agent_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
    register(dupli)
end

-- register wifi_doctor_agent_radio_

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_X_000E50_wifi_doctor_agent_radio_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
    register(dupli)
end
