-- Automatically generated from Device:2.10
-- using generator version 2.3
local Multi_DynamicDNS_ = {
  objectType = {
    name = "#ROOT.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      -- ClientNumberOfEntries
      -- automatically created when Device.DynamicDNS.Client.{i}. is loaded
      -- ServerNumberOfEntries
      -- automatically created when Device.DynamicDNS.Server.{i}. is loaded
      SupportedServices = {
        access = "readOnly",
        list = true,
        max = "1024",
        type = "string",
      },
    }
  }
}

local lfs = require("lfs")

local serviceFiles = { "/etc/ddns/services", "/etc/ddns/services_ipv6" }
local supportedServices = ""
local lastModifiedTime = {}

-- This function returns true if the services files are modified otherwise false
-- If the files are modified, then the lastModifiedTime has to be updated
local function serviceListModified()
  -- This variable is used to check whether the service file is modified
  local serviceModified = false
  for _, file in ipairs(serviceFiles) do
    local prev = lastModifiedTime[file]
    local modifiedTime = lfs.attributes(file, "modification") or ""
    if not prev or prev ~= modifiedTime then
      -- Updating the lastModifiedTime since the service file is modified
      lastModifiedTime[file] = modifiedTime
      serviceModified = true
    end
  end
  return serviceModified
end

local function loadServices()
  local services = {}
  local servicesList = {}
  for _, file in ipairs(serviceFiles) do
    local fd = io.open(file)
    if fd then
      for line in fd:lines() do
        local service = line:match("^(%S+)")
        if not services[service] then
          services[service] = true
          servicesList[#servicesList + 1] = service
        end
      end
      fd:close()
    end
  end
  return servicesList
end

local function getSupportedServices()
  if serviceListModified() then
    local services = loadServices()
    supportedServices = table.concat(services, ',')
  end
  return supportedServices
end

Multi_DynamicDNS_.get = function()
  return getSupportedServices()
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_DynamicDNS_, "#ROOT", { "InternetGatewayDevice.X_000E50_DynamicDNS", "Device.DynamicDNS" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end
