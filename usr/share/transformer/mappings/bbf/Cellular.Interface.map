local mapper, string, table, commitapply = mapper, string, table, commitapply
local helper = require("mobiled.scripthelpers")

local obj = {
	objectType = {
		name = "#ROOT.{i}.",
		access = "readOnly",
		numEntriesParameter = "InterfaceNumberOfEntries",
		minEntries = 0,
		maxEntries = math.huge,
		aliasParameter = "Alias",
		parameters = {
			Enable = {
				access = "readWrite",
				type = "boolean",
				default = "true"
			},
			Status = {
				access = "readOnly",
				type = "string",
				enumeration = {
					"Up",
					"Down",
					"Unknown",
					"Dormant",
					"NotPresent",
					"LowerLayerDown",
					"Error"
				}
			},
			Alias = {
				access = "readWrite",
				activeNotify = "canDeny",
				type = "string",
				max = "64",
			},
			Name = {
				access = "readOnly",
				type = "string",
				max = "64"
			},
			LowerLayers = {
				access = "readOnly",
				type = "string",
				list = true,
				max = "1024",
				pathRef = true
			},
			Upstream = {
				access = "readOnly",
				type = "boolean",
				default = "true"
			},
			IMEI = {
				access = "readOnly",
				type = "string",
				min = "15",
				max = "15"
			},
			SupportedAccessTechnologies = {
				access = "readOnly",
				type = "string",
				enumeration = {
					"GPRS",
					"EDGE",
					"UMTS",
					"UMTSHSPA",
					"CDMA2000OneX",
					"CDMA2000HRPD",
					"LTE"
				}
			},
			PreferredAccessTechnology = {
				access = "readWrite",
				type = "string"
			},
			CurrentAccessTechnology = {
				access = "readOnly",
				type = "string"
			},
			AvailableNetworks = {
				access = "readOnly",
				type = "string"
			},
			NetworkRequested = {
				access = "readWrite",
				type = "string",
				max = "64"
			},
			NetworkInUse = {
				access = "readOnly",
				type = "string",
				max = "64"
			},
			RSSI = {
				access = "readOnly",
				type = "int",
			},
			UpstreamMaxBitRate = {
				access = "readOnly",
				type = "unsignedInt",
			},
			DownstreamMaxBitRate = {
				access = "readOnly",
				type = "unsignedInt",
			},
			X_000E50_SoftwareVersion = {
				access = "readOnly",
				type = "string",
				max = "64",
			},
			X_000E50_HardwareVersion = {
				access = "readOnly",
				type = "string",
				max = "64",
			}
		}
	}
}

local uci_helper = mapper("ucihelper")
local getUbusData = helper.getUbusData
local conn = mapper("ubus").connect()
if not conn then
	return
end

local transactions = {}
local function getFromMobiledDevice(key, param, imei)
	local data
	uci_helper.foreach_on_uci({config="mobiled", sectionname="device"}, function(s)
		if s.imei == imei then
		  data = s[param] or ""
			return false
		end
	end)
	return data or ""
end

local function setOnMobiledDevice(key, param, val)
	local info = getUbusData(conn, "mobiled.device", "get", { dev_idx = 1 })
	uci_helper.foreach_on_uci({config="mobiled", sectionname="device"}, function(s)
		if s.imei == info.imei then
		  local binding={sectionname=s[".name"],config="mobiled",option=param,default=""}
		  uci_helper.set_on_uci(binding, val, commitapply)
		  transactions[binding.config] = true
		  return false
		end
	end)
end

obj.entries = function(mapping)
	return { "cellular_interface_1" }
end

local tech_map_mobiled = {
	["lte"] = "LTE",
	["gsm"] = "EDGE",
	["umts"] = "UMTS"
}

local tech_map_device2 = {
	["LTE"] = "lte",
	["EDGE"] = "gsm",
	["GPRS"] = "gsm",
	["UMTS"] = "umts",
	["UMTSHSPA"] = "umts",
	["CDMA2000OneX"] = "cdma",
	["CDMA2000HRPD"] = "cdma"
}

local function getall(mapping, key)
	local data = {}
	local dev_idx = 1

	data.LowerLayers = ""
	data.Upstream = "1"
	data.AvailableNetworks = ""
	data.UpstreamMaxBitRate = ""
	data.DownstreamMaxBitRate = ""

	local info = getUbusData(conn, "mobiled.device", "get", { dev_idx = dev_idx })
	local imei = info.imei
	data.Name = info.dev_desc
	data.IMEI = imei
	data.Enable = getFromMobiledDevice(key, "enabled", imei)
	data.X_000E50_SoftwareVersion = info.software_version
	data.X_000E50_HardwareVersion = info.hardware_version

	info = getUbusData(conn, "mobiled.radio", "signal_quality", { dev_idx = dev_idx })
	data.RSSI = info.rssi
	data.CurrentAccessTechnology = tech_map_mobiled[info.radio_interface] or ""
	data.PreferredAccessTechnology = tech_map_mobiled[getFromMobiledDevice(key, "radio_pref", imei)] or "Auto"

	info = getUbusData(conn, "mobiled.device", "capabilities", { dev_idx = dev_idx })
	local modes = {}
	for mode in string.gmatch(info.supported_modes, "%w+") do
		table.insert(modes, tech_map_mobiled[mode])
	end
	data.SupportedAccessTechnologies = table.concat(modes, ",")

	data.Status = "Down"
	data.NetworkInUse = ""

	if data.Enable == "1" then
		info = getUbusData(conn, "mobiled.network", "serving_system", { dev_idx = dev_idx })
		local networkState = info.nas_state
		if type(info.plmn_info) == "table" then
			data.NetworkInUse = info.plmn_info.mcc .. info.plmn_info.mnc
		end

		if type(info.connection_rate) == "table" then
			data.UpstreamMaxBitRate = info.connection_rate.max_tx_rate or ""
			data.DownstreamMaxBitRate = info.connection_rate.max_rx_rate or ""
		end

		info = getUbusData(conn, "mobiled.network", "sessions", { session_id = 0, dev_idx = dev_idx })
		local sessionState = info.session_state

		if networkState == "registered" then
			if sessionState == "" then
				data.Status = "Dormant"
			else
				if sessionState == "connected" then
					data.Status = "Up"
				end
			end
		end
	end

	info = getUbusData(conn, "mobiled.network", "scan", { dev_idx = dev_idx })
	local networks = {}
	if info and type(info.network_scan_list) == "table" then
		for _, scan_result in pairs(info.network_scan_list) do
			if type(scan_result) == "table" then
				if type(scan_result.plmn_info) == "table" then
					table.insert(networks, scan_result.plmn_info.mcc .. scan_result.plmn_info.mnc)
				end
			end
		end
	end

	data.AvailableNetworks = table.concat(networks, ",")

	data.NetworkRequested = getFromMobiledDevice(key, 'mcc', imei) .. getFromMobiledDevice(key, 'mnc', imei)

	return data
end

local function get(mapping, paramName, key)
	return getall(mapping, key)[paramName]
end

obj.set = {
	PreferredAccessTechnology = function(mapping, paramname, paramvalue, key)
		local val = tech_map_device2[paramvalue] or "auto"
		setOnMobiledDevice(key, 'radio_pref', val)
	end,
	NetworkRequested = function(mapping, paramname, paramvalue, key)
		if #paramvalue == 5 or #paramvalue == 6 then
			setOnMobiledDevice(key, 'mcc', string.sub(paramvalue, 1, 3))
			setOnMobiledDevice(key, 'mnc', string.sub(paramvalue, 1, 4))
		end
	end,
	Enable = function(mapping, paramname, paramvalue, key)
		setOnMobiledDevice(key, 'enabled', paramvalue)
		local binding={config="wansensing", sectionname="global", option="autofailover"}
		uci_helper.set_on_uci(binding, paramvalue, commitapply)
		transactions[binding.config] = true
	end
}
local function commit()
    local binding = {}
    for config,_ in pairs(transactions) do
        binding.config = config
        uci_helper.commit(binding)
    end
    transactions = {}
end
local function revert()
    local binding = {}
    for config,_ in pairs(transactions) do
        binding.config = config
        uci_helper.revert(binding)
    end
    transactions = {}
end

obj.commit = commit
obj.revert = revert
obj.getall = getall
obj.get = get

local function mobiled_event(mapping, event, msg)
	if msg["event"] and (msg["event"] == "firmware_upgrade_done" or msg["event"] == "firmware_upgrade_failed") and msg["dev_idx"] then
		return {{ key = "cellular_interface_1", paramname = "X_000E50_SoftwareVersion" }}
	end
end

obj.add_watchers = function(mapping)
	local ubus_evsrc = eventsource("ubus")
	ubus_evsrc.watch_event(mapping, mobiled_event, "mobiled")
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(obj, "#ROOT", {"InternetGatewayDevice.X_000E50_Cellular.Interface", "Device.Cellular.Interface"})
for _, dupli in ipairs(duplicates) do
	register(dupli)
end
