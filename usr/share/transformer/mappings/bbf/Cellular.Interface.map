local mapper, tonumber, string, table, commitapply = mapper, tonumber, string, table, commitapply
local helper = require("mobiled.scripthelpers")
local uci = require("uci")

local obj = {
	objectType = {
		name = "#ROOT.{i}.",
		access = "readOnly",
		numEntriesParameter = "InterfaceNumberOfEntries",
		minEntries = 0,
		maxEntries = math.huge,
		aliasParameter = "Alias",
		parameters = {
			Enable = {
				access = "readWrite",
				type = "boolean",
				default = "true"
			},
			Status = {
				access = "readOnly",
				type = "string",
				enumeration = {
					"Up",
					"Down",
					"Unknown",
					"Dormant",
					"NotPresent",
					"LowerLayerDown",
					"Error"
				}
			},
			Alias = {
				access = "readWrite",
				activeNotify = "canDeny",
				type = "string",
				max = "64",
			},
			Name = {
				access = "readOnly",
				type = "string",
				max = "64"
			},
			Upstream = {
				access = "readOnly",
				type = "boolean",
				default = "true"
			},
			IMEI = {
				access = "readOnly",
				type = "string",
				min = "15",
				max = "15"
			},
			SupportedAccessTechnologies = {
				access = "readOnly",
				type = "string",
				enumeration = {
					"GPRS",
					"EDGE",
					"UMTS",
					"UMTSHSPA",
					"CDMA2000OneX",
					"CDMA2000HRPD",
					"LTE"
				}
			},
			PreferredAccessTechnology = {
				access = "readWrite",
				type = "string"
			},
			CurrentAccessTechnology = {
				access = "readOnly",
				type = "string"
			},
			AvailableNetworks = {
				access = "readOnly",
				type = "string"
			},
			NetworkRequested = {
				access = "readWrite",
				type = "string",
				max = "64"
			},
			NetworkInUse = {
				access = "readOnly",
				type = "string",
				max = "64"
			},
			RSSI = {
				access = "readOnly",
				type = "int",
			},
			UpstreamMaxBitRate = {
				access = "readOnly",
				type = "unsignedInt",
			},
			DownstreamMaxBitRate = {
				access = "readOnly",
				type = "unsignedInt",
			},
			X_000E50_SoftwareVersion = {
				access = "readOnly",
				type = "string",
				max = "64",
			},
			X_000E50_HardwareVersion = {
				access = "readOnly",
				type = "string",
				max = "64",
			}
		}
	},
	aliasDefault = "IMEI"
}

local uci_helper = mapper("ucihelper")
local conn = mapper("ubus").connect()
if not conn then
	return
end

local function getFromMobiledDevice(key, param)
	local c = uci.cursor()
	local data
	c:foreach("mobiled", "device", function(s) 
		if s.imei == key then
			local binding={sectionname=s[".name"],config="mobiled",option=param,default=""}
			data = uci_helper.get_from_uci(binding)
			return false
		end
	end)
	return data or ""
end

local function setOnMobiledDevice(key, param, val)
	local c = uci.cursor()
	c:foreach("mobiled", "device", function(s) 
		if s.imei == key then
			local binding={sectionname=s[".name"],config="mobiled",option=param,default=""}
			uci_helper.set_on_uci(binding, val, commitapply)
			uci_helper.commit(binding)
			return false
		end
	end)
end

obj.entries = function(mapping)
	local info = helper.getUbusData(conn, "mobiled", "status", {})
	local numDevices = tonumber(info.devices)
	if not numDevices then return {} end
	local interfaces = {}
	for i=1,numDevices do
		info = helper.getUbusData(conn, "mobiled.device", "get", { dev_idx = i })
		if info.imei then
			table.insert(interfaces, info.imei)
		end
	end
	return interfaces
end

local tech_map_mobiled = {
	["lte"] = "LTE",
	["gsm"] = "EDGE",
	["umts"] = "UMTS"
}

local tech_map_device2 = {
	["LTE"] = "lte",
	["EDGE"] = "gsm",
	["GPRS"] = "gsm",
	["UMTS"] = "umts",
	["UMTSHSPA"] = "umts",
	["CDMA2000OneX"] = "cdma",
	["CDMA2000HRPD"] = "cdma"
}

local function getall(mapping, key)
	local data = {}
	local info = helper.getUbusData(conn, "mobiled.device", "get", { imei = key })
	local dev_idx = tonumber(info.dev_idx) or 1

	data.Upstream = "1"
	data.AvailableNetworks = ""
	data.UpstreamMaxBitRate = ""
	data.DownstreamMaxBitRate = ""
	data.Enable = getFromMobiledDevice(key, "enabled")

	info = helper.getUbusData(conn, "mobiled.device", "get", { dev_idx = dev_idx })
	data.Name = info.dev_desc
	data.IMEI = info.imei
	data.X_000E50_SoftwareVersion = info.software_version
	data.X_000E50_HardwareVersion = info.hardware_version

	info = helper.getUbusData(conn, "mobiled.radio", "signal_quality", { dev_idx = dev_idx })
	data.RSSI = info.rssi
	data.CurrentAccessTechnology = tech_map_mobiled[info.radio_interface] or ""
	data.PreferredAccessTechnology = tech_map_mobiled[getFromMobiledDevice(key, "radio_pref")] or "Auto"

	info = helper.getUbusData(conn, "mobiled.device", "capabilities", { dev_idx = dev_idx })
	local modes = {}
	for mode in string.gmatch(info.supported_modes, "%w+") do
		table.insert(modes, tech_map_mobiled[mode])
	end
	data.SupportedAccessTechnologies = table.concat(modes, ",")

	data.Status = "Down"
	data.NetworkInUse = ""

	if data.Enable == "1" then
		info = helper.getUbusData(conn, "mobiled.network", "serving_system", { dev_idx = dev_idx })
		local networkState = info.nas_state
		if type(info.plmn_info) == "table" then
			data.NetworkInUse = info.plmn_info.mcc .. info.plmn_info.mnc
		end
		info = helper.getUbusData(conn, "mobiled.network", "sessions", { session_id = 0, dev_idx = dev_idx })
		local sessionState = info.session_state

		if networkState == "registered" then
			if sessionState == "" then
				data.Status = "Dormant"
			else
				if sessionState == "connected" then
					data.Status = "Up"
				end
			end
		end
	end

	info = helper.getUbusData(conn, "mobiled.network", "scan", { dev_idx = dev_idx })
	local networks = {}
	if info and type(info.network_scan_list) == "table" then
		for _, scan_result in pairs(info.network_scan_list) do
			if type(scan_result) == "table" then
				if type(scan_result.plmn_info) == "table" then
					table.insert(networks, scan_result.plmn_info.mcc .. scan_result.plmn_info.mnc)
				end
			end
		end
	end

	data.AvailableNetworks = table.concat(networks, ",")

	data.NetworkRequested = getFromMobiledDevice(key, 'mcc') .. getFromMobiledDevice(key, 'mnc')

	return data
end

local function get(mapping, paramName, key)
	return getall(mapping, key)[paramName]
end

obj.set = {
	PreferredAccessTechnology = function(mapping, paramname, paramvalue, key)
		local val = tech_map_device2[paramvalue] or "auto"
		setOnMobiledDevice(key, 'radio_pref', val)
	end,
	NetworkRequested = function(mapping, paramname, paramvalue, key)
		if #paramvalue == 5 or #paramvalue == 6 then
			setOnMobiledDevice(key, 'mcc', string.sub(paramvalue, 1, 3))
			setOnMobiledDevice(key, 'mnc', string.sub(paramvalue, 1, 4))
		end
	end,
	Enable = function(mapping, paramname, paramvalue, key)
		setOnMobiledDevice(key, 'enabled', paramvalue)
	end
}

obj.getall = getall
obj.get = get

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(obj, "#ROOT", {"InternetGatewayDevice.X_000E50_Cellular.Interface", "Device.Cellular.Interface"})
for _, dupli in ipairs(duplicates) do
	register(dupli)
end
