-- Automatically generated from Device:2.10
-- using generator version 2.3
local Multi_DynamicDNS_Client_i_ = {
  objectType = {
    name = "#ROOT.Client.{i}.",
    access = "readOnly", -- readWrite not supported
    numEntriesParameter = "ClientNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Connecting",
          "Authenticating",
          "Updated",
          "Error_Misconfigured",
          "Error",
          "Disabled",
        },
      },
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
      },
      LastError = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "NO_ERROR",
          "MISCONFIGURATION_ERROR",
          "DNS_ERROR",
          "CONNECTION_ERROR",
          "AUTHENTICATION_ERROR",
          "TIMEOUT_ERROR",
          "PROTOCOL_ERROR",
        },
      },
      Server = {
        access = "readOnly", --readWrite not supported
        type = "string",
        max = "256",
        pathRef = true,
      },
      Interface = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      Username = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      Password = {
        access = "readWrite",
        hidden = "true",
        type = "string",
        max = "256",
      },
      -- HostnameNumberOfEntries
      -- automatically created when Device.DynamicDNS.Client.{i}.Hostname.{i}. is loaded
    }
  }
}
local nwCommon = mapper('nwcommon')
local ddns = require("transformer.shared.ddns")
local uciHelper = mapper("ucihelper")
local forEachOnUci = uciHelper.foreach_on_uci
local splitKey = nwCommon.split_key
local ddnsBinding = { config = "ddns" }
local configChanged = false
local open, pairs, resolve = io.open, pairs, resolve
local wanconn = require("transformer.shared.wanconnection")
local network = require("transformer.shared.common.network")
local getMappingType = network.getMappingType

local paramMap = {
  Enable    = "enabled",
  Server    = "service_name",
  URL       = "update_url",
  Interface = "interface",
  Username  = "username",
  Password  = "password",
}

local function getUciValue(key, param, default)
  ddnsBinding.sectionname = key
  if param then
    ddnsBinding.option = paramMap[param]
    ddnsBinding.default = default
    return uciHelper.get_from_uci(ddnsBinding)
  end
  return uciHelper.getall_from_uci(ddnsBinding)
end

local function getDdnsInfo(key)
  local enable = getUciValue(key, "Enable", "0")
  if enable == "0" then
    return "Disabled", "NO_ERROR"
  end
  return ddns.getDdnsInfo(key)
end

Multi_DynamicDNS_Client_i_.entries = function()
  local ddnsEntries = {}
  ddnsBinding.sectionname = "service"
  forEachOnUci(ddnsBinding, function(s)
    ddnsEntries[#ddnsEntries + 1] = s[".name"]
  end)
  return ddnsEntries
end

Multi_DynamicDNS_Client_i_.get = {
  Enable = function(mapping, param, key)
    return getUciValue(key, param, "0")
  end,

  Status = function(mapping, param, key)
    return getDdnsInfo(key)
  end,

  LastError = function(mapping, param, key)
    local _, err = getDdnsInfo(key)
    return err
  end,

  Server = function(mapping, param, key)
    mapping._section = getMappingType(mapping)
    if mapping._section == "device2" then
      return resolve("Device.DynamicDNS.Server.{i}.", key) or ""
    else
      return resolve("InternetGatewayDevice.X_000E50_DynamicDNS.Server.{i}.",key) or ""
    end
  end,

  Interface = function(mapping, param, key)
    local value = getUciValue(key, param)
    mapping._section = getMappingType(mapping)
    local path
    if mapping._section == "device2" then
      path = resolve("Device.IP.Interface.{i}.", value)
    else
      local key, status = wanconn.get_connection_key(value)
      if key and status then
        if status.proto == "pppoe" or status.proto == "pppoa" then
          path = resolve("InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.", key)
        else
          path = resolve("InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.", key)
        end
      end
    end
    return path or ""
  end,

  Username = function(mapping, param, key)
    return getUciValue(key, param)
  end,

  Password = function(mapping, param, key)
    return getUciValue(key, param)
  end
}

Multi_DynamicDNS_Client_i_.getall = function(mapping, key)
  local allValues = getUciValue(key)
  local status, err = getDdnsInfo(key)
  return {
    Enable    = allValues.enabled or "0",
    Status    = status,
    LastError = err,
    Username  = allValues.username or "",
    Password  = allValues.password or ""
  }
end

Multi_DynamicDNS_Client_i_.set = function(mapping, pname, pvalue, key)
  mapping._section = getMappingType(mapping)
  if pname == "Interface" and pvalue ~= "" then
    -- Convert path to key; this is always the UCI/UBUS interface name, like wan  ...
    if mapping._section == "device2" then
      pvalue = tokey(pvalue, "Device.IP.Interface.{i}.")
    else
      local value = tokey(pvalue,
        "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.",
        "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.")
      -- Update the interface name from WANDevice.WANConnectionDevice.WANIP/WANPPP key
      if value then
        local ifname
        pvalue, ifname = splitKey(value)
        if pvalue then
          if pvalue == "ACTIVE" then
            pvalue = ifname
          end
        else
          pvalue = value
        end
      else
        return nil, "Invalid value"
      end
    end
    if (not pvalue) then
      return nil, "Invalid value"
    end
  end
  ddnsBinding.sectionname = key
  ddnsBinding.option = paramMap[pname]
  uciHelper.set_on_uci(ddnsBinding, pvalue, commitapply)
  configChanged = true
end

Multi_DynamicDNS_Client_i_.commit = function()
  if configChanged then
    uciHelper.commit(ddnsBinding)
    configChanged = false
  end
end

Multi_DynamicDNS_Client_i_.revert = function()
  if configChanged then
    uciHelper.revert(ddnsBinding)
    configChanged = false
  end
end


local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_DynamicDNS_Client_i_, "#ROOT", { "InternetGatewayDevice.X_000E50_DynamicDNS", "Device.DynamicDNS" })
for _, dupli in ipairs(duplicates) do
  register (dupli)
end

