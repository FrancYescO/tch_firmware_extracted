-- Automatically generated from InternetGatewayDevice:1.3 and Device:2.10
-- using generator version 2.3
local Multi_DownloadDiagnostics_ = {
  objectType = {
    name = "#ROOT.DownloadDiagnostics.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      DiagnosticsState = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "None",
          "Requested",
          "Completed",
          "Error_CannotResolveHostName",
          "Error_NoRouteToHost",
          "Error_InitConnectionFailed",
          "Error_NoResponse",
          "Error_TransferFailed",
          "Error_PasswordRequestFailed",
          "Error_LoginFailed",
          "Error_NoTransferMode",
          "Error_NoPASV",
          "Error_IncorrectSize",
          "Error_Timeout",
          "Error_Internal",
          "Error_Other",
        },
      },
      Interface = {
        access = "readWrite",
        type = "string",
        max = "256",
        pathRef = true,
      },
      DownloadURL = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      DownloadTransports = {
        access = "readOnly",
        list = true,
        type = "string",
        enumeration = {
          "HTTP",
          "FTP",
        },
      },
      DownloadDiagnosticMaxConnections = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "1",
          },
        },
      },
      DownloadDiagnosticsMaxIncrementalResult = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            min = "1",
          },
        },
      },
      DSCP = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "63",
          },
        },
      },
      EthernetPriority = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "7",
          },
        },
      },
      TimeBasedTestDuration = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "999",
          },
        },
      },
      TimeBasedTestMeasurementInterval = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "999",
          },
        },
      },
      TimeBasedTestMeasurementOffset = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "255",
          },
        },
      },
      ProtocolVersion = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "Any",
          "IPv4",
          "IPv6",
        },
      },
      NumberOfConnections = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1",
          },
        },
      },
      IPAddressUsed = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
      },
      ROMTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      BOMTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      EOMTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      TestBytesReceived = {
        access = "readOnly",
        type = "unsignedInt",
      },
      TotalBytesReceived = {
        access = "readOnly",
        type = "unsignedInt",
      },
      TotalBytesSent = {
        access = "readOnly",
        type = "unsignedInt",
      },
      TestBytesReceivedUnderFullLoading = {
        access = "readOnly",
        type = "unsignedInt",
      },
      X_0876FF_TestBytesReceivedUnderFullLoading = {
         access = "readOnly",
         type = "unsignedInt",
         description = "The number of bytes of the test file received in between the latest BOMTime and the earliest EOMTime across all connections",
      },
      TotalBytesReceivedUnderFullLoading = {
        access = "readOnly",
        type = "unsignedInt",
      },
      X_0876FF_TotalBytesReceivedUnderFullLoading = {
        access = "readOnly",
        type = "unsignedInt",
        description = "The total number of bytes (at the IP layer) received in between the last BOMTime and the first EOMTime",
      },
      TotalBytesSentUnderFullLoading = {
        access = "readOnly",
        type = "unsignedInt",
      },
      PeriodOfFullLoading = {
        access = "readOnly",
        type = "unsignedInt",
      },
      X_0876FF_PeriodOfFullLoading = {
        access = "readOnly",
        type = "unsignedInt",
        description = "The period of time in microseconds between the last BOMTime and the first EOMTime",
      },
      X_0876FF_Throughput = {
        access = "readOnly",
        type = "string",
        description = "The average number of test bits per second sent on the interface during the period between the last BOMTime and the first EOMTime",
      },
      TCPOpenRequestTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      TCPOpenResponseTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      -- PerConnectionResultNumberOfEntries
      -- automatically created when Device.IP.Diagnostics.DownloadDiagnostics.PerConnectionResult.{i}. is loaded
      EnablePerConnectionResults = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "boolean",
      },
      -- IncrementalResultNumberOfEntries
      -- automatically created when Device.IP.Diagnostics.DownloadDiagnostics.IncrementalResult.{i}. is loaded
      X_0876FF_ConcurrentSession = {
        access = "readOnly",
        type = "unsignedInt",
        description = "The number of concurrent sessions",
      },
      X_000E50_ConcurrentSession = {
        access = "readOnly",
        type = "unsignedInt",
        description = "The number of concurrent sessions",
      },
    }
  }
}

local ipairs, mapper, math, register, string  = ipairs, mapper, math, register, string
local uci_helper = mapper("ucihelper")
local getFromUci = uci_helper.get_from_uci
local tr143binding = { config = "tr143" }

local function getSectionName(mapping)
  if mapping.objectType.name:match("^InternetGatewayDevice") then
    return "igd"
  else
    return "device2"
  end
end

local helper = require("transformer.shared.tr143helper")

Multi_DownloadDiagnostics_.get = function(mapping, pname)
  local config = "DownloadDiagnostics"
  local user = getSectionName(mapping)
  return helper.tr143_get(config, user, pname)
end

Multi_DownloadDiagnostics_.set = function(mapping, pname, pvalue)
  local config = "DownloadDiagnostics"
  local user = getSectionName(mapping)
  return helper.tr143_set(config, user, pname, pvalue, commitapply)
end

Multi_DownloadDiagnostics_.commit = helper.tr143_commit

Multi_DownloadDiagnostics_.revert = helper.tr143_revert

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_DownloadDiagnostics_, "#ROOT", {"InternetGatewayDevice", "Device.IP.Diagnostics"})
for _, dupli in ipairs(duplicates) do
  helper.startup(resolve, tokey)
  register(dupli)
end

local Multi_DownloadDiagnostics_PerConnectionResult_i_ = {
  objectType = {
    name = "#ROOT",
    access = "readOnly",
    numEntriesParameter = "PerConnectionResultNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    description = "represents the result of one TCP session",
    parameters = {
      ROMTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      BOMTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      EOMTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      TestBytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      TotalBytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      TotalBytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      TCPOpenRequestTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      TCPOpenResponseTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
    }
  }
}

Multi_DownloadDiagnostics_PerConnectionResult_i_.get = function(mapping, pname, key)
  local value
  tr143binding.sectionname = key
  tr143binding.option = pname
  value = getFromUci(tr143binding)
  return value or ""
end

Multi_DownloadDiagnostics_PerConnectionResult_i_.entries = function(mapping)
  local entries = {}
  tr143binding.sectionname = "DownloadDiagnosticsPCR"
  uci_helper.foreach_on_uci(tr143binding, function(s)
    entries [#entries + 1] = s[".name"]
  end)
  return entries
end

duplicates = duplicator(Multi_DownloadDiagnostics_PerConnectionResult_i_, "#ROOT", {"InternetGatewayDevice.DownloadDiagnostics.PerConnectionResult.{i}.", "Device.IP.Diagnostics.DownloadDiagnostics.PerConnectionResult.{i}.", "InternetGatewayDevice.DownloadDiagnostics.X_0876FF_Result.{i}."})
for _, dupli in ipairs(duplicates) do
  if dupli.objectType.name:match("^InternetGatewayDevice%.DownloadDiagnostics%.X_0876FF_Result%.") then
    dupli.objectType.parameters.ROMTime.description = "Request time in UTC"
    dupli.objectType.parameters.BOMTime.description = "Begin of transmission time in UTC"
    dupli.objectType.parameters.EOMTime.description = "End of transmission in UTC"
    dupli.objectType.parameters.TestBytesReceived.description = "The test traffic received in bytes during the FTP/HTTP transaction, between BOMTime and EOMTime"
    dupli.objectType.parameters.TCPOpenRequestTime.description = "Request time in UTC"
    dupli.objectType.parameters.TCPOpenResponseTime.description = "Response time in UTC"
    dupli.objectType.parameters.TotalBytesReceived = nil
    dupli.objectType.parameters.TotalBytesSent = nil
  end
  register(dupli)
end

local Multi_DownloadDiagnostics_IncrementalResult_i_ = {
  objectType = {
    name = "#ROOT.DownloadDiagnostics.IncrementalResult.{i}.",
    access = "readOnly",
    numEntriesParameter = "IncrementalResultNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      TestBytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      TotalBytesReceived = {
        access = "readOnly",
        type = "unsignedInt",
      },
      TotalBytesSent = {
        access = "readOnly",
        type = "unsignedInt",
      },
      StartTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      EndTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
    }
  }
}


Multi_DownloadDiagnostics_IncrementalResult_i_.get = function(mapping, pname, key)
  local value
  tr143binding.sectionname = key
  tr143binding.option = pname
  value = getFromUci(tr143binding)
  return value or ""
end

Multi_DownloadDiagnostics_IncrementalResult_i_.entries = function(mapping)
  local entries = {}
  tr143binding.sectionname = "DownloadDiagnosticsIR"
  uci_helper.foreach_on_uci(tr143binding, function(s)
    entries [#entries + 1] = s[".name"]
  end)
  return entries
end

duplicates = duplicator(Multi_DownloadDiagnostics_IncrementalResult_i_, "#ROOT", {"InternetGatewayDevice", "Device.IP.Diagnostics"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
