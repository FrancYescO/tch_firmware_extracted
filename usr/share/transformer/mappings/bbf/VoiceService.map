local lfs = require("lfs")

if lfs.attributes("/etc/config/mmpbx", "mode") ~= "file" then
  return
end

local uci_helper = mapper("ucihelper")
local transactions = {}
local binding = {}

local Multi_Services_VoiceService_i_ = {
  objectType = {
    name = "#ROOT.Services.VoiceService.{i}.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    numEntriesParameter = "VoiceServiceNumberOfEntries",
    parameters = {
      X_000E50_FXOState = {
        access = "readWrite",
        type = "boolean",
      },
      X_000E50_FXSState = {
        access = "readWrite",
        type = "boolean",
      },
      -- VoiceProfileNumberOfEntries
      -- automatically created when Multi.Services.VoiceService.{i}.VoiceProfile.{i}. is loaded
      -- X_BELGACOM_PhyInterfaceNumberOfEntries
      -- automatically created when Multi.Services.VoiceService.{i}.PhyInterface.{i}. is loaded
    }
  }
}

-- Two User Agents:
-- 1. InternetGatewayDevice.Services.VoiceService.1 is the SIP clients
-- 2. InternetGatewayDevice.Services.VoiceService.2 is the INTUA of the B2BUA
local entries = {"SIPUA", "INTUA"}
Multi_Services_VoiceService_i_.entries = function(mapping, parentkey)
    return entries
end

Multi_Services_VoiceService_i_.get = {
   X_000E50_FXOState = function (mapping, paramname, key)
       binding.config = "mmpbxbrcmfxonet"
       binding.sectionname = "fxo_profile"
       binding.option = "enabled"
       binding.default = "0"
       return uci_helper.get_from_uci(binding)
   end,

   X_000E50_FXSState = function (mapping, paramname, key)
       binding.config = "mmpbxbrcmfxsdev"
       binding.sectionname = "fxs_dev_0"
       binding.option = "relay_state"
       binding.default = "0"
       return uci_helper.get_from_uci(binding)
   end,
}


Multi_Services_VoiceService_i_.set = {
   X_000E50_FXOState = function (mapping, paramname, paramvalue, key)
       binding.config = "mmpbxbrcmfxonet"
       binding.sectionname = "fxo_profile"
       binding.option = "enabled"
       uci_helper.set_on_uci(binding, paramvalue, commitapply)
       transactions[binding.config] = true;
  end,
  X_000E50_FXSState = function (mapping, paramname, paramvalue, key)
       binding.config = "mmpbxbrcmfxsdev"
       binding.sectionname = "fxs_dev_0"
       binding.option = "relay_state"
       uci_helper.set_on_uci(binding, paramvalue, commitapply)

       binding.sectionname = "fxs_dev_1"
       uci_helper.set_on_uci(binding, paramvalue, commitapply)
       transactions[binding.config] = true;
  end,
}

Multi_Services_VoiceService_i_.commit = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.commit(binding)
    end
    transactions = {}
end

Multi_Services_VoiceService_i_.revert = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.revert(binding)
    end
    transactions = {}
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Services_VoiceService_i_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
