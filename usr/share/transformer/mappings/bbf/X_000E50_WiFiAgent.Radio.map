local Multi_Services_X_000E50_WiFiAgent_Radio_i_ = {
  objectType = {
    name = "#ROOT_WiFiAgent.Radio.{i}.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    description = "Object to manage the Wi-Fi Doctor for the radio",
    parameters = {
      Name = {
        access = "readOnly",
        type = "string",
        description = "Displays the name of the radio",
      },
      ACSAllowedChannels = {
        access = "readWrite",
        type = "string",
        description = "Sets the list of allowed channels ACS may choose from for this radio",
      },
    }
  }
}

local uciHelper = mapper("ucihelper")
local wirelessBinding = { config = "wireless" }
local configChanged

Multi_Services_X_000E50_WiFiAgent_Radio_i_.entries = function()
  local radios = {}
  wirelessBinding.sectionname = "wifi-device"
  uciHelper.foreach_on_uci(wirelessBinding, function(s)
    radios[#radios + 1] = s['.name']
  end)
  return radios
end

Multi_Services_X_000E50_WiFiAgent_Radio_i_.get = {
  ACSAllowedChannels = function(mapping, param, key)
    wirelessBinding.sectionname = key
    wirelessBinding.option = "acs_allowed_channels"
    return uciHelper.get_from_uci(wirelessBinding)
  end,
  Name = function(mapping, param, key)
    return key
  end,
}

Multi_Services_X_000E50_WiFiAgent_Radio_i_.set = {
  ACSAllowedChannels = function(mapping, param, value, key)
    wirelessBinding.sectionname = key
    wirelessBinding.option = "acs_allowed_channels"
    uciHelper.set_on_uci(wirelessBinding, value, commitapply)
    configChanged = true
  end,
}

Multi_Services_X_000E50_WiFiAgent_Radio_i_.commit = function()
  if configChanged then
    uciHelper.commit(wirelessBinding)
    configChanged = false
  end
end

Multi_Services_X_000E50_WiFiAgent_Radio_i_.revert = function()
  if configChanged then
    uciHelper.revert(wirelessBinding)
    configChanged = false
  end
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Services_X_000E50_WiFiAgent_Radio_i_, "#ROOT", {"InternetGatewayDevice.Services.X_000E50", "Device.Services.X_000E50", "Device.Services.X_BELGACOM"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
