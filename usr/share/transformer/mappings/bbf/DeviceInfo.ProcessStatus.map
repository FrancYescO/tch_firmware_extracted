-- Automatically generated from Device:2.10
-- using generator version 2.3
local Multi_DeviceInfo_ProcessStatus_ = {
  objectType = {
    name = "#ROOT.DeviceInfo.ProcessStatus.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      CPUUsage = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
        range = {
          {
            max = "100",
          },
        },
      },
      -- ProcessNumberOfEntries
      -- automatically created when Device.DeviceInfo.ProcessStatus.Process.{i}. is loaded
    }
  }
}

local register, io, string, tonumber, math = register, io, string, tonumber, math
local processinfo = require("transformer.shared.processinfo")

Multi_DeviceInfo_ProcessStatus_.get = {
  CPUUsage = processinfo.getCPUUsage,
}

local Multi_DeviceInfo_ProcessStatus_Process_i_ = {
  objectType = {
    name = "#ROOT.DeviceInfo.ProcessStatus.Process.{i}.",
    access = "readOnly",
    numEntriesParameter = "ProcessNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      PID = {
        access = "readOnly",
        type = "unsignedInt",
      },
      Command = {
        access = "readOnly",
        type = "string",
        max = "256",
      },
      Size = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      Priority = {
        access = "readOnly",
        type = "unsignedInt",
        range = {
          {
            max = "99",
          },
        },
      },
      CPUTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      State = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
        enumeration = {
          "Running",
          "Sleeping",
          "Stopped",
          "Idle",
          "Uninterruptible",
          "Zombie",
        },
      },
    }
  }
}

local lfs = require("lfs")
local dir = lfs.dir
local gsub, sub, byte, ipairs = string.gsub, string.sub, string.byte, ipairs
local stateMap = { R = 'Running', S = 'Sleeping', D = 'Uninterruptible',
      Z = 'Zombie', T = 'Stopped', W = 'Running' }

local posix = require("tch.posix")

-- reference http://man7.org/linux/man-pages/man5/proc.5.html
local nameMap = {
  ["comm"] = 2,
  ["state"] = 3,
  ["utime"] = 14,
  ["stime"] = 15,
  ["priority"] = 18,
  ["vsize"] = 23,
}

local function readFile(filename)
  local fd, msg = io.open(filename)
  if not fd then
    return fd, msg
  end
  local result = fd:read("*a")
  fd:close()
  return result
end

local function getProcData(PID)
  local pidStat = readFile("/proc/" .. PID .. "/stat")
  if not pidStat then
    return
  end
  local pid, command, procInfo = pidStat:match("^(%d+)%s+(%b())(.*)")
  if not pid then
    return
  end
  local procStat = {pid, command}
  for val in string.gmatch(procInfo, "(%S+)") do
    procStat[#procStat+1] = val
  end
  return procStat
end

local processStatus = {}

local function getProcessStatus(mapping, param, key)
  if param == "PID" then
    return key
  end
  return processStatus[key][param]
end

local function getCommand(pid, procStat)
  local cmdline = readFile("/proc/" .. pid .. "/cmdline")
  if not cmdline then
    return
  end
  -- If we have a cmdline string we use it.
  if #cmdline > 0 then
    -- The cmdline string uses null bytes as separators; replace them by spaces.
    local cmd = gsub(cmdline, "%z", " ")
    -- Beautification: if there was a trailing null byte it was replaced by a
    -- space. In that case strip it off.
    if byte(cmd, #cmd) == 0x20 then
      cmd = sub(cmd, 1, #cmd - 1)
    end
    cmd  = sub(cmd,1,256)
    return cmd
  else
    -- In some circumstances the 'cmdline' file is empty: kernel threads,
    -- zombie processes, paged out processes, ... In that case read the
    -- 'stat' file.
    return procStat and procStat[nameMap["comm"]] or ""
  end
end

local function getState(procStat)
  return stateMap[procStat[nameMap["state"]]] or "Dead"
end

local function getSize(procStat)
  return procStat and procStat[nameMap["vsize"]] or "0"
end

local function getPriority(procStat)
  if procStat and procStat[nameMap["priority"]] then
    local value = procStat[nameMap["priority"]]
    if value:match("^[%-]%d+") then
      value = math.abs(value) - 1
    end
    return value and tostring(value) or "99"
  end
  return "0"
end

local function getCPUTime(procStat)
  local clockTicks = posix.sysconf(posix._SC_CLK_TCK)
  local userCodeTime = procStat[nameMap["utime"]] and tonumber(procStat[nameMap["utime"]])
  local kernelCodeTime = procStat[nameMap["stime"]] and tonumber(procStat[nameMap["stime"]])
  if userCodeTime and kernelCodeTime then
    local cpuTime = ((userCodeTime + kernelCodeTime)/clockTicks)*1000
    cpuTime = string.format("%0.0f",cpuTime) -- rounding off
    return cpuTime or "0"
  end
  return "0"
end

local function getData(pid)
  local procStat = getProcData(pid)
  local cmd = getCommand(pid, procStat)
  -- State, Size, Priority and CPUTime are generated based on procStat.
  -- Command is retrieved from getCommand()
  if not procStat or not cmd then
    return
  end
  return {
    Command = cmd,
    State = getState(procStat),
    Size = getSize(procStat),
    Priority = getPriority(procStat),
    CPUTime = getCPUTime(procStat),
  }
end

local function entriesProcessStatus(mapping)
  processStatus = {}
  local result = {}
  for pid in dir('/proc/') do
    -- we're taking PID as our key
    if tonumber(pid) then
      local pidData = getData(pid)
      -- Adding PID to the entries only if all the data are retrieved properly.
      if pidData then
        processStatus[pid] = pidData
        result[#result + 1] = pid
      end
    end
  end
  return result
end

Multi_DeviceInfo_ProcessStatus_Process_i_.get = getProcessStatus
Multi_DeviceInfo_ProcessStatus_Process_i_.entries = entriesProcessStatus

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_DeviceInfo_ProcessStatus_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register (dupli)
end

duplicates = duplicator(Multi_DeviceInfo_ProcessStatus_Process_i_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register (dupli)
end
