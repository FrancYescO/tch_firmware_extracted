local Multi_DNSProxy_ = {
    objectType = {
        name = "#ROOT.X_000E50_DNSProxy.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            DNSRebindProtection = {
                access = "readWrite",
                type = "boolean",
            },
            RebindDomain = {
                access = "readWrite",
                type = "string",
            }
        }
    }
}

local uciHelper = mapper("ucihelper")
local getFromUci = uciHelper.get_from_uci
local setOnUci = uciHelper.set_on_uci
local dnsProxyBinding = {extended = 1, config = "dhcp", sectionname = "@dnsmasq[0]"}
local dhcpBinding = {config = "dhcp"}
local sub, len, gmatch = string.sub, string.len, string.gmatch

Multi_DNSProxy_.get = {
    DNSRebindProtection = function(mapping, param, key)
        dnsProxyBinding.option = "rebind_protection"
        local result = getFromUci(dnsProxyBinding)
        return result or ""
    end,
    RebindDomain = function(mapping, param, key)
        dnsProxyBinding.option = "rebind_domain"
        local domains = ""
        local result = getFromUci(dnsProxyBinding)
        if type(result) == "table" then
            for _,v in pairs(result) do
                domains = domains..v..","
            end
            if domains ~= "" then
                local domainLen = len(domains)
                if sub(domains, domainLen, domainLen) == "," then
                    domains = sub(domains, 1, domainLen-1)
                end
            end
        end
        return domains
    end,
}

Multi_DNSProxy_.set = {
    DNSRebindProtection = function(mapping, param, value, key)
        dnsProxyBinding.option = "rebind_protection"
        setOnUci(dnsProxyBinding, value, commitapply)
    end,
    RebindDomain = function(mapping, param, value, key)
        dnsProxyBinding.option = "rebind_domain"
        local domains = {}
        for domain in gmatch(value, "([^,]+)") do
            table.insert(domains, domain)
        end
        setOnUci(dnsProxyBinding, domains, commitapply)
    end,
}

Multi_DNSProxy_.commit = function()
    uciHelper.commit(dhcpBinding)
end

Multi_DNSProxy_.revert = function()
    uciHelper.revert(dhcpBinding)
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_DNSProxy_, "#ROOT", {"InternetGatewayDevice.Services", "Device.Services"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
