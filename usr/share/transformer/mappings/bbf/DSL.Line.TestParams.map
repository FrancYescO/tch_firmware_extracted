-- Automatically generated from Device:2.11
-- using generator version 2.3
local Multi_TestParams_ = {
  objectType = {
    name = "#ROOT.TestParams.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      HLOGGds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      HLOGGus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      HLOGpsds = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "2559",
        type = "string",
      },
      HLOGpsus = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "2559",
        type = "string",
      },
      HLOGMTds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      HLOGMTus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      QLNGds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      QLNGus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      QLNpsds = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "2047",
        type = "string",
      },
      QLNpsus = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "2047",
        type = "string",
      },
      QLNMTds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      QLNMTus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SNRGds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SNRGus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SNRpsds = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "2047",
        type = "string",
      },
      SNRpsus = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "2047",
        type = "string",
      },
      SNRMTds = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SNRMTus = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LATNds = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "24",
        type = "string",
      },
      LATNus = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "24",
        type = "string",
      },
      SATNds = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "24",
        type = "string",
      },
      SATNus = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "24",
        type = "string",
      },
    }
  }
}

local _, xdslctl = pcall(require,"transformer.shared.xdslctl")
local register = register

-- keys to retrieve for getall (xdslctl info --show)
local xdslInfoGetAllKeys = {
  "HLOGG",
  "HLOGps",
  "HLOGMT",
  "QLNps",
  "QLNMT",
  "SNRG",
  "SNRps",
  "SNRMT",
  "LATN",
  "SATN",
}

local function isNot35bProfile(key)
  return  (xdslctl.infoValue("vdsl2profile","","",key) or "") ~= "35b"
end

Multi_TestParams_.get = {
  HLOGGds = function (mapping, param, key)
    return xdslctl.infoValue("HLOGG", "ds", "", key) or "0"
  end,
  HLOGGus = function (mapping, param, key)
    return xdslctl.infoValue("HLOGG", "us", "", key) or "0"
  end,
  HLOGpsds = function (mapping, param, key)
    return isNot35bProfile(key) and xdslctl.infoValue("HLOGps", "ds", "", key) or "0"
  end,
  HLOGpsus = function (mapping, param, key)
    return isNot35bProfile(key) and xdslctl.infoValue("HLOGps", "us", "", key) or "0"
  end,
  HLOGMTds = function (mapping, param, key)
    return xdslctl.infoValue("HLOGMT", "ds", "", key) or "0"
  end,
  HLOGMTus = function (mapping, param, key)
    return xdslctl.infoValue("HLOGMT", "us", "", key) or "0"
  end,
  QLNGds = "0",
  QLNGus = "0",
  QLNpsds = function (mapping, param, key)
    return isNot35bProfile(key) and xdslctl.infoValue("QLNps", "ds", "", key) or "0"
  end,
  QLNpsus = function (mapping, param, key)
    return isNot35bProfile(key) and xdslctl.infoValue("QLNps", "us", "", key) or "0"
  end,
  QLNMTds = function (mapping, param, key)
    return xdslctl.infoValue("QLNMT", "ds", "", key) or "0"
  end,
  QLNMTus = function (mapping, param, key)
    return xdslctl.infoValue("QLNMT", "us", "", key) or "0"
  end,
  SNRGds = function (mapping, param, key)
    return xdslctl.infoValue("SNRG", "ds", "", key) or "0"
  end,
  SNRGus = function (mapping, param, key)
    return xdslctl.infoValue("SNRG", "us", "", key) or "0"
  end,
  SNRpsds = function (mapping, param, key)
    return isNot35bProfile(key) and xdslctl.infoValue("SNRps", "ds", "", key) or "0"
  end,
  SNRpsus = function (mapping, param, key)
    return isNot35bProfile(key) and xdslctl.infoValue("SNRps", "us", "", key) or "0"
  end,
  SNRMTds = function (mapping, param, key)
    return xdslctl.infoValue("SNRMT", "ds", "", key) or "0"
  end,
  SNRMTus = function (mapping, param, key)
    return xdslctl.infoValue("SNRMT", "us", "", key) or "0"
  end,
  LATNds = function (mapping, param, key)
    return xdslctl.infoValue("LATN", "ds", "", key) or "0"
  end,
  LATNus = function (mapping, param, key)
    return xdslctl.infoValue("LATN", "us", "", key) or "0"
  end,
  SATNds = function (mapping, param, key)
    return xdslctl.infoValue("SATN", "ds", "", key) or "0"
  end,
  SATNus = function (mapping, param, key)
    return xdslctl.infoValue("SATN", "us", "", key) or "0"
  end,
}

Multi_TestParams_.getall = function (mapping, key)
  -- get all required values from xdslctl info --show, xdslctl info --stats
  local xdslInfoValues = xdslctl.infoValueList(xdslInfoGetAllKeys, key)
  local isNot35b=isNot35bProfile(key)
  return {
    HLOGGds = xdslInfoValues["HLOGG"]["ds"] or "0",
    HLOGGus = xdslInfoValues["HLOGG"]["us"] or "0",
    HLOGpsds = isNot35b and xdslInfoValues["HLOGps"]["ds"] or "0",
    HLOGpsus = isNot35b and xdslInfoValues["HLOGps"]["us"] or "0",
    HLOGMTds = xdslInfoValues["HLOGMT"]["ds"] or "0",
    HLOGMTus = xdslInfoValues["HLOGMT"]["us"] or "0",
    QLNpsds = isNot35b and xdslInfoValues["QLNps"]["ds"] or "0",
    QLNpsus = isNot35b and xdslInfoValues["QLNps"]["us"] or "0",
    QLNMTds = xdslInfoValues["QLNMT"]["ds"] or "0",
    QLNMTus = xdslInfoValues["QLNMT"]["us"] or "0",
    SNRGds = xdslInfoValues["SNRG"]["ds"] or "0",
    SNRGus = xdslInfoValues["SNRG"]["us"] or "0",
    SNRpsds = isNot35b and xdslInfoValues["SNRps"]["ds"] or "0",
    SNRpsus = isNot35b and xdslInfoValues["SNRps"]["us"] or "0",
    SNRMTds = xdslInfoValues["SNRMT"]["ds"] or "0",
    SNRMTus = xdslInfoValues["SNRMT"]["us"] or "0",
    LATNds = xdslInfoValues["LATN"]["ds"] or "0",
    LATNus = xdslInfoValues["LATN"]["us"] or "0",
    SATNds = xdslInfoValues["SATN"]["ds"] or "0",
    SATNus = xdslInfoValues["SATN"]["us"] or "0",
  }
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_TestParams_, "#ROOT", {"InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig", "Device.DSL.Line.{i}"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
