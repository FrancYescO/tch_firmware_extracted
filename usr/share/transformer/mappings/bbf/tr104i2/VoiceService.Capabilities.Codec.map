local lfs = require("lfs")

if lfs.attributes("/etc/config/mmpbx", "mode") ~= "file" then
    return
end

local tr104Helper = require("transformer.shared.tr104helper")
local codecHelper = require("transformer.shared.codechelper")

local Multi_Services_VoiceService_i_Capabilities_Codec_i_ = {
    objectType = {
        name = "#ROOT.Services.VoiceService.{i}.Capabilities.Codec.{i}.",
        access = "readOnly",
        numEntriesParameter = "CodecNumberOfEntries",
        minEntries = 0,
        maxEntries = math.huge,
        aliasParameter = "Alias",
        parameters = {
            --[[Alias = {
                access = "readWrite",
                activeNotify = "canDeny",
                type = "string",
                description = "provides a mechanism for an ACS to label this instance for future reference",
            },]]--
            Codec = {
                access = "readOnly",
                type = "string",
                enumeration = {
                    "AMR",
                    "Clearmode",
                    "EVRC1",
                    "EVRCB1",
                    "G.711MuLaw",
                    "G.711ALaw",
                    "G.726",
                    "G.729",
                    "G.729.1",
                    "G.729a",
                    "G.729e",
                    "G.728",
                    "G.723.1",
                    "G.722",
                    "G.722.1",
                    "G.722.2",
                    "Generic Comfort Noise",
                    "GSM-FR",
                    "GSM-HR",
                    "GSM-EFR",
                    "iLBC",
                    "Speex",
                },
                description = "Identifier of the codec type",
            },
            BitRate = {
                access = "readOnly",
                type = "unsignedInt",
                description = "is the number of bits that are conveyed or processed per unit of time",
            },
            PacketizationPeriod = {
                access = "readOnly",
                list = true,
                type = "string",
                max = "64",
                description = "is the duration of time (expressed in milliseconds) between two RTP packets",
            },
            SilenceSuppression = {
                access = "readOnly",
                type = "boolean",
                description = "Indicates support for silence suppression for this codec",
            },
        }
    }
}

Multi_Services_VoiceService_i_Capabilities_Codec_i_.entries = codecHelper.getCodecEntries()
Multi_Services_VoiceService_i_Capabilities_Codec_i_.getall = codecHelper.getAllCodecParams(Multi_Services_VoiceService_i_Capabilities_Codec_i_)
Multi_Services_VoiceService_i_Capabilities_Codec_i_.get = codecHelper.getCodecParam()

tr104Helper.registerObject("Multi_Services_VoiceService_i_Capabilities_Codec_i_", Multi_Services_VoiceService_i_Capabilities_Codec_i_, register)
