local lfs = require("lfs")

if lfs.attributes("/etc/config/mmpbx", "mode") ~= "file" then
    return
end

local mapper = mapper
local tr104Helper = require("transformer.shared.tr104helper")
local voiceHelper = require("transformer.shared.voice_helper")
local conn = mapper("ubus").connect()
local callStatsList = "CALL STATISTICS"

-- Automatically generated from VoiceService:2.0 using generator version 2.3 - START
local Multi_Services_VoiceService_i_CallLog_i_Session_i_Source_ = {
    objectType = {
        name = "#ROOT.Services.VoiceService.{i}.CallLog.{i}.Session.{i}.Source.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
        }
    }
}
-- Automatically generated from VoiceService:2.0 using generator version 2.3 - END

tr104Helper.registerObject("Multi_Services_VoiceService_i_CallLog_i_Session_i_Source_", Multi_Services_VoiceService_i_CallLog_i_Session_i_Source_, register)

-- Automatically generated from VoiceService:2.0 using generator version 2.3 - START
local Multi_Services_VoiceService_i_CallLog_i_Session_i_Source_RTP_ = {
    objectType = {
        name = "#ROOT.Services.VoiceService.{i}.CallLog.{i}.Session.{i}.Source.RTP.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            FarEndIPAddress = {
                access = "readOnly",
                type = "string",
                description = "The IP address of far end VoIP device",
            },
            FarEndUDPPort = {
                access = "readOnly",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "65535",
                    },
                },
                description = "The UDP port used for current session in the far end device",
            },
            LocalUDPPort = {
                access = "readOnly",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "65535",
                    },
                },
                description = "The local UDP port used for current session",
            },
            MinJitter = {
                access = "readOnly",
                type = "int",
                range = {
                    {
                        min = "-1",
                    },
                },
                description = "The minimum relative transit time in milliseconds between two packets",
            },
            MaxJitter = {
                access = "readOnly",
                type = "int",
                range = {
                    {
                        min = "-1",
                    },
                },
                description = "The maximum relative transit time in milliseconds between two packets",
            },
            --[[MeanJitter = {
                access = "readOnly",
                type = "int",
                range = {
                   {
                        min = "-1",
                    },
                },
            },
            PacketDelayVariation = {
                access = "readOnly",
                type = "int",
                range = {
                    {
                        min = "-1",
                    },
                },
            },
            BufferDelay = {
                access = "readOnly",
                type = "int",
                range = {
                    {
                        min = "-1",
                    },
                },
            },
            BurstCount = {
                access = "readOnly",
                type = "unsignedInt",
            },]]--
            PacketsReceived = {
                access = "readOnly",
                type = "unsignedLong",
                desciption = "Total number of RTP packets received for this session",
            },
            PacketsSent = {
                access = "readOnly",
                type = "unsignedLong",
                description = "Total number of RTP packets sent for this session",
            },
            PacketsLost = {
                access = "readOnly",
                type = "unsignedInt",
                description = "Total number of RTP packets that have been lost for this session",
            },
            PacketsDiscarded = {
                access = "readOnly",
                type = "unsignedInt",
                description = "Total number of RTP packets that have been discarded for this session",
            },
            BytesReceived = {
                access = "readOnly",
                type = "unsignedLong",
                description = "Total number of bytes received for this session",
            },
            BytesSent = {
                access = "readOnly",
                type = "unsignedLong",
                description = "Total number of bytes sent for this session",
            },
            ReceivePacketLossRate = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "100",
                    },
                },
                description = "Current receive packet loss rate in percent",
            },
            FarEndPacketLossRate = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "100",
                    },
                },
                description = "Current far end receive packet lost rate in percent",
            },
            ReceiveInterarrivalJitter = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "int",
                range = {
                    {
                        min = "-1",
                    },
                },
                description = "Current receive interarrival jitter in timestamp units",
            },
            FarEndInterarrivalJitter = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "int",
                range = {
                    {
                        min = "-1",
                    },
                },
                description = "Current Interarrival jitter in timestamp units as reported from the far-end device via RTCP",
            },
            AverageReceiveInterarrivalJitter = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "int",
                range = {
                    {
                        min = "-1",
                    },
                },
                description = "Average receive interarrival jitter in timestamp units since the beginning of the current call",
            },
            AverageFarEndInterarrivalJitter = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "int",
                range = {
                    {
                        min = "-1",
                    },
                },
                description = "Average far-end interarrival jitter in timestamp units since the beginning of the current call",
            },
            RoundTripDelay = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "int",
                range = {
                    {
                        min = "-1",
                    },
                },
                description = "Current round trip delay in microseconds",
            },
            AverageRoundTripDelay = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "int",
                range = {
                    {
                        min = "-1",
                    },
                },
                description = "Average round trip delay in microseconds since the beginning of the current session",
            },
            SamplingFrequency = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
                description = "Sample frequency in Hertz used by the codec for this session",
            },
        }
    }
}
-- Automatically generated from VoiceService:2.0 using generator version 2.3 - END

local statsName = {
    PacketsReceived = "RxPackets",
    PacketsSent     = "TxPackets",
    PacketsLost     = "PacketsLost",
    BytesReceived   = "RxBytes",
    BytesSent       = "TxBytes",
    MinJitter       = "ReceiveMinInterarrivalJitter",
    MaxJitter       = "ReceiveMaxInterarrivalJitter",
}

local codecStandard = setmetatable({
    PCMU            = "8000",
    PCMA            = "8000",
    ["G726-16"]     = "8000",
    ["G726-24"]     = "8000",
    ["G726-32"]     = "8000",
    ["G726-40"]     = "8000",
    G723            = "8000",
    G722            = "8000",
    G728            = "8000",
    G729            = "8000",
    G729E           = "8000",
    ["GSM-EFR"]     = "8000",
    iLBC            = "8000",
    AMR             = "8000",
    ["AMR-WB"]      = "16000",
}, mt)

local defaultValue = setmetatable({
    FarEndIPAddress                    = "",
    FarEndUDPPort                      = "0",
    LocalUDPPort                       = "0",
    PacketsReceived                    = "0",
    PacketsSent                        = "0",
    PacketsLost                        = "0",
    BytesReceived                      = "0",
    BytesSent                          = "0",
    ReceivePacketLossRate              = "0",
    FarEndPacketLossRate               = "0",
    PacketsDiscarded                   = "0",
    ReceiveInterarrivalJitter          = "-1",
    FarEndInterarrivalJitter           = "-1",
    AverageReceiveInterarrivalJitter   = "-1",
    AverageFarEndInterarrivalJitter    = "-1",
    RoundTripDelay                     = "-1",
    AverageRoundTripDelay              = "-1",
    MinJitter                          = "-1",
    MaxJitter                          = "-1",
}, mt)


local function getAllSessionDetails(mapping, key, parentKey)
    local result = {}
    local keyValue, profileNumber = voiceHelper.splitKey(key)
    local callStatsData = conn:call("mmdbd.call.statistics", "get", {["profile"]= profileNumber}) or {}
    if callStatsData and callStatsData[callStatsList] then
       for _, sessionData in ipairs (callStatsData[callStatsList]) do
            for param in pairs(Multi_Services_VoiceService_i_CallLog_i_Session_i_Source_RTP_.objectType.parameters) do
                if tostring(sessionData["CallKey"]) == keyValue then
                    local sessionName = statsName[param]
                    if sessionName then
                        result[param] = sessionData[sessionName] and tostring(sessionData[sessionName]) or defaultValue[param]
                    elseif param == "SamplingFrequency" then
                        result[param] = codecStandard[sessionData["Codec"]] or ""
                    else
                        result[param] = sessionData[param] and tostring(sessionData[param]) or defaultValue[param]
                    end
                end
           end
       end
    end
    return result
end

local function getSessionDetails(mapping, param, key)
    local keyValue, profileNumber = voiceHelper.splitKey(key)
    local callStatsData = conn:call("mmdbd.call.statistics", "get", {["profile"]= profileNumber}) or {}
    if callStatsData and callStatsData[callStatsList] then
        for _, sessionData in ipairs (callStatsData[callStatsList]) do
            if tostring(sessionData["CallKey"]) == keyValue then
                local sessionName = statsName[param]
                if sessionName then
                    return sessionData[sessionName] and tostring(sessionData[sessionName]) or defaultValue[param]
                elseif param == "SamplingFrequency" then
                    return codecStandard[sessionData["Codec"]] or ""
                else
                    return sessionData[param] and tostring(sessionData[param]) or defaultValue[param]
                end
            end
        end
   end
   return defaultValue[param]
end

Multi_Services_VoiceService_i_CallLog_i_Session_i_Source_RTP_.get = getSessionDetails

Multi_Services_VoiceService_i_CallLog_i_Session_i_Source_RTP_.getall = getAllSessionDetails

tr104Helper.registerObject("Multi_Services_VoiceService_i_CallLog_i_Session_i_Source_RTP_", Multi_Services_VoiceService_i_CallLog_i_Session_i_Source_RTP_, register)
