-- Manually generated
local Multi_X_000E50_TimeOfDay_Schedule_i_ = {
  objectType = {
    name = "#ROOT.X_000E50_TimeOfDay.Schedule.{i}.",
    access = "readWrite",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    description = "Configure a schedule to be used in the Time Of Day framework",
    parameters = {
      Alias = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
        description = "A non-volatile handle used to reference this instance. Alias provides a mechanism for an ACS to label this instance for future reference.",
      },
      Name = {
        access = "readOnly",
        type = "string",
        description = "Name of the Time Of Day schedule.",
      },
      FriendlyName = {
        access = "readWrite",
        type = "string",
        description = "Name of the Timer.",
      },
      StartTime = {
        access = "readWrite",
        type = "string",
        description = "Start time of the schedule. In format of '[weekday],[weekday],...,:[hour]:[minute]'. Weekday can be any value of 'Mon, Tue, Wed, Thu, Fri, Sat, Sun, All'. 'All' means every weekday. Only one clock time '[hour]:[minute]' can be specified.",
      },
      StopTime = {
        access = "readWrite",
        type = "string",
        description = "Stop time of the schedule. In format of '[weekday],[weekday],...,:[hour]:[minute]'. Weekday can be any value of 'Mon, Tue, Wed, Thu, Fri, Sat, Sun, All'. 'All' means every weekday. Only one clock time '[hour]:[minute]' can be specified.",
      },
      Enabled = {
        access = "readWrite",
        type = "boolean",
        description = "The flag to enable or disable the schedule.",
      },
      Actions = {
        access = "readWrite",
        type = "string",
        description = "List of actions this timer is added to"
      }
    }
  },
  aliasDefault = "Name",
}

local mapper, commitapply, tonumber = mapper, commitapply, tonumber
local uciHelper = mapper("ucihelper")
local getFromUci = uciHelper.get_from_uci
local setOnUci = uciHelper.set_on_uci
local configChanged

local todBinding = { config = "tod" }
local function getTodValue(key, option, default)
  todBinding.sectionname = key
  todBinding.option = option
  todBinding.default = default
  return getFromUci(todBinding)
end

local function setTodValue(key, option, value)
  todBinding.sectionname = key
  todBinding.option = option
  setOnUci(todBinding, value, commitapply)
  configChanged = true
end

local actionsForTimer
local clearActionsPerTimerCache
local addActionToTimer
local deleteActionFromTimer
do
  local function actionsForTimerInCache(timer, cache)
    local actions = cache[timer]
    if not actions then
      actions = {}
      cache[timer] = actions
    end
    return actions
  end

  local function addActionToActions(action, actions)
    if not actions[action] then
      actions[#actions+1] = action
      actions[action] = #actions
    end
  end

  local function addActionToTimerInCache(action, timer, cache)
    local actions = actionsForTimerInCache(timer, cache)
    addActionToActions(action, actions)
  end

  local function build_actionsPerTimerCache()
    local actionsPerTimer = {}
    todBinding.sectionname = "action"
    uciHelper.foreach_on_uci(todBinding, function(s)
      local action = s['.name']
      for _, timer in ipairs(s.timers or {}) do
        addActionToTimerInCache(action, timer, actionsPerTimer)
      end
    end)
    return actionsPerTimer
  end

  local actionsPerTimerCache
  local function timerActionMap()
    if not actionsPerTimerCache then
      actionsPerTimerCache = build_actionsPerTimerCache()
    end
    return actionsPerTimerCache
  end

  clearActionsPerTimerCache = function()
    actionsPerTimerCache = nil
  end

  actionsForTimer = function(timer)
    local cache = timerActionMap()
    return cache[timer] or {}
  end

  addActionToTimer = function(action, timer)
    local actions = actionsForTimer(timer)
    addActionToActions(action, actions)
  end

  deleteActionFromTimer = function(action, timer)
    local actions = actionsForTimer(timer)
    local idx = actions[action]
    if idx then
      actions[action] = nil
      table.remove(actions, idx)
    end
  end
end

Multi_X_000E50_TimeOfDay_Schedule_i_.entries = function()
  clearActionsPerTimerCache()
  local entries = {}
  todBinding.sectionname = "timer"
  uciHelper.foreach_on_uci(todBinding, function(s)
    entries[#entries + 1] = s[".name"]
  end)
  return entries
end

local function fromUci(option, default)
  return function(_, _, key)
    return getTodValue(key, option, default)
  end
end

Multi_X_000E50_TimeOfDay_Schedule_i_.get = {
  Name = function(_, _, key)
    return key
  end,
  Enabled = fromUci("enabled", "0"),
  StartTime = fromUci("start_time"),
  StopTime = fromUci("stop_time"),
  FriendlyName = fromUci("name"),
  Actions = function(mapping, _, key)
    local actions = actionsForTimer(key)
    local paths = {}
    for _, action in ipairs(actions) do
      paths[#paths+1] = resolve(mapping.actionTypePath, action)
    end
    return table.concat(paths, " ")
  end
}

local knownWeekDay = {
  Mon = true,
  Tue = true,
  Wed = true,
  Thu = true,
  Fri = true,
  Sat = true,
  Sun = true,
  All = true
}

local function validWeekdays(weekdays)
  for day in weekdays:gmatch("([^,]+)") do
    if not knownWeekDay[day] then
      return false
    end
  end
  return true
end

local function numberInRange(value, low, high)
  if not value and low and high then
    return false
  end

  return (low<=value) and (value<=high)
end

local function validTime(hour, minute)
  return numberInRange(hour, 0, 23) and numberInRange(minute, 0, 59)
end

local function validScheduleTime(time)
  local weekdays, hour, minute = time:match("^(.*):(%d+):(%d+)$")
  return validTime(tonumber(hour), tonumber(minute)) and
         validWeekdays(weekdays)
end

local function setTimeValue(option)
  return function(_, _, value, key)
    if not validScheduleTime(value) then
      return nil, "Invalid Time"
    end
    setTodValue(key, option, value)
  end
end

local function deleteTimerFromActionOnUci(timer, action)
  local timers = getTodValue(action, "timers")
  if timers=="" then
    return
  end
  local newTimers = {}
  for _, tm in ipairs(timers) do
    if tm~=timer then
      newTimers[#newTimers+1] = tm
    end
  end
  setTodValue(action, "timers", newTimers)
end

local function deleteTimerFromAction(timer, action)
  deleteTimerFromActionOnUci(timer, action)
  deleteActionFromTimer(action, timer)
end

local function addTimerToActionOnUci(timer, action)
  local timers = getTodValue(action, "timers")
  if timers == "" then
    timers = {timer}
  else
    timers[#timers+1] = timer
  end
  setTodValue(action, "timers", timers)
end

local function addTimerToAction(timer, action)
  addTimerToActionOnUci(timer, action)
  addActionToTimer(action, timer)
end

local function actionsFromXref(xref)
  local actions = {}
  for path in xref:gmatch("([^ ]+)") do
    local action = tokey(path)
    if not action then
      return nil, "Invalid reference "..path
    end
    actions[action] = true
  end
  return actions
end

local function removeUnwantedActions(timer, wanted, current)
  for _, action in ipairs(current) do
    if not wanted[action] then
      deleteTimerFromAction(timer, action)
    end
  end
end

local function addWantedActions(timer, wanted, current)
  for action in pairs(wanted) do
    if not current[action] then
      addTimerToAction(timer, action)
    end
  end
end

local function updateActionsForTimer(actions, timer)
  local currentActions = actionsForTimer(timer)
  removeUnwantedActions(timer, actions, currentActions)
  addWantedActions(timer, actions, currentActions)
end

Multi_X_000E50_TimeOfDay_Schedule_i_.set = {
  Enabled = function(_, _, value, key)
    setTodValue(key, "enabled", value)
  end,
  FriendlyName = function(_, _, value, key)
    setTodValue(key, "name", value)
  end,
  StartTime = setTimeValue("start_time"),
  StopTime = setTimeValue("stop_time"),
  Actions = function(_, _, value, key)
    local actions, err = actionsFromXref(value)
    if not actions then
      return nil, err
    end
    updateActionsForTimer(actions, key)
  end
}

local function duplicateCheck(timerName)
  todBinding.sectionname = timerName
  local result = uciHelper.getall_from_uci(todBinding)
  if next(result) then
    return true
  end
  return
end

local function generateTimerName()
  local key = uciHelper.generate_key()
  key = string.sub(key, 1, 8)
  local timerName = "schedule_" .. key
  return timerName
end

-- This is to add an new #ROOT.X_000E50_TimeOfDay.Schedule.{i}
-- We add a new config sectiontype timer with sectionname as schedule_key,
-- this section is mapped to the newly created instance.
Multi_X_000E50_TimeOfDay_Schedule_i_.add = function(mapping)
  local timer, isDuplicateTimer
  repeat
    timer = generateTimerName()
    isDuplicateTimer = duplicateCheck(timer)
  until not isDuplicateTimer
  uciHelper.set_on_uci({config = "tod", sectionname = timer}, "timer", commitapply)
  configChanged = true
  return timer
end

Multi_X_000E50_TimeOfDay_Schedule_i_.delete = function(mapping, key)
  uciHelper.delete_on_uci( { config = "tod", sectionname = key }, commitapply)
  -- References to this timer section are cleaned up.
  todBinding.sectionname = "action"
  uciHelper.foreach_on_uci(todBinding, function(s)
    local timersToSet = {}
    local timers = s.timers or {}
    for _, timer in ipairs(timers) do
      if timer ~= key then
        timersToSet[#timersToSet + 1] = timer
      end
    end
    todBinding.sectionname = s['.name']
    todBinding.option = "timers"
    -- tod throws an error if there is no timer for an action. Hence including dummy timer for safety.
    if not next(timersToSet) then
      timersToSet[#timersToSet + 1] = {" "}
    end
    uciHelper.set_on_uci(todBinding, timersToSet, commitapply)
  end)
  configChanged = true
  return true
end

Multi_X_000E50_TimeOfDay_Schedule_i_.commit = function()
  if configChanged then
    uciHelper.commit(todBinding)
  end
  configChanged = false
end

Multi_X_000E50_TimeOfDay_Schedule_i_.revert = function()
  if configChanged then
    uciHelper.revert(todBinding)
  end
  configChanged = false
end

local duplicator = mapper("multiroot").duplicate
local duplicate = duplicator(Multi_X_000E50_TimeOfDay_Schedule_i_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, mapping in ipairs(duplicate) do
  mapping.actionTypePath = mapping.objectType.name:match("^([^.]+)")..".X_000E50_TimeOfDay.Action.{i}."
  register(mapping)
end
