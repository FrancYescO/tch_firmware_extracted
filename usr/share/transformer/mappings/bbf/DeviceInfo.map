--NG-48510
--Automatically generated from InternetGatewayDevice:1.3 and Device:2.10
-- using generator version 2.3
local Multi_DeviceInfo_ = {
  objectType = {
    name = "#ROOT.DeviceInfo.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      DeviceCategory = {
        access = "readOnly",
        list = true,
        type = "string",
      },
      Manufacturer = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      ManufacturerOUI = {
        access = "readOnly",
        type = "string",
        min = "6",
        max = "6",
      },
      ModelName = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
        max = "64",
      },
      ModelNumber = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      Description = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
        max = "256",
      },
      ProductClass = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      SerialNumber = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      HardwareVersion = {
        access = "readOnly",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      SoftwareVersion = {
        access = "readOnly",
        activeNotify = "forceEnabled",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      AdditionalHardwareVersion = {
        access = "readOnly",
        list = true,
        max = "64",
        type = "string",
      },
      AdditionalSoftwareVersion = {
        access = "readOnly",
        list = true,
        max = "64",
        type = "string",
      },
      ProvisioningCode = {
        access = "readWrite",
        activeNotify = "forceEnabled",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      UpTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      FirstUseDate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      X_000E50_NewSoftwareBank = {
        access = "readWrite",
        type = "string",
        pathRef = true,
      },
      X_BELGACOM_CLID = {
        access = "readOnly",
        type = "string",
        max = "64",
        description = "Caller line identification",
      },
      X_BELGACOM_Telco = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "BGC",
          "OLO",
        },
        default = "BGC",
        description = "Telecommunication company",
      },
      X_BELGACOM_Refurbished = {
        access = "readWrite",
        type = "boolean",
      },
      X_BELGACOM_SSIDPrefix = {
        access = "readWrite",
        type = "string",
        default = "WiFi-PXS",
      },
      NewSoftwareBank = {
        access = "readWrite",
        type = "string",
        pathRef = true,
      },
      ModemFirmwareVersion = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      EnabledOptions = {
        access = "readOnly",
        list = true,
        max = "1024",
        type = "string",
      },
      DeviceLog = {
        access = "readOnly",
        type = "string",
        max = "32768",
      },
      SpecVersion = {
        access = "readOnly",
        status = "deprecated",
        forcedInform = "true",
        type = "string",
        max = "16",
        default = "1.0",
      },
      X_000E50_SoftwareVersionPassiveBank = {
        access = "readOnly",
        activeNotify = "forceEnabled",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      X_000E50_SwitchtoPassiveBank = {
        access = "readWrite",
        type = "boolean",
      },
      X_000E50_ReturnToFactoryDefaultsSoft = {
        access = "readWrite",
        type = "boolean",
      },
      X_000E50_BootloaderVersion = {
        access = "readOnly",
        type = "string",
      },
      X_000E50_RebootCause = {
        access = "readOnly",
        type = "string",
      },
      X_000E50_TotalSWReboot = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Counts the number of reboot done via CRASH, BOOTP, CLI, GUI, CWMP, STS, UERR, TR64 and resets the counter when the reboot reason is UPGRADE, ROLLBACK, SWOVER",
      },
      X_000E50_TotalHWReboot = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Counts the number of cold boot (reboot via power off) and resets the counter when the reboot reason is UPGRADE, ROLLBACK, SWOVER",
      },
      X_FASTWEB_TotalSWReboot = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Counts the number of reboot done via CRASH, BOOTP, CLI, GUI, CWMP, STS, UERR, TR64 and resets the counter when the reboot reason is UPGRADE, ROLLBACK, SWOVER",
      },
      X_FASTWEB_TotalHWReboot = {
        access = "readOnly",
        type = "unsignedInt",
        description = "Counts the number of cold boot (reboot via power off) and resets the counter when the reboot reason is UPGRADE, ROLLBACK, SWOVER",
      },
      X_0876FF_IPv6Capable = {
        access = "readOnly",
        type = "boolean",
      },
      X_0876FF_ScheduledReboot = {
        access = "readWrite",
        type = "boolean",
        description = "Enables/disables the scheduled reboot",
      },
      X_0876FF_RebootTime = {
        access = "readWrite",
        type = "dateTime",
        description = "Schedule a reboot at the specified date and time if X_0876FF_ScheduledReboot is enabled",
      },
      X_000E50_LabelMACAddress = {
        access = "readOnly",
        type = "string",
        description = "MAC address as printed on the device label",
      },
      X_0876FF_LabelMACAddress = {
        access = "readOnly",
        type = "string",
        description = "MAC address as printed on the device label",
      },
      X_TELMEX_COM_FriendlyName = {
        access = "readOnly",
        type = "string",
        description = "Device Product Friendly Name",
      },
      X_TELECOMITALIA_IT_Unlocked = {
        access = "readWrite",
        type = "boolean",
        description = "Unlock gateway to configure other ISP",
      },
      -- VendorConfigFileNumberOfEntries
      -- automatically created when Device.DeviceInfo.VendorConfigFile.{i}. is loaded
      -- SupportedDataModelNumberOfEntries
      -- automatically created when Device.DeviceInfo.SupportedDataModel.{i}. is loaded
      -- ProcessorNumberOfEntries
      -- automatically created when Device.DeviceInfo.Processor.{i}. is loaded
      -- VendorLogFileNumberOfEntries
      -- automatically created when Device.DeviceInfo.VendorLogFile.{i}. is loaded
      -- LocationNumberOfEntries
      -- automatically created when Device.DeviceInfo.Location.{i}. is loaded
      -- VendorConfigFileNumberOfEntries
      -- automatically created when InternetGatewayDevice.DeviceInfo.VendorConfigFile.{i}. is loaded
    }
  }
}

local mapper = mapper
local io = io
local string = string
local floor = math.floor
local open = io.open
local tostring, tonumber, os = tostring, tonumber, os
local pcall,tokey = pcall,tokey
local uci = require('uci')
local uciHelper = mapper("ucihelper")
local nwCommon = mapper("nwcommon")
local ubusConnection = mapper("ubus").connect()
local getFromUci = uciHelper.get_from_uci
local forEachOnUci = uciHelper.foreach_on_uci
local setOnUci = uciHelper.set_on_uci
local banktable = require "transformer.shared.banktable"
local validation = require "tch.validation"
local commitApply = commitapply
local networkBinding = { config = "network", option = "reqopts"}
local envBinding = {config = "env", sectionname = "var"}
local versionBinding = { config = "versioncusto", sectionname = "override", option = "fwversion_prefix" }
local rtfdsBinding = { config = "env", sectionname = "var", option = "rtfds", default = "0" }
local cwmpBinding = {config = "cwmpd", sectionname = "cwmpd_config", option = "firstusedate"}
local sysBinding = { config = "system" }
local systemBinding = { config = "system", sectionname = "@system[0]", extended = true }
local envRipBinding = { config = "env", sectionname = "rip", option = "eth_mac" }
local wansensingBinding = { config = "wansensing" }
local webBinding = { config = "web" }
local ethernetBinding = { config = "ethernet" }
local webserviceBinding = { config = "webservice" }
local rip_entry_Refurbished = "c100"
local rip_entry_SSIDPrefix = "c101"
local transactions = {}
--Reference - https://confluence.technicolor.com/display/Linux/Syslog+implementation+and+configuration

local valueMap = {
  ["0"] = "PWR",
  ["1"] = "CRASH",
  ["2"] = "BOOTP",
  ["3"] = "CLI",
  ["4"] = "GUI",
  ["5"] = "CWMP",
  ["6"] = "STS",
  ["7"] = "UERR",
  ["8"] = "UPGRADE",
  ["9"] = "ROLLBACK",
  ["10"] = "SWOVER",
}

local friendlyNameMap = {
  ["589Ovac"] = "o-box 3 ac /T:o-box 3",
  ["589Bvac"] = "b-box 3 ac /T:b-box 3",
  ["789Ovac"] = "o-box 3v ac /T:o-box 3",
  ["789Bvac"] = "b-box 3v ac /T:b-box 3",
  ["589Ovn"] = "o-box 3 /T:o-box 3",
  ["589Bvn"] = "b-box 3 /T:b-box 3",
  ["789Ovn"] = "o-box 3v /T:o-box 3",
  ["789Bvn"] = "b-box 3v /T:b-box 3"
}

local prodVariables = {
  "prod_number",
  "PXS_productname",
  "PXS_VCI_VLAN20",
  "PXS_VCI_VLAN30",
  "PXS_VCI_wanMPTCP_LTEGW",
  "PXS_VCI_wanBackup",
  "PXS_nas_id",
}

local function firstline(filename, nb)
  local fd = open(filename)
  if not fd then
    -- you could return nil and and error message but that will abort
    -- iterating over all parameters.
    -- so here I opt to just return an empty string.
    return ""
  end
  local result = fd:read(nb or "*l")
  fd:close()
  return result
end

local function friendlyName(mapping)
  envBinding.option = "prod_description"
  local value = getFromUci(envBinding)
  if value == "" then
    value = firstline("/proc/rip/0040")
  end
  mapping.get.Description = value
  return value
end

local function PassiveBankVersion()
  local value = banktable.getOtherVersion() or "Unknown"
  value = value:match("([^%-]+)%-")
  if not value then
    return "Unknown"
  end
  return value
end

local function switchOverToNewSoftwareBank(mapping,param,value)
  local path = param:match("X_000E50_") and "Device.DeviceInfo.X_000E50_SoftwareBank.{i}." or "Device.DeviceInfo.SoftwareBank.{i}."
  local error, key = pcall(tokey, value, path)
  if not error then
    return nil, "invalid value"
  elseif key ~= "notbooted" then
    return nil, "Cannot Switch Over"
  end
  commitApply:newset("switchOver")
end

local function rip_entry_exists(entry)
  return lfs.attributes("/proc/rip/" .. entry, "mode") == "file"
end

local function rip_entry_write(entry, value)
  if value then
    local f = io.open("/proc/rip/" .. entry, "w")
    if f then
      f:write(value)
      f:close()
    else
      return nil, "unexpected write error to rip"
    end
  end
  return true
end

local function rip_entry_read(entry)
  local f = io.open("/proc/rip/" .. entry, "r")
  if not f then
    return nil, "unexpected read error to rip"
  end

  local value = f:read("*all")
  if value then
    value = value:gsub('\n$', '')
  end

  f:close()

  return value
end

local function rip_entry_create(entry)
    return rip_entry_write("new", entry)
end

Multi_DeviceInfo_.get = {
  DeviceCategory = "",
  Manufacturer = function(mapping)
    envBinding.option = "company"
    local value = getFromUci(envBinding)
    if value == "" then
      value = "Technicolor"
    end
    mapping.get.Manufacturer = value
    return value
  end,
  ManufacturerOUI = function(mapping)
    envBinding.option = "oui_override_igd"
    local value = getFromUci(envBinding)
    if value == "" then
        envBinding.option = "oui"
        value = getFromUci(envBinding)
    end
    mapping.get.ManufacturerOUI = value
    return value
  end,
  ModelName = function()
    envBinding.option = "variant_friendly_name"
    return getFromUci(envBinding)
  end,
  ModelNumber = function(mapping)
    envBinding.option = "prod_number"
    local value = getFromUci(envBinding)
    mapping.get.ModelNumber = value
    return value
  end,
  Description = function(mapping)
    return friendlyName(mapping)
  end,
  ProductClass = function(mapping)
    envBinding.option = "prod_friendly_name"
    local value = getFromUci(envBinding)
    mapping.get.ProductClass = value
    return value
  end,
  SerialNumber = function(mapping)
    envBinding.option = "serial"
    local value = getFromUci(envBinding)
    mapping.get.SerialNumber = value
    return value
  end,
  HardwareVersion = function(mapping)
    envBinding.option = "hardware_version"
    local value = getFromUci(envBinding)
    mapping.get.HardwareVersion = value
    return value
  end,
  SoftwareVersion = function(mapping)
    envBinding.option = "friendly_sw_version_activebank"
    local value = getFromUci(envBinding)
    local newvalue = value:match("^([^-]+%-[^-]+)")
    if newvalue then
      value = newvalue
    end
    versionBinding.option = "fwversion_prefix"
    local fwp = getFromUci(versionBinding)
    versionBinding.option = "fwversion_suffix"
    local fws = getFromUci(versionBinding)
    versionBinding.option = "fwversion_override"
    local fwover = getFromUci(versionBinding)
    if fwover ~= "" and fwover ~= "override1" then
      value = fwover
    end
    value = fwp .. value .. fws
    versionBinding.option = "fwversion_seperator"
    local seperator = getFromUci(versionBinding)
    if seperator ~= "" then
        value = value:gsub("%.", seperator)
    end
    mapping.get.SoftwareVersion = value
    return value
  end,
  AdditionalSoftwareVersion = function(mapping)
    envBinding.option = "friendly_sw_version_activebank"
    local value = getFromUci(envBinding)
    local newvalue = value:match("([%x]+)$")
    if newvalue then
       value = newvalue
    end
    mapping.get.AdditionalSoftwareVersion = value
    return value
  end,
  AdditionalHardwareVersion = "",
  ProvisioningCode = function()
    envBinding.option = "provisioning_code"
    return getFromUci(envBinding)
  end,
  UpTime = function()
    local fd, msg = open("/proc/uptime")
    if not fd then
      return fd, msg
    end
    local uptime = fd:read("*n")
    fd:close()
    return tostring(floor(uptime))
  end,
  FirstUseDate = function()
    local value = getFromUci(cwmpBinding)
    return value ~= "" and value or "0001-01-01T00:00:00Z"
  end,
  NewSoftwareBank = "",
  X_000E50_NewSoftwareBank = "",
  X_BELGACOM_CLID = function()
    networkBinding.sectionname = "interface"
    local interface
    forEachOnUci(networkBinding, function(s)
      if s["reqopts"] and s["reqopts"]:match("129") then
        interface = s[".name"]
        return false
      end
    end)
    if interface then
      local ubusStatus = ubusConnection:call("network.interface." .. interface, "status", {})
      if ubusStatus and ubusStatus["data"] and ubusStatus["data"]["passthru"] then
        local ubusReqOpt = nwCommon.get_dhcp_tag_value(ubusStatus["data"]["passthru"])
        return ubusReqOpt and ubusReqOpt["129"] and nwCommon.hex2String(ubusReqOpt["129"]) or ""
      end
    end
    return ""
  end,
  X_BELGACOM_Telco = function()
    envBinding.option = "BGC_VARIANT"
    local value = getFromUci(envBinding)
    return value ~= "" and value or "BGC"
  end,
  X_BELGACOM_Refurbished = function()
    if rip_entry_exists(rip_entry_Refurbished) then
      return "1"
    else
      return "0"
    end
  end,
  X_BELGACOM_SSIDPrefix = function()
    if rip_entry_exists(rip_entry_SSIDPrefix) then
      return rip_entry_read(rip_entry_SSIDPrefix)
    end
    return "WiFi-PXS"
  end,
  -- Applicable only when the modem firmware is separable from the overall CPE software
  ModemFirmwareVersion = function(mapping)
    local dsl_supported, dsl = pcall(require,"transformer.shared.xdslctl")
    local version = ""
    if dsl_supported then
        version = dsl.infoValue('firmware_version')
    end
    mapping.get.ModemFirmwareVersion = version
    return version
  end,
  EnabledOptions = "",
  DeviceLog = function()
    local log = io.popen("/sbin/logread")
    if not log then
      return ""
    end
    local logString = log:read("*a")
    log:close()
    if not logString then
      return ""
    end
    return string.sub(logString, -32768)
  end,
  -- Obsolute, must be set to 1.0 by TR-098-Amdt2
  SpecVersion = "1.0",
  X_000E50_SoftwareVersionPassiveBank = function()
      local value = PassiveBankVersion()
      if value ~= "Unknown" then
          versionBinding.option = "fwversion_prefix"
          local fwp = getFromUci(versionBinding)
          versionBinding.option = "fwversion_suffix"
          local fws = getFromUci(versionBinding)
          value = fwp .. value .. fws
          versionBinding.option = "fwversion_seperator"
          local seperator = getFromUci(versionBinding)
          if seperator ~= "" then
            value = value:gsub("%.", seperator)
          end
      end
      return value
  end,
  X_000E50_SwitchtoPassiveBank = "0",
  X_000E50_ReturnToFactoryDefaultsSoft = function()
    local value = getFromUci(rtfdsBinding)
    return value
  end,
  X_000E50_BootloaderVersion = function()
    envBinding.option = "bootloader_version"
    return getFromUci(envBinding)
  end,
  X_000E50_RebootCause = function()
    sysBinding.sectionname = "warmboot"
    sysBinding.option = "reboot"
    return valueMap[getFromUci(sysBinding)] or ""
  end,
  X_000E50_TotalSWReboot = function()
    systemBinding.option = "sw_reboot_count"
    systemBinding.default = "0"
    return getFromUci(systemBinding)
  end,
  X_000E50_TotalHWReboot = function()
    systemBinding.option = "hw_reboot_count"
    systemBinding.default = "0"
    return getFromUci(systemBinding)
  end,
  X_0876FF_IPv6Capable = "1",
  X_0876FF_ScheduledReboot = function()
    sysBinding.sectionname = "scheduledreboot"
    sysBinding.option = "enabled"
    sysBinding.default = "0"
    return getFromUci(sysBinding)
  end,
  X_0876FF_RebootTime = function()
    sysBinding.sectionname = "scheduledreboot"
    sysBinding.option = "time"
    sysBinding.default = nil
    return getFromUci(sysBinding)
  end,
  X_000E50_LabelMACAddress = function()
    return getFromUci(envRipBinding)
  end,
  X_TELMEX_COM_FriendlyName = function()
    envBinding.option = "prod_friendly_name"
    return getFromUci(envBinding)
  end,
  X_TELECOMITALIA_IT_Unlocked = function()
    envBinding.option = "unlockedstatus"
    return getFromUci(envBinding)
  end,
}

Multi_DeviceInfo_.get.X_0876FF_LabelMACAddress = Multi_DeviceInfo_.get.X_000E50_LabelMACAddress
Multi_DeviceInfo_.get.X_FASTWEB_TotalSWReboot = Multi_DeviceInfo_.get.X_000E50_TotalSWReboot
Multi_DeviceInfo_.get.X_FASTWEB_TotalHWReboot = Multi_DeviceInfo_.get.X_000E50_TotalHWReboot

--- set the given value to corresponding section and option in /var/state
-- @function setScheduledReboot
-- @param section #string holds the sectionname in which the value has to be stored
-- @param option #string holds the option name in which the value has to be stored
-- @param value #string holds the value to be stored in the given section and option
local function setScheduledReboot(section, option, value)
  local cursor = uci.cursor(nil, "/var/state")
  local scheduledreboot = cursor:get("system", section)
  if not scheduledreboot then
    cursor:set("system", section, section)
  end
  local enabled = cursor:get("system", section, option)
  if enabled then
    cursor:revert("system", section, option)
  end
  cursor:set("system", section, option, value)
  cursor:save("system")
  cursor:close()
end

local function setVariant(option, value)
  envBinding.option = option
  local currVal = getFromUci(envBinding)
  if value == "BGC" then
    currVal = currVal:match("Ovac") and currVal:gsub("Ovac", "Bvac") or currVal:gsub("Ovn", "Bvn")
  else
    currVal = currVal:match("Bvac") and currVal:gsub("Bvac", "Ovac") or currVal:gsub("Bvn", "Ovn")
  end
  setOnUci(envBinding, currVal, commitApply)
end

local function setProdVariables(value)
  for _, param in ipairs(prodVariables) do
    setVariant(param, value)
  end
  envBinding.option = "PXS_productname"
  local productName = getFromUci(envBinding)
  if friendlyNameMap[productName] then
    local prod, pxs = friendlyNameMap[productName]:match("([^:]+):([^:]+)")
    if prod then
      envBinding.option = "prod_friendly_name"
      setOnUci(envBinding, prod, commitApply)
      envBinding.option = "PXS_friendly_name"
      setOnUci(envBinding, pxs, commitApply)
    end
  end
end

local function setUciValue(binding, sectionname, option, value)
  binding.sectionname = sectionname
  binding.option = option
  setOnUci(binding, value, commitapply)
  transactions[binding.config] = true
end

local function setUnlockStatus(value)
  envBinding.option = "unlockGUIbutton"
  if value == "1" then
    ----create new password for admin user with get_access_key 1
    local check = string.format("name=$(uci get web.%s.name); ackey=$(/usr/bin/get_access_key 2>&1); SRP=$(newsrpuser -f -u $name -p $ackey); echo $SRP","usr_admin")
    local handle = io.popen(check)
    local srp = handle:read("*a")
    handle:close()
    local srp2 = string.gsub(srp, "%s", "_")
    local handle = io.popen("SRP="..srp2.."; SALT=$(echo $SRP | cut -d_ -f1); echo $SALT")
    local salt = handle:read("*a")
    handle:close()
    local handle = io.popen("SRP="..srp2.."; VERIFIER=$(echo $SRP | cut -d_ -f2); echo $VERIFIER")
    local verifier = handle:read("*a")
    handle:close()
    setUciValue(webBinding, "usr_admin", "srp_salt", string.gsub(salt, "%s", ""))
    setUciValue(webBinding, "usr_admin", "srp_verifier", string.gsub(verifier, "%s", ""))
    setUciValue(webBinding, "usr_admin", "password_reminder", "1")
    setUciValue(webBinding, "usr_admin", "role", "ispuser")
    setUciValue(wansensingBinding, "global", "enable", "0")
    setUciValue(networkBinding, "public_lan", "auto", "0")
	setUciValue(webserviceBinding, "admin", "role", "disabled")		
    wansensingBinding.section = "global"
    wansensingBinding.option = "l2type"
    local currentl2 = getFromUci(wansensingBinding)
    if currentl2 == "" then
      setUciValue(networkBinding, "wan", "ifname", "wanptm0")
      setUciValue(networkBinding, "lan", "pppoerelay", {"wanptm0"})
    end
    networkBinding.sectionname = "wwan"
    networkBinding.option = "auto"
    local wwanIfState = getFromUci(networkBinding)
    cwmpBinding.sectionname = "cwmpd_config"
    cwmpBinding.option = "interface"
    if wwanIfState == "1" then
      setUciValue(networkBinding, "wwan", "auto", "0")
    end
    envRipBinding.option = "sfp"
    local sfpState = getFromUci(envRipBinding) or ""
    if sfpState == "1" and currentl2 ~= "ETH" then
      setUciValue(ethernetBinding,"globals","eth4lanwanmode","1")
    end
	setUciValue(cwmpBinding, "cwmpd_config", "state", "0")
  else
    setUciValue(webBinding, "usr_admin", "role", "admin")
    setUciValue(webBinding, "usr_admin", "password_reminder", "0")
    setUciValue(wansensingBinding, "global", "enable", "1")
	setUciValue(webserviceBinding, "admin", "role", "device2")
	setUciValue(cwmpBinding, "cwmpd_config", "state", "1")
  end
  setUciValue(envBinding, "var", "unlockedstatus", value)
end

Multi_DeviceInfo_.set = {
  ProvisioningCode = function(mapping,param,value)
    envBinding.option = "provisioning_code"
    setOnUci(envBinding, value, commitApply)
    transactions[envBinding.config] = true
  end,
  X_000E50_SwitchtoPassiveBank = function(mapping,param,value)
    if banktable.isOtherBankValid() then
      commitApply:newset("switchOver")
    else
      return nil, "No software in passive bank"
    end
  end,
  X_000E50_ReturnToFactoryDefaultsSoft = function(mapping,param,value)
    setOnUci(rtfdsBinding, value, commitApply)
    transactions[rtfdsBinding.config] = true
  end,
  X_BELGACOM_Telco = function(mapping, param, value)
    envBinding.option = "BGC_VARIANT"
    setOnUci(envBinding, value, commitApply)
    setProdVariables(value)
    transactions[envBinding.config] = true
  end,
  X_BELGACOM_Refurbished = function(mapping, param, value)
    if value == "1" then
       if not rip_entry_exists(rip_entry_Refurbished) then
          local ret = rip_entry_create(rip_entry_Refurbished)
          if not ret then
            return nil, "Creating Refurbishment entry in rip failed"
          end
          ret = rip_entry_write(rip_entry_Refurbished,"1")
          if not ret then
            return nil, "Writing Refurbishment entry in rip failed"
          end
        end
    else
      if rip_entry_exists(rip_entry_Refurbished) then
        return nil, "Refurbishment can not be undone"
      end
    end
  end,
  X_BELGACOM_SSIDPrefix = function(mapping, param, value)
    if not rip_entry_exists(rip_entry_SSIDPrefix) then
      local ret = rip_entry_create(rip_entry_SSIDPrefix)
      if not ret then
        return nil, "Creating SSIDPrefix entry in rip failed"
      end
    end
    local ret = rip_entry_write(rip_entry_SSIDPrefix,value)
    if not ret then
      return nil, "Writing Refurbishment entry in rip failed"
    end
  end,
  X_000E50_NewSoftwareBank = switchOverToNewSoftwareBank,
  NewSoftwareBank = switchOverToNewSoftwareBank,
  X_0876FF_ScheduledReboot = function(mapping, param, value, key)
    setScheduledReboot("scheduledreboot", "enabled", value)
  end,
  X_0876FF_RebootTime = function(mapping, param, value, key)
    local validTime, errMsg = validation.validateTime(value, true)
    if not validTime then
      return nil, errMsg
    end
    setScheduledReboot("scheduledreboot", "time", value)
    commitApply:newset("scheduledReboot")
  end,
  X_TELECOMITALIA_IT_Unlocked = function(mapping,param,value)
    setUnlockStatus(value)
  end
}

Multi_DeviceInfo_.commit = function()
  for config in pairs(transactions) do
    uciHelper.commit({config = config})
  end
  transactions = {}
end

Multi_DeviceInfo_.revert = function()
  for config in pairs(transactions) do
    uciHelper.revert({config = config})
  end
  transactions = {}
end

local function setUciEventClid(mapping, action, config, sectionType, sectionName, option)
  networkBinding.sectionname = sectionName
  local reqOption = getFromUci(networkBinding)
  if reqOption and reqOption:match("129") then
    local ubusStatus = ubusConnection:call("network.interface." .. sectionName, "status", {})
    if ubusStatus and ubusStatus["data"] and ubusStatus["data"]["passthru"] then
      return { { key = "", paramname = "X_BELGACOM_CLID" } }
    end
  end
end

local function setUciEventProvisioningCode(mapping, action, config, sectionType, sectionName, option)
  return { { key = "", paramname = "ProvisioningCode" } }
end



Multi_DeviceInfo_.add_watchers = function(mapping)
  local uciEventSource = eventsource("uci")
  if mapping.objectType.parameters["X_BELGACOM_CLID"] then
    uciEventSource.watch(mapping, { set = setUciEventClid }, "network", "interface", nil, "reqopts")
  end
  uciEventSource.watch(mapping, { set = setUciEventProvisioningCode }, "env", "envvars", nil, "provisioning_code")
end

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_DeviceInfo_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  if dupli.objectType.name:match("^InternetGatewayDevice.") then
    dupli.objectType.parameters["X_000E50_NewSoftwareBank"] = nil
    dupli.objectType.parameters["NewSoftwareBank"] = nil
  else
    -- Remove igd-specific parameters from device2
    dupli.objectType.parameters["ModemFirmwareVersion"] = nil
    dupli.objectType.parameters["EnabledOptions"] = nil
    dupli.objectType.parameters["DeviceLog"] = nil
    dupli.objectType.parameters["X_000E50_ReturnToFactoryDefaultsSoft"] = nil
    dupli.objectType.parameters["X_000E50_SoftwareVersionPassiveBank"] = nil
    dupli.objectType.parameters["SpecVersion"] = nil
    dupli.objectType.parameters["X_000E50_SwitchtoPassiveBank"] = nil
    dupli.objectType.parameters["X_0876FF_LabelMACAddress"] = nil
    dupli.objectType.parameters["X_000E50_LabelMACAddress"] = nil
  end
  register(dupli)
end

