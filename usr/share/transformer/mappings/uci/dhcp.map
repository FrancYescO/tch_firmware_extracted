local mapper = mapper
local config_dhcp = "dhcp"

-- uci.dhcp
mapper("uci_1to1").registerConfigMap(config_dhcp)

-- uci.dhcp.dnsmasq.{i}
local dhcp_dnsmasq = {
    config = config_dhcp,
    type = "dnsmasq",
    options = {
        "add_local_domain", "add_local_hostname", "authoritative", "boguspriv",
        "cachelocal", "cachesize", "dhcp_boot", "dhcphostsfile", "dhcpleasemax", "dnsforwardmax", "domain",
        "domainneeded", "ednspacket_max", "enable_tftp", "expandhosts", "filterwin2k", "fqdn",
        "leasefile", "local", "localise_queries", "logqueries", "nodaemon", "nohosts", "nonegcache", "noresolv",
        "nonwildcard", "port", "queryport", "readethers", "resolvfile", "strictorder",
        "tftp_root", "rebind_protection", "rebind_localhost"
    },
    lists = {
        "addnhosts", "bogusnxdomain", "interface", "notinterface", "server","rebind_domain",
    }
}

mapper("uci_1to1").registerMultiMap(dhcp_dnsmasq)

-- uci.dhcp.dhcp.{i}
local dhcp_dhcp = {
    config = config_dhcp,
    type = "dhcp",
    options = {
        "dynamicdhcp", "force", "ignore", "interface", "leasetime", "limit", "networkid", "start"
    },
    lists = {
        "dhcp_option",
    }
}

mapper("uci_1to1").registerNamedMultiMap(dhcp_dhcp)

-- uci.dhcp.host.{i}
local dhcp_host = {
    config = config_dhcp,
    type = "host",
    options = { "ip", "mac", "name", "owner" }
}

mapper("uci_1to1").registerMultiMap(dhcp_host)

-- uci.dhcp.classifier.{i}
local dhcp_classifier = {
    config = config_dhcp,
    type = "classifier",
    options = { "mac", "vendorclass", "userclass", "circuitid", "remoteid", "subscrid" }
}

mapper("uci_1to1").registerMultiMap(dhcp_classifier)

-- uci.dhcp.boot.{i}
local dhcp_boot = {
    config = config_dhcp,
    type = "boot",
    options = { "filename", "networkid", "serveraddress", "servername" },
    lists = {
        "dhcp_option",
    }
}

mapper("uci_1to1").registerMultiMap(dhcp_boot)

-- uci.dhcp.dnsrule.{i}
local dhcp_dnsrule = {
    config = config_dhcp,
    type = "dnsrule",
    options = { "dnsset", "policy", "data", }
}

mapper("uci_1to1").registerMultiMap(dhcp_dnsrule)

