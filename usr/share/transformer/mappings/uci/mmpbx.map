local mapper = mapper
local config_mmpbx = "mmpbx"

-- uci.mmpbx
mapper("uci_1to1").registerConfigMap(config_mmpbx)

-- uci.mmpbx.mmpbx
local mmpbx_mmpbx = {
  config = config_mmpbx,
  type = "mmpbx",
  options = { "cw_reject_scope", "country", "trace_level", "enabled" }
}
mapper("uci_1to1").registerNamedMultiMap(mmpbx_mmpbx)

-- uci.mmpbx.network
local mmpbx_network = {
  config = config_mmpbx,
  type = "network",
  options = { "name", "user_friendly_name", "cac", "transparent_soc_transmission", "config", }
}
mapper("uci_1to1").registerNamedMultiMap(mmpbx_network)

-- uci.mmpbx.profile
mmpbx_network = {
  config = config_mmpbx,
  type = "profile",
  options = { "config", }
}
mapper("uci_1to1").registerNamedMultiMap(mmpbx_network)

--uci.mmpbx.internal_map
local mmpbx_internalmap = {
  config = config_mmpbx,
  type = "internal_map",
  options = { "profile", "device" },
}
mapper("uci_1to1").registerMultiMap(mmpbx_internalmap)

--uci.mmpbx.incoming_map
local mmpbx_inmap = {
  config = config_mmpbx,
  type = "incoming_map",
  options = { "profile"},
  lists = {"device"}
}
mapper("uci_1to1").registerMultiMap(mmpbx_inmap)


--uci.mmpbx.outmap
local mmpbx_outmap = {
  config = config_mmpbx,
  type = "outgoing_map",
  options = { "device"},
   lists = {"profile","priority"}
}
mapper("uci_1to1").registerMultiMap(mmpbx_outmap)

-- uci.mmpbx.service
local mmpbx_service = {
  config = config_mmpbx,
  type = "service",
  options = {"type", "provisioned", "activated", "timeout", "cw_reject_persistency", "destination"},
  lists = {"profile", "device"},
}
mapper("uci_1to1").registerMultiMap(mmpbx_service)

--uci.mmpbx.scc
local mmpbx_scc = {
  config = config_mmpbx,
  type = "scc",
  options = {"eon", "seperator", "inter_digit_timer", "mode" },
}
mapper("uci_1to1").registerMultiMap(mmpbx_scc)

--uci.mmpbx.scc_entry
local mmpbx_scc_entry = {
  config = config_mmpbx,
  type = "scc_entry",
  options = {"scc", "service_base", "pattern", "service_type", "action", "enabled"},
}
mapper("uci_1to1").registerMultiMap(mmpbx_scc_entry)

--uci.mmpbx.codec
local mmpbx_codec = {
  config = config_mmpbx,
  type = "codec_filter",
  options = {"name", "media_filter", "allow", "priority", "remove_silence_suppression", "packetization_time"},
}
mapper("uci_1to1").registerMultiMap(mmpbx_codec)
