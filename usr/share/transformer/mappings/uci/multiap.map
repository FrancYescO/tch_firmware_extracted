
local config_multiap = "multiap"

-- uci.multiap
mapper("uci_1to1").registerConfigMap(config_multiap)

-- uci.multiap.al_entity
local multiap_al_entity = {
  config = config_multiap,
  section = "al_entity",
  type = "global",
  options = { "interfaces" }
}

mapper("uci_1to1").registerSimpleMap(multiap_al_entity)

-- uci.multiap.agent
local multiap_agent = {
  config = config_multiap,
  section = "agent",
  type = "global",
  options = { "enabled", "bss_list", "default_hysteresis_margin", "macaddress", "backhaul_link" }
}

mapper("uci_1to1").registerSimpleMap(multiap_agent)

-- uci.multiap.controller
local multiap_controller = {
  config = config_multiap,
  section = "controller",
  type = "global",
  options = { "enabled", "macaddress", "preferred_bh_iface", "mgmt_ipc_report_interval" }
}

mapper("uci_1to1").registerSimpleMap(multiap_controller)

-- uci.multiap.controller_capabilities
local multiap_controller_capabilities = {
  config = config_multiap,
  section = "controller_capabilities",
  type = "controller_capabilities",
  options = { "freq_2_4g", "freq_5g", "freq_60g" }
}

mapper("uci_1to1").registerSimpleMap(multiap_controller_capabilities)

-- uci.multiap.controller_policy_config
local multiap_controller_policy_config = {
  config = config_multiap,
  section = "controller_policy_config",
  type = "controller_policy_config",
  options = { "metrics_report_interval", "sta_metrics_rssi_threshold_dbm", "sta_metrics_rssi_hysteresis_margin", "ap_metrics_channel_utilization_threshold_dbm", "sta_link_sta_traffic_stats" }
}

mapper("uci_1to1").registerSimpleMap(multiap_controller_policy_config)

-- uci.multiap.controller_credentials
local multiap_controller_credentials = {
  config = config_multiap,
  type = "controller_credentials",
  options = { "state", "ssid", "wpa_psk_key", "security_mode", "fronthaul", "backhaul", "frequency_bands" }
}

mapper("uci_1to1").registerNamedMultiMap(multiap_controller_credentials)

