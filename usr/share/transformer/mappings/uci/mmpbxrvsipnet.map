local mapper = mapper
local config_mmpbxrvsipnet = "mmpbxrvsipnet"
local uci_helper = mapper("ucihelper")
local crypto = require("tch.simplecrypto")
local transactions = {}
local match = string.match
-- uci,mmpbxrvsipnet
mapper("uci_1to1").registerConfigMap(config_mmpbxrvsipnet)

-- uci.mmpbxrvsipnet.radvision
local mmpbxrvsipnet_radvision = {
  config = config_mmpbxrvsipnet,
  type = "radvision",
  options = { "trace"}
}
mapper("uci_1to1").registerNamedMultiMap(mmpbxrvsipnet_radvision)

-- uci.mmpbxrvsipnet.network
local mmpbxrvsipnet_network = {
  config = config_mmpbxrvsipnet,
  type = "network",
  options = {
    "user_friendly_name",
    "cac",
    "transparent_soc_transmission",
    "domain_name",
    "interface",
    "interface6",
    "local_port",
    "primary_proxy",
    "primary_proxy_port",
    "secondary_proxy",
    "secondary_proxy_port",
    "primary_registrar",
    "primary_registrar_port",
    "secondary_registrar",
    "secondary_registrar_port",
    "transport_type",
    "reg_expire",
    "reg_expire_T_before",
    "reg_back_off_timeout",
    "realm",
    "realm_check",
    "401_407_waiting_time",
    "dtmf_relay",
    "dtmf_relay_translation",
    "timer_T1",
    "timer_T2",
    "timer_T4",
    "timer_B",
    "timer_D",
    "timer_F",
    "timer_J",
    "provisional_timer",
    "sdp_call_hold_direction",
    "uri_clir_format",
    "privacy_handling",
    "rejection_response",
    "no_answer_response",
    "call_waiting_provisional_response",
    "call_waiting_reject_response",
    "reliable_provisional_response",
    "re_registration_mode",
    "forking_mode",
    "ingress_media_timeout",
    "session_timer",
    "min_session_expires",
    "session_expires",
    "fail_behaviour",
    "min_period_proxy_redundancy",
    "escape_hash",
    "escape_star",
    "control_qos_field",
    "control_qos_value",
    "realtime_qos_field",
    "realtime_qos_value",
    "fax_transport",
    "early_detect_fax",
    "reinvite_stop_audio",
    "rport_in_via",
    "rtp_local_port_min",
    "rtp_local_port_max",
    "switch_back_to_primary_proxy_timer",
    "proxy_selection_policy",
    "invite_expire_timer",
  }
}
mapper("uci_1to1").registerNamedMultiMap(mmpbxrvsipnet_network)

local function isEncrypted(data)
  return #data >=72 and match(data,"^$%d%d$%d%d%$")
end

--uci.mmpbxrvsipnet.mmpbxrvsipnet
local mmpbxrvsipnet_mmpbxrvsipnet = {
  config = config_mmpbxrvsipnet,
  type = "mmpbxrvsipnet",
  options = { "trace_level", "radvision_trace_level"},
}
mapper("uci_1to1").registerNamedMultiMap(mmpbxrvsipnet_mmpbxrvsipnet)


--uci.mmpbxrvsipnet.profile
local uci_helper = mapper("ucihelper")
local mmpbxrvsipnet_binding = { config = "mmpbxrvsipnet" , sectionname = "profile"}
local mmpbxrvsipnet_profile = {
  objectType = {
    name = "uci.mmpbxrvsipnet.profile.@.",
      access = "readOnly",
      minEntries = 0,
      maxEntries = math.huge,
      parameters = {
        enabled = {
          access = "readWrite",
          type = "boolean",
        },
        user_name = {
           access = "readWrite",
           type = "string",
        },
        password = {
           access = "readWrite",
           type = "password",
        },
        uri = {
           access = "readWrite",
           type = "string",
        },
        display_name = {
           access = "readWrite",
           type = "string",
        },
        network = {
           access = "readWrite",
           type = "string",
        },
     }
  }
}

mmpbxrvsipnet_profile.entries =  function()
  local entries = {}
  mmpbxrvsipnet_binding.sectionname = "profile"
  uci_helper.foreach_on_uci(mmpbxrvsipnet_binding, function(s)
    entries[#entries+1] = s['.name']
  end)
  return entries
end

mmpbxrvsipnet_profile.get = function(mapping, param, key)
  mmpbxrvsipnet_binding.option = param
  mmpbxrvsipnet_binding.sectionname = key
  local value = uci_helper.get_from_uci(mmpbxrvsipnet_binding)
  if param == "password" then
    if not isEncrypted(value) then
      local errMsg
      value, errMsg = crypto.encrypt_keysel(value, crypto.AES_256_CBC, crypto.RIP_RANDOM_A)
      if not value then
        return nil, errMsg
      end
    end
  end
  return value
end

mmpbxrvsipnet_profile.set = function(mapping, param, value, key)
  mmpbxrvsipnet_binding.sectionname = key
  mmpbxrvsipnet_binding.option = param
  if param == "password" then
    local errMsg
    if not isEncrypted(value) then
      value, errMsg = crypto.encrypt_keysel(value, crypto.AES_256_CBC, crypto.RIP_RANDOM_A)
      if not value then
        return nil, errMsg
      else
        uci_helper.set_on_uci(mmpbxrvsipnet_binding, value,commitapply)
        transactions[mmpbxrvsipnet_binding.config] = true
      end
    end
  end
  uci_helper.set_on_uci(mmpbxrvsipnet_binding, value,commitapply)
  transactions[mmpbxrvsipnet_binding.config] = true
end

mmpbxrvsipnet_profile.commit = function()
  local binding = {}
  for config in pairs(transactions) do
    binding.config = config
    uci_helper.commit(binding)
  end
end

register(mmpbxrvsipnet_profile)
