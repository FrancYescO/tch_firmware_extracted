#!/usr/bin/env lua
-- Functions made available from the CLI environment
local print = print
local process = require 'tch.process'
local bt = require("transformer.shared.banktable")
local posix = require("tch.posix")
local match = string.match

--[[
  clash-upgrade-wrapper is designed for the CLI's (clash) upgrade command.
  It may be used from a root shell, but this is not its main purpose.

  Summary:
    The script has two options available:
      '-d <URL>'  : download image from URL and program it to passive bank
      '-s'        : switch over to the other bank

    The CLI user upgrades the gateway in two steps:
     (1) `upgrade -d http://server/pathto/image.rbi ` calls `sysupgrade-safe -o`; downloads and programs the passive bank.
     (2) `upgrade -s` calls our switchover() function which sets said `<passive bank>`
          to the active bank in banktable, and then reboots to complete the upgrade.

  Background:
    Calling `/usr/bin/sysupgrade-safe <URL>` without option '-o' does not work for following reasons:
      * sysupgrade-safe uses sysupgrade.
      * After downloading image and programming other bank, sysupgrade calls a function `kill_remaining`.
      * `kill_remaining` sends a TERM signal to all but critical processes running on gateway.
      * This TERM signal kills clash.
      * Per design, this makes clash kills all its child processes.
      * This kills sysupgrade-safe and sysupgrade.
      * The upgrade then hangs forever.
    The wrapper script provides a solution by
      * always calling sysupgrade-safe with option '-o' (download and program passive bank only).
      * providing a simple switchover by setting active bank to the programmed passive bank, then reboot.
      * it also provides the opportunity to define our own interface, decoupled from sysupgrade-safe: refer to `Summary` and upgrade command's usage_msg.
        Hence, we can provide a method to switch bank and reboot asynchronously from the download: refer to switchover().
]]--

-- The underlying binary to use
local upgrader = "/usr/bin/sysupgrade-safe"

local function execute(path, args)
  if type(path) == "string" then
    local _, errmsg = posix.execv(path, args)
    -- execv() never returns, unless errors
    print("Error: " .. (errmsg or "unkown error"))
  end
end

local function instance_running()
  local running = false

  -- `pidof` needs binary file name, not the full path
  local upgraderbin = upgrader:match("^.*/(.*)$")
  if upgraderbin then
    local fd = process.popen("pidof", {upgraderbin})
    if fd then
      -- pidof returns list with PID's matching the specified process, if any.
      for l in fd:lines() do
        -- Found a PID? If yes, instance is running
        if tonumber(l) then
          running = true
          break
        end
      end
      fd:close()
    end
  end
  return running
end

-- Download image and write to passive bank
local function download(url)
  if url and url ~= "" then
    -- `-o`: download only
    execute(upgrader, { "-o", url })
  else
    print("No URL provided")
  end
end

-- Switch over to image in valid bank, if valid
local function switchover()
  if bt.isOtherBankValid() then
    if bt.prepareSwitchOver() then
      print("Switching to other bank; rebooting...")
      -- Must flush now to get feedback printed in clash, before reboot
      io.flush()
      execute("/sbin/reboot")
    else
      print("Could not prepare switch to other bank")
    end
  else
    print("No valid image in other bank")
  end
end



-- Prevent from running two parallel upgrades
if instance_running() then
  print("Upgrade already in progress")
else
  -- First argument should be the command flag ('-d' or '-s')
  local cmd = arg[1] or ""

  -- Download from URL
  if match(cmd, "-d") then
    -- Second argument is the URL
    download(arg[2])

  -- Switch to passive bank
  elseif match(cmd, "-s") then
    switchover()

  -- Anything else; not valid
  else
    print("Please specify either '-d' or '-s'")
  end
end
