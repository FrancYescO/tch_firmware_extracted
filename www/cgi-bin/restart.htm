#!/usr/bin/haserl --shell=lua
<%
require "libos"
local tz = require "time_zone"

local cron_file

local platform_information = os.platform_information()


local enabled = os.dumaos_enabled()
local suspended = os.dumaos_suspended()
local running = os.dumaos_running()

local status = runnning and "running" or "stopped"
if platform_information.vendor == "TELSTRA" then
  status = os.dumaos_status()
end

print(string.format([[
<!--
  enabled: %s,
  suspended: %s,
  running: %s,
  status: "%s"
-->
]],tostring(enabled),tostring(suspended),tostring(running),tostring(status)))

local start_message = string.format([[
<p>%s</p>
<script>setTimeout(function(){ location.replace("/desktop/index.html?cache=0"); },5000);</script>
]],i18n.startMessage)

local wait_message = string.format([[
<p>%s</p>
<script>setTimeout(function(){ location.reload(); },5000);</script>
]],i18n.waitMessage)

local wait_stop_message = string.format([[
<p>%s</p>
<script>setTimeout(function(){ location.replace("/desktop/index.html?cache=0"); },2000);</script>
]],i18n.waitStopMessage)

local stop_message = string.format([[
<p>%s</p><br />
<paper-button href="/cgi-bin/restart.htm?cache=0&ACTION=resume" background>restart</paper-button>
]],i18n.stopMessage)


local command_wrapper = [[%s 1> /dev/null 2> /dev/null]]
local resume_command = [[/etc/init.d/dumaos restart]]
local stop_command = [[/etc/init.d/dumaos stop]]

if platform_information.vendor == "TELSTRA" then
  start_message = string.format([[
  <p>%s</p>
  <script>setTimeout(function(){ location.replace("/desktop/index.html?cache=0"); },5000);</script>
  ]],i18n.startMessageTelstra)

  wait_message = string.format([[
  <p>%s</p>
  <script>setTimeout(function(){ location.reload(); },15000);</script>
  ]],i18n.waitMessageTelstra)

  wait_stop_message = string.format([[
  <p>%s</p>
  <script>setTimeout(function(){ location.replace("/cgi-bin/restart.htm?cache=0"); },2000);</script>
  ]],i18n.waitStopMessageTelstra)

  stop_message = i18n.stopMessageTelstra


  resume_command = [[export ACTION=dumaos_resume; /sbin/hotplug-call dumaos]]
  stop_command = [[export ACTION=dumaos_suspend; /sbin/hotplug-call dumaos]]


  if platform_information.model == "LH1000" then
    cron_file = "/etc/crond/root"
    stop_message = stop_message .. string.format([[
    <a href="/home.htm?cache=0" class="unpause-button but-blue">%s</a>]],i18n.goToSmartModemSettings)
  else
    cron_file = "/etc/crontabs/root"
    stop_message = stop_message .. string.format([[
    <a href="/home.lp?cache=0" class="unpause-button but-blue">%s</a>]],i18n.goToSmartModemSettings)
  end
end

local get_cron = function()
  if not cron_file then return false end
  return os.get_cmd_output([[cat %s | grep dumaos_resume]],cron_file):gsub("\n","")
end
local cron_out = get_cron()
local cron_exists = cron_out and cron_out ~= ""

local on_restart = function()
  if suspended then
    os.execute(command_wrapper, resume_command)
    if cron_file and cron_exists then
      os.execute(command_wrapper, string.format( [[sed -i '/dumaos_resume/d' %s]], cron_file) )
    end
    suspended = false
  end
end
local on_stop = function()
  os.execute(command_wrapper, stop_command)
  suspended = true

  if cron_file then
    if not cron_exists then
      local tz_time = tz.date("*t")
      local min = tz_time.min - 1
      local hour = tz_time.hour
      if min < 0 then
        min = 59
        hour = hour - 1
        if hour < 0 then
          hour = 23
        end
      end
      cron_out = string.format("%s %s * * * %s",tostring(min),tostring(hour),resume_command)
      cron_exists = true
      os.execute([[echo "%s" >> %s]],cron_out,cron_file)
      status = "stopping"
    end
  end
end


local content

if GET.ACTION then
  if GET.ACTION == "resume" and status ~= "stopping" then
    on_restart()
  elseif GET.ACTION == "stop" then
    on_stop()
  end
end

if suspended then
  content = status == "stopping" and wait_stop_message or stop_message
else
  content = running and start_message or wait_message
end
%> <!DOCTYPE html> <html lang="en"> <head> <title>DumaOS</title> <script src="/nd-js/browser-setup.js?v=<%= dumaos_version %>&lang=<%= lang %>&theme=<%= current_theme %>&themeVersion=<%= current_theme_version %>"></script> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1,user-scalable=yes"> <meta name="mobile-web-app-capable" content="yes"> <meta name="apple-mobile-web-app-capable" content="yes"> <meta http-equiv="cache-control" content="max-age=0"> <meta http-equiv="cache-control" content="no-cache"> <meta http-equiv="expires" content="0"> <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT"> <meta http-equiv="pragma" content="no-cache"> <meta id="did-restart" value="<%= restarts %>"> <% if cron_exists then %> <meta id="cron-get" value="<%= cron_out:match("([%d*%s]+)%s") %>"> <% end %> <link rel="import" href="/themes/<%= current_theme %>/duma-theme.html?v=<%= dumaos_version %>&lang=<%= lang %>&theme=<%= current_theme %>&themeVersion=<%= current_theme_version %>"> <link rel="import" href="/custom-elements/paper-button/paper-button.html?v=<%= dumaos_version %>&lang=<%= lang %>&theme=<%= current_theme %>&themeVersion=<%= current_theme_version %>"> <link rel="import" href="/custom-elements/iron-flex-layout/iron-flex-layout-classes.html?v=<%= dumaos_version %>&lang=<%= lang %>&theme=<%= current_theme %>&themeVersion=<%= current_theme_version %>"> <link rel="import" href="/custom-elements/iron-flex-layout/iron-flex-layout.html?v=<%= dumaos_version %>&lang=<%= lang %>&theme=<%= current_theme %>&themeVersion=<%= current_theme_version %>"> <link rel="import" href="/libs/cron.html?v=<%= dumaos_version %>&lang=<%= lang %>&theme=<%= current_theme %>&themeVersion=<%= current_theme_version %>"> <style> <%in /www/desktop/preloader.css %> </style> <style> body {
        margin: 0;
      }
      body, .loading {
        display: block;
        height: 100vh;
        width: 100vw;
        background-color: <%= theme.PRIMARY_BACKGROUND_COLOR %>;
        background-image: url(/themes/<%= current_theme %>/<%= theme.BACKGROUND_IMAGE %>);
        background-size: cover;
      }
      .full {
        height: 100%;
        width: 100%;
      }

      .loading .loader {
        margin: 0 auto;
        position: relative;
        margin-top: -14px;
        top: 50%;
        text-align: center;
      }
      
      .loader .circle-clipper {
        border-color: <%= theme.PRIMARY_TEXT_COLOR %> !important;
      }
      .full {
        position: relative;
      }
      .content {
        color: <%= theme.PRIMARY_TEXT_COLOR %>;
        position: absolute;
        top: 0;
        height: 100%;
        width: 100%;
        opacity: 1;
        transition: opacity 0.3s;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
      }
      .content .title {
        font-size: 24px;
      }
      .content .status {
        color: <%= theme.SECONDARY_TEXT_COLOR %>;
      }
      .content > div {
        max-width: 550px;
      } <% if platform_information.vendor == "TELSTRA" then %> .unpause-button {
        display: inline-block;
        background-color: #ED3C96;
        color: white !important;
        border-radius: 0.1em;
        padding: 0.6em;
        text-align: center;
        cursor: pointer;
        transition: color 0.1s;
        padding: 8px 12px;
      }
      .unpause-button:hover {
        background-color: #F79ABE;
      }
      .unpause-button:active {
        background-color: #620C67;
      }
      .unpause-button.but-blue {
        background-color: <%= theme.PRIMARY_COLOR %>;
      }
      .unpause-button.but-blue:hover {
        background-color: <%= theme.LIGHT_PRIMARY_COLOR %>;
      }
      .unpause-button.but-blue:active {
        background-color: <%= theme.DARK_PRIMARY_COLOR %>;
      } <% end %> .hide {
        opacity: 0;
      } </style> </head> <body> <div class="full"> <div id="spinner" class="loading"> <div class="loader"> <div class="preloader-wrapper small active"> <div class="spinner-layer"> <div class="circle-clipper left"> <div class="circle"></div> </div><div class="gap-patch"> <div class="circle"></div> </div><div class="circle-clipper right"> <div class="circle"></div> </div> </div> </div> </div> </div> <div id="content" class="content hide"> <!-- div to centre the content on screen --> <div> <%= content %> </div> </div> </div> <script> function after(){
        document.getElementById("content").classList.toggle("hide");
        document.getElementById("spinner").classList.toggle("hide");

        var cronGet = document.getElementById("cron-get");
        if(cronGet){
          var cronDisplay = document.getElementById("cron-display");
          if(cronDisplay){
            var cron = new Cron(cronGet.attributes.value.nodeValue); <% if platform_information.vendor == "TELSTRA" then %> cronDisplay.textContent = cron.next().toLocaleString('en-AU'); <% else %> cronDisplay.textContent = cron.next().toLocaleString(); <% end %> }
        }
      }
      var loggedIn = true;
      if(typeof(browserSetup) !== "undefined"){
        browserSetup.onReady(after);
      }else{
        setTimeout(after,5000);
        loggedIn = false;
      } </script> </body> </html> 