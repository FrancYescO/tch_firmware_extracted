config_load wee
 config_get env_wee_cs_enabled cs enabled
 config_get env_wee_cs_steering_rssi_threshold cs steering_rssi_threshold
 config_get env_wee_cs_monitor_rssi_threshold cs monitor_rssi_threshold
 config_get env_wee_cs_target_bss_sel_bcn_threshold cs target_bss_sel_bcn_threshold
 config_get env_wee_cs_target_bss_sel_usm_threshold cs target_bss_sel_usm_threshold
 config_get env_wee_cs_target_bss_sel_timeout cs target_bss_sel_timeout
 config_get env_wee_cs_steering_hold_duration cs steering_hold_duration
 config_get env_wee_cs_steering_participation_hold  cs steering_participation_hold
 config_get env_wee_cs_periodic_usm_enable cs periodic_usm_enable
 config_get env_wee_cs_usm_query_interval cs usm_query_interval
 config_get env_wee_cs_usm_report_age cs usm_report_age
 config_get env_wee_cs_bcn_report_age cs bcn_report_age
 config_get env_wee_cs_enable_mac_acl cs enable_mac_acl
 config_get env_wee_cs_enable_band_steering cs enable_band_steering
 config_get env_wee_cs_steering_retry_count cs steering_retry_count

 procd_append_param env ENV_WEE_CS_ENABLED=$env_wee_cs_enabled
 procd_append_param env ENV_WEE_CS_STEERING_RSSI_THRESHOLD=$env_wee_cs_steering_rssi_threshold
 procd_append_param env ENV_WEE_CS_MONITOR_RSSI_THRESHOLD=$env_wee_cs_monitor_rssi_threshold
 procd_append_param env ENV_WEE_CS_TARGET_BSS_SEL_BCN_THRESHOLD=$env_wee_cs_target_bss_sel_bcn_threshold
 procd_append_param env ENV_WEE_CS_TARGET_BSS_SEL_USM_THRESHOLD=$env_wee_cs_target_bss_sel_usm_threshold
 procd_append_param env ENV_WEE_CS_TARGET_BSS_SEL_TIMEOUT=$env_wee_cs_target_bss_sel_timeout
 procd_append_param env ENV_WEE_CS_STEERING_HOLD_DURATION=$env_wee_cs_steering_hold_duration
 procd_append_param env ENV_WEE_CS_STEERING_PARTICIPATION_HOLD=$env_wee_cs_steering_participation_hold
 procd_append_param env ENV_WEE_CS_PERIODIC_USM_ENABLE=$env_wee_cs_periodic_usm_enable
 procd_append_param env ENV_WEE_CS_USM_QUERY_INTERVAL=$env_wee_cs_usm_query_interval
 procd_append_param_env ENV_WEE_CS_USM_REPORT_AGE=$env_wee_cs_usm_report_age
 procd_append_param_env ENV_WEE_CS_BCN_REPORT_AGE=$env_wee_cs_bcn_report_age
 procd_append_param env ENV_WEE_CS_ENABLE_MAC_ACL=$env_wee_cs_enable_mac_acl
 procd_append_param env ENV_WEE_CS_ENABLE_BAND_STEERING=$env_wee_cs_enable_band_steering
 procd_append_param env ENV_WEE_CS_STEERING_RETRY_COUNT=$env_wee_cs_steering_retry_count

config_get val cs rcpi_advanced_pred
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_ENABLE_RCPI_ADVANCED_PRED="$val"
fi

config_get val cs rcpi_advanced_upper_range
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_RCPI_ADVANCED_UPPER_RANGE="$val"
fi

config_get val cs rcpi_advanced_lower_range
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_RCPI_ADVANCED_LOWER_RANGE="$val"
fi

config_get val cs log_level
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_LOG_LEVEL="$val"
fi

config_get val cs tbs_fail_policy
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_TARGET_BSS_FAILURE_POLICY="$val"
fi

config_get val cs steering_with_deauth
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_STEERING_WITH_DEAUTH="$val"
fi

config_get val cs disassoc_imminent
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_IS_DISASSOC_IMMINENT="$val"
fi

config_get val cs sta_failcnt_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_STA_FAILCNT_THRESHOLD="$val"
fi

config_get val cs sta_blacklisting_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_STA_BLACKLISTING_ENABLED="$val"
fi

config_get val cs sta_failcnt_mon_window
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_STA_FAILCNT_MONITOR_WDOW="$val"
fi

config_get val cs sta_blacklist_window
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_STA_BLACKLIST_WINDOW="$val"
fi

config_get val cs skip_non_11v_sta
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_SKIP_NON_11V_STA_STEERING="$val"
fi

config_get val cs 5G_bandsteer_thresh
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_BSTEER_5G_RSSI_THRESH="$val"
fi

config_get val cs 2G_bandsteer_thresh
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_BSTEER_2G_RSSI_THRESH="$val"
fi

config_get val cs bandsteer_hold_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_BANDSTEER_HOLD_WINDOW="$val"
fi

config_get val cs deauth_ratelimit_window
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_DEAUTH_RATE_LIMIT_WINDOW="$val"
fi

config_get val cs deauth_max_count
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_MAX_DEAUTH_CNT="$val"
fi

config_get val cs deauth_ratelimit_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_RATE_LIMIT_DEAUTH_ENABLED="$val"
fi

config_get val cs steer_desicion_instantaneous
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_STEER_INSTANTANEOUS="$val"
fi

config_get val cs rssi_priority_error_margin
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_BS_RSSI_PREDICT_PRIORITY_ERROR_MARGIN="$val"
fi

config_get val cs rssi_prediction_disabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_DISABLE_RSSI_PREDICTION="$val"
fi

config_get val cs bandsteer_priority_one
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_BS_PRIORITY_ONE_CANDIDATE="$val"
fi

config_get val cs bandsteer_priority_two
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_BS_PRIORITY_TWO_CANDIDATE="$val"
fi

config_get val cs bandsteer_priority_three
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_BS_PRIORITY_THREE_CANDIDATE="$val"
fi

config_get val cs bandsteer_priority_four
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_BS_PRIORITY_FOUR_CANDIDATE="$val"
fi

config_get val cs bandsteer_multibss_macacl_deauth
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_BANDSTEER_MULTIBSS_MACACL_DEAUTH_ENABLED="$val"
fi

config_get val cs bandsteer_multibss_macacl_blocktime
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_BANDSTEER_MULTIBSS_MACACL_BLOCK_TIME="$val"
fi

config_get val cs bandsteer_loop_mon_period
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_INFINITE_LOOP_BANDSTEER_MON_PERIOD="$val"
fi

config_get val cs bandsteer_loop_attempt_cnt_thresh
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_INFINITE_LOOP_BANDSTEER_ATTEMPT_CNT_THRESH="$val"
fi

config_get val cs apsteer_loop_mon_period
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_INFINITE_LOOP_APSTEER_MON_PERIOD="$val"
fi

config_get val cs apsteer_loop_attempt_cnt_thresh
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_INFINITE_LOOP_APSTEER_ATTEMPT_CNT_THRESH="$val"
fi

config_get val topo_optimisation link_metric_query_interval
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_LINK_METRICS_QUERY_INTERVAL="$val"
fi

config_get val topo_optimisation enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_TOPO_OPT_ENABLED="$val"
fi

config_get val topo_optimisation bh_link_rssi_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_TOPO_OPT_RSSI_THRESHOLD="$val"
fi


config_get val topo_optimisation metrics_gather_timeout
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_TOPO_OPT_METRICS_GATHER_TIMEOUT="$val"
fi


config_get val topo_optimisation topo_settling_timeout
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_TOPO_OPT_SETTLING_TIMEOUT="$val"
fi


config_get val topo_optimisation topo_steering_timeout
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_TOPO_OPT_STEERING_TIMEOUT="$val"
fi


config_get val topo_optimisation metrics_gather_retry_cnt
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_TOPO_OPT_METRICS_GATHER_RETRY_CNT="$val"
fi


config_load multiap
config_get map_agent_enabled agent enabled
if [ -n "$map_agent_enabled" ]; then
    config_load env
    config_get val var local_wifi_mac
    if [ -n "$val" ]; then
        uci_set "wee" "topo_optimisation" "root_mac" "$val"
        uci commit
        procd_append_param env ENV_WEE_TOPO_OPT_ROOT_MAC="$val"
    fi
fi

config_get val topo_optimisation root_mac
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_TOPO_OPT_ROOT_MAC="$val"
fi


config_get val topo_optimisation macacl_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_TOPO_OPT_MULTIBSS_MACACL_ENABLED="$val"
fi


config_get val topo_optimisation macacl_timeout
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_TOPO_OPT_MULTIBSS_MACACL_FLUSH_TIMEOUT="$val"
fi

config_get val topo_optimisation bh_eth_update_timeout
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_TOPO_OPT_ETH_LINK_CHANGE_TIMEOUT="$val"
fi

config_get val cs enable_split_ssid_override
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_ENABLE_SPLIT_SSID_OVERRIDE="$val"
fi

config_get val cs bandsteer_steer_window
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_BANDSTEER_STEER_WINDOW="$val"
fi

config_get val cs apsteer_steer_window
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_APSTEER_STEER_WINDOW="$val"
fi

config_get val cs bsteer_multibss_11v_enabled 
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_BANDSTEER_MULTIBSS_MACACL_11V_STEER_ENABLED="$val"
fi

config_get val cs bsteer_allow_non11v
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_BANDSTEER_ALLOW_NON_11V="$val"
fi

config_get val cs bsteer_failure_bkoff
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_BANDSTEER_FAILURE_BKOFF="$val"
fi

config_get val cs bsteer_dualband_unknown_sta_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WEE_CS_BANDSTEER_DUALBAND_UNKNOWN_STA_ENABLED="$val"
fi

