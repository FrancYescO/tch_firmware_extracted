config_load wifi_conductor

#Global
config_get val global mqtt_identifier
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_IDENTIFIER="$val"
fi

config_get val global ua_cmd_valid_for
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_UA_CMD_VALID_FOR="$val"
fi

config_get val global mqtt_broker_url
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_FHC_MASTER_BROKER_URL="$val"
fi

config_get val global mqtt_broker_port
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_FHC_MASTER_BROKER_PORT="$val"
fi

config_get val global station_db_max_sta
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_STATION_DB_MAX_STA="$val"
fi

config_get val global station_db_filename "/etc/station_db.json"
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_STATION_DB_FILENAME="$val"
fi

config_get val global station_db_save_period
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_STATION_DB_SAVE_PERIOD="$val"
fi

config_get val global station_policy_filename "/etc/station_policy.json"
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_STATION_POLICY_FILENAME="$val"
fi

#Aggregator
config_get val aggregator tick_interval
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_AGGREGATOR_TICK_INTERVAL="$val"
fi

config_get val aggregator slave_drop_timeout
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_AGGREGATOR_SLAVE_DROP_TIMEOUT="$val"
fi

config_get val aggregator stats_timeout_factor
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_AGGREGATOR_STATS_TIMEOUT_FACTOR="$val"
fi

config_get val aggregator stats_txcompare_size
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_AGGREGATOR_STATS_TXCOMPARE_SIZE="$val"
fi

#Metrics
config_get val metrics radio_smooth_factor
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_METRICS_RADIO_SMOOTH_FACTOR="$val"
fi

config_get val metrics radio_ma_period
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_METRICS_RADIO_MA_PERIOD="$val"
fi

config_get val metrics station_ma_period
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_METRICS_STATION_MA_PERIOD="$val"
fi

config_get val metrics station_ma_period_wide
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_METRICS_STATION_MA_PERIOD_WIDE="$val"
fi

config_get val metrics station_ignore_mgmt_phy_rate
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_METRICS_STATION_IGNORE_MGMT_PHY_RATE="$val"
fi

#Controller
config_get val controller log
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_CONTROLLER_LOG="$val"
fi

config_get val controller max_sta
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_CONTROLLER_MAX_STA="$val"
fi

config_get val controller max_disconnected_sta_age
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_CONTROLLER_MAX_DISCONNECTED_STA_AGE="$val"
fi

config_get val controller active_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_CONTROLLER_ACTIVE_THRESHOLD="$val"
fi

config_get val controller mac_efficiency
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_CONTROLLER_MAC_EFFICIENCY="$val"
fi

config_get val controller mac_efficiency_low
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_CONTROLLER_MAC_EFFICIENCY_LOW="$val"
fi

config_get val controller mac_efficiency_rate_ratio_low
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_CONTROLLER_MAC_EFFICIENCY_RATE_RATIO_LOW="$val"
fi

config_get val controller mac_efficiency_high
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_CONTROLLER_MAC_EFFICIENCY_HIGH="$val"
fi

config_get val controller mac_efficiency_rate_ratio_high
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_CONTROLLER_MAC_EFFICIENCY_RATE_RATIO_HIGH="$val"
fi

config_get val controller deauth_multi_bss_count
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_CONTROLLER_DEAUTH_MULTI_BSS_COUNT="$val"
fi

config_get val controller policy_block_hold_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_CONTROLLER_POLICY_BLOCK_HOLD_TIME="$val"
fi

#Algo
#Algo global
config_get val algo enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_ENABLED="$val"
fi

config_get val algo log
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_LOG="$val"
fi

config_get val algo backoff_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_BACKOFF_TIME="$val"
fi

config_get val algo backoff_reset_period
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_BACKOFF_RESET_PERIOD="$val"
fi

config_get val algo skip_5g_only_4x4_sta
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_SKIP_5G_ONLY_4X4_STA="$val"
fi

#Algo query
config_get val algo query_backoff_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_QUERY_BACKOFF_TIME="$val"
fi

config_get val algo query_max_response_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_QUERY_MAX_RESPONSE_TIME="$val"
fi

config_get val algo query_measure_11k_delta_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_QUERY_MEASURE_11K_DELTA_TIME="$val"
fi

config_get val algo query_unsupported_subbands
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_QUERY_UNSUPPORTED_SUBBANDS="$val"
fi

config_get val algo query_unsupported_subbands_backoff_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_QUERY_UNSUPPORTED_SUBBANDS_BACKOFF_TIME="$val"
fi

#Algo target prediction
config_get val algo target_prediction_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_TARGET_PREDICTION_ENABLED="$val"
fi

config_get val algo target_prediction_max_probe_beacon_age
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_TARGET_PREDICTION_MAX_PROBE_BEACON_AGE="$val"
fi

config_get val algo target_prediction_reverse_bandsteer
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_TARGET_PREDICTION_REVERSE_BANDSTEER="$val"
fi

config_get val algo target_prediction_success_mode
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_TARGET_PREDICTION_SUCCESS_MODE="$val"
fi

config_get val algo target_prediction_fail_mode
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_TARGET_PREDICTION_FAIL_MODE="$val"
fi

#Algo rssi
config_get val algo rssi_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_RSSI_ENABLED="$val"
fi

config_get val algo rssi_roam_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_RSSI_ROAM_THRESHOLD="$val"
fi

config_get val algo rssi_roam_threshold_hist
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_RSSI_ROAM_THRESHOLD_HIST="$val"
fi

config_get val algo rssi_fail_count
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_RSSI_FAIL_COUNT="$val"
fi

#Algo medium
config_get val algo medium_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_MEDIUM_ENABLED="$val"
fi

config_get val algo medium_2g_link_capacity_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_MEDIUM_2G_LINK_CAPACITY_THRESHOLD="$val"
fi

config_get val algo medium_5g_link_capacity_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_MEDIUM_5G_LINK_CAPACITY_THRESHOLD="$val"
fi

config_get val algo medium_fail_count
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_MEDIUM_FAIL_COUNT="$val"
fi

#Algo loadbalance
config_get val algo load_balance_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_LOAD_BALANCE_ENABLED="$val"
fi

config_get val algo load_balance_run_period
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_LOAD_BALANCE_RUN_PERIOD="$val"
fi

config_get val algo load_balance_max_sta
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_LOAD_BALANCE_MAX_STA="$val"
fi

#Algo bandsteer
config_get val algo bandsteer_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_BANDSTEER_ENABLED="$val"
fi

config_get val algo bandsteer_5g_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_BANDSTEER_5G_THRESHOLD="$val"
fi

config_get val algo bandsteer_2g_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_BANDSTEER_2G_THRESHOLD="$val"
fi

config_get val algo bandsteer_5g_max_probe_age
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_BANDSTEER_5G_MAX_PROBE_AGE="$val"
fi

config_get val algo bandsteer_threshold_backoff
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_BANDSTEER_THRESHOLD_BACKOFF="$val"
fi

config_get val algo bandsteer_threshold_backoff_reset_period
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_BANDSTEER_THRESHOLD_BACKOFF_RESET_PERIOD="$val"
fi

config_get val algo bandsteer_comeback_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_BANDSTEER_COMEBACK_TIME="$val"
fi

#Algo preemptive block
config_get val algo preemptive_block_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_PREEMPTIVE_BLOCK_ENABLED="$val"
fi

config_get val algo preemptive_block_run_period
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_PREEMPTIVE_BLOCK_RUN_PERIOD="$val"
fi

config_get val algo preemptive_block_low_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_PREEMPTIVE_BLOCK_LOW_THRESHOLD="$val"
fi

config_get val algo preemptive_block_high_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_PREEMPTIVE_BLOCK_HIGH_THRESHOLD="$val"
fi

config_get val algo preemptive_block_own_txrx_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_PREEMPTIVE_BLOCK_OWN_TXRX_THRESHOLD="$val"
fi

#Algo video
config_get val algo video_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_VIDEO_ENABLED="$val"
fi

config_get val algo video_active_threshold
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_VIDEO_ACTIVE_THRESHOLD="$val"
fi

config_get val algo video_peak_bandwidth_factor
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_VIDEO_PEAK_BANDWIDTH_FACTOR="$val"
fi

config_get val algo video_fail_count
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_VIDEO_FAIL_COUNT="$val"
fi

config_get val algo video_backoff_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_VIDEO_BACKOFF_TIME="$val"
fi

config_get val algo video_obss_airtime_ratio
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ALGO_VIDEO_OBSS_AIRTIME_RATIO="$val"
fi

#Roamer
config_get val roamer log
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_LOG="$val"
fi

config_get val roamer dot11v_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DOT11V_ENABLED="$val"
fi

config_get val roamer max_requests
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_MAX_REQUESTS="$val"
fi

config_get val roamer max_requests_timeframe
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_MAX_REQUESTS_TIMEFRAME="$val"
fi

config_get val roamer delay_between_requests
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DELAY_BETWEEN_REQUESTS="$val"
fi

config_get val roamer macacl_managed
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_MACACL_MANAGED="$val"
fi

config_get val roamer macacl_deauth_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_MACACL_DEAUTH_ENABLED="$val"
fi

config_get val roamer max_deauth_requests
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_MAX_DEAUTH_REQUESTS="$val"
fi

config_get val roamer max_deauth_requests_timeframe
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_MAX_DEAUTH_REQUESTS_TIMEFRAME="$val"
fi

config_get val roamer max_roam_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_MAX_ROAM_TIME="$val"
fi

config_get val roamer last_resort_roam_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_LAST_RESORT_ROAM_TIME="$val"
fi

config_get val roamer max_graceful_roam_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_MAX_GRACEFUL_ROAM_TIME="$val"
fi

config_get val roamer roam_linger_time
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_ROAM_LINGER_TIME="$val"
fi

config_get val roamer max_macacl_tries
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_MAX_MACACL_TRIES="$val"
fi

config_get val roamer deauth_min_success
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DEAUTH_MIN_SUCCESS="$val"
fi

config_get val roamer deauth_min_results
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DEAUTH_MIN_RESULTS="$val"
fi

config_get val roamer deauth_retry_timeframe
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DEAUTH_RETRY_TIMEFRAME="$val"
fi

config_get val roamer deauth_enable_retry
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DEAUTH_ENABLE_RETRY="$val"
fi

config_get val roamer deauth_success_weight
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DEAUTH_SUCCESS_WEIGHT="$val"
fi

config_get val roamer deauth_failure_weight
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DEAUTH_FAILURE_WEIGHT="$val"
fi

config_get val roamer deauth_max_loops
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DEAUTH_MAX_LOOPS="$val"
fi

config_get val roamer dot11v_min_success
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DOT11V_MIN_SUCCESS="$val"
fi

config_get val roamer dot11v_min_results
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DOT11V_MIN_RESULTS="$val"
fi

config_get val roamer dot11v_retry_timeframe
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DOT11V_RETRY_TIMEFRAME="$val"
fi

config_get val roamer dot11v_enable_retry
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DOT11V_ENABLE_RETRY="$val"
fi

config_get val roamer dot11v_success_weight
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DOT11V_SUCCESS_WEIGHT="$val"
fi

config_get val roamer dot11v_failure_weight
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DOT11V_FAILURE_WEIGHT="$val"
fi

config_get val roamer dot11v_max_loops
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DOT11V_MAX_LOOPS="$val"
fi

config_get val roamer dot11v_only
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DOT11V_ONLY="$val"
fi

config_get val roamer dot11v_btm_learning
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DOT11V_BTM_LEARNING="$val"
fi

config_get val roamer dot11v_btm_learning_retry
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_ROAMER_DOT11V_BTM_LEARNING_RETRY="$val"
fi

#Debug
config_get telnet_bind_addr debug telnet_bind_addr
config_get telnet_port debug telnet_port
if [ -n "$telnet_bind_addr" ] && [ -n "$telnet_port" ]; then
  procd_append_param env ENV_WIFICR_TELNET_BIND_ADDR="$telnet_bind_addr"
  procd_append_param env ENV_WIFICR_TELNET_PORT="$telnet_port"
fi

config_get val debug trace_level 3
#Note: Trace_level can be text or number (0-4)
if [ "$val" = "quiet" ]; then
  val=0
elif [ "$val" = "error" ]; then
  val=1
elif [ "$val" = "warning" ]; then
  val=1
elif [ "$val" = "info" ]  || [ "$val" = "normal" ]; then
  val=3
elif [ "$val" = "debug" ] || [ "$val" = "verbose" ]; then
  val=4
fi
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_LOG_LEVEL="$val"
fi

config_get val debug publish_agg_infra
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_FHC_MASTER_PUBLISH_INFRA="$val"
fi

config_get val debug publish_agg_stats
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_FHC_MASTER_PUBLISH_STATS="$val"
fi

config_get val debug cloud_enabled
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_NORTHBOUND_ENABLED="$val"
fi

config_get val debug cloud_mqtt_broker_url
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_NORTHBOUND_BROKER_URL="$val"
fi

config_get val debug cloud_mqtt_broker_port
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_NORTHBOUND_BROKER_PORT="$val"
fi

config_get val debug cloud_home_id
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_NORTHBOUND_HOME_ID="$val"
fi

config_get val debug cloud_log_level
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_NORTHBOUND_LOG_LEVEL="$val"
fi

config_get val debug cloud_publish_background
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_NORTHBOUND_PUBLISH_BACKGROUND="$val"
fi

config_get val debug cloud_publish_backbone
if [ -n "$val" ]; then
  procd_append_param env ENV_WIFICR_NORTHBOUND_PUBLISH_BACKBONE="$val"
fi
