#!/bin/sh

[ "$#" -ne 5 ] && echo "usage: $0 <session_id> <dev_idx> <interface> <pdp_type> <action>" && exit 1

. /lib/functions.sh
. /lib/functions/network.sh
. /lib/netifd/netifd-proto.sh

PPP_SUPPORT=0
if [ -f "/lib/netifd/proto/ppp.sh" ]; then
	export INCLUDE_ONLY="false"
	. /lib/netifd/proto/ppp.sh
	PPP_SUPPORT=1
fi

ubus_call() {
	json_init
	local _data="$(ubus -S call "$1" "$2" "$3")"
	[ $? -ne 0 ] || [ -z "$_data" ] && return 1
	json_load "$_data"
	return 0
}

check_and_remove() {
	local interface="$1"
	if ubus list "network.interface.${interface}"; then
		ifdown "$interface"
		ubus call "network.interface.${interface}" remove
	fi
}

#
# Function calculates number of bit in a netmask
#
mask2cidr() {
	nbits=0
	IFS=.
	for dec in $1 ; do
	case $dec in
		255) let nbits+=8;;
		254) let nbits+=7;;
		252) let nbits+=6;;
		248) let nbits+=5;;
		240) let nbits+=4;;
		224) let nbits+=3;;
		192) let nbits+=2;;
		128) let nbits+=1;;
		0);;
		*) return
	esac
	done
	echo "$nbits"
}

session_id="$1"
dev_idx="$2"
interface="$3"
pdp_type="$4"
action="$5"

config_load "network"

config_get dns "${interface}" dns ''
config_get metric "${interface}" metric '0'
config_get_bool ipv6 "${interface}" ipv6 '1'
config_get_bool peerdns "${interface}" peerdns '1'
config_get_bool defaultroute "${interface}" defaultroute '1'

config_get sendopts_v4 "${interface}" sendopts_v4 ''
config_get sendopts_v6 "${interface}" sendopts_v6 ''
config_get_bool extendprefix "${interface}" extendprefix '1'
config_get reqopts_v4 "${interface}" reqopts_v4 '1 3 6 15 33 42 51 121 249'
config_get reqopts_v6 "${interface}" reqopts_v6 '12 21 22 23 24 25 31 56 64 67 82 83'

config_get pppd_options "${interface}" pppd_options 'debug noaccomp nopcomp novj nobsdcomp noauth noccp lock crtscts 115200'

configure_dynamic_interface() {
	local interface="$1"
	local parent_interface="$2"

	# Add the dynamic interface to the same firewall zone as the parent interface.
	local zone=0
	local network
	while network="$(uci -q get "firewall.@zone[$zone].network")"; do
		if echo "$network" | grep -wq "$parent_interface"; then
			if ! echo "$network" | grep -wq "$interface"; then
				uci add_list "firewall.@zone[$zone].network=$interface" && uci commit
				/etc/init.d/firewall enabled && /etc/init.d/firewall reload
			fi

			break
		fi

		let ++zone
	done
}

create_dhcp_interfaces() {
	local action="$1"

	json_select "dhcp"
	local ifname use_l3_ifname
	json_get_vars ifname use_l3_ifname

	if [ -z "$ifname" ]; then
		proto_notify_error "$interface" "NO_IFNAME"
		return 1
	fi

	dhcp_ifname="@$interface"

	if [ "$use_l3_ifname" = "1" ]; then
		ifconfig "$ifname" up
		dhcp_ifname="$ifname"
	fi

	# Quectel EC25 needs the physical interface because it needs a
	# DHCP client running on it before the data session can be started
	if [ "$action" = "setup" ]; then
		proto_init_update "$ifname" 0
	elif  [ "$action" = "connected" ]; then
		proto_init_update "$ifname" 1
	fi
	proto_send_update "$interface"

	if ! ubus list "network.interface.${interface}_4"; then
		logger -t "mobiled" "Creating ${interface}_4 interface on $dhcp_ifname"
		json_init

		json_add_string name "${interface}_4"
		json_add_string ifname "$dhcp_ifname"
		json_add_string proto "dhcp"

		[[ -n "$dns" ]] && json_add_string dns "$dns"
		json_add_int metric "$metric"
		json_add_boolean peerdns "$peerdns"
		json_add_boolean defaultroute "$defaultroute"

		json_add_string reqopts "$reqopts_v4"
		[[ -n "$sendopts_v4" ]] && json_add_string sendopts "$sendopts_v4"

		ubus call network add_dynamic "$(json_dump)"
		configure_dynamic_interface "${interface}_4" "$interface"
	fi

	if ! ubus list "network.interface.${interface}_6"; then
		if [ "${ipv6}" = "1" ]; then
			logger -t "mobiled" "Creating ${interface}_6 interface on $dhcp_ifname"
			json_init

			json_add_string name "${interface}_6"
			json_add_string ifname "$dhcp_ifname"
			json_add_string proto "dhcpv6"

			[[ -n "$dns" ]] && json_add_string dns "$dns"
			json_add_int metric "$metric"
			json_add_boolean peerdns "$peerdns"
			json_add_boolean defaultroute "$defaultroute"

			json_add_string reqopts "$reqopts_v6"
			[[ -n "$sendopts_v6" ]] && json_add_string sendopts "$sendopts_v6"
			json_add_string extendprefix "$extendprefix"

			ubus call network add_dynamic "$(json_dump)"
			configure_dynamic_interface "${interface}_6" "$interface"
		fi
	fi
}

#//////////////////////////////////////////////////
# Data session setup
#//////////////////////////////////////////////////
if [ "$action" = "setup" ]; then
	if ! ubus_call "mobiled.network" "sessions" "{'session_id':$session_id, 'dev_idx':$dev_idx}"; then
		proto_notify_error "$interface" "NO_SESSION_INFO"
		return 1
	fi

	json_get_vars proto
	if [ -z "$proto" ]; then
		proto_notify_error "$interface" "NO_PROTO"
		return 1
	fi

	if [ "$proto" = "ppp" ]; then
		if [ $PPP_SUPPORT -ne 1 ]; then
			proto_notify_error "$interface" "NO_PPP_SUPPORT"
			return 1
		fi

		json_select "ppp"
		json_get_vars username password authentication apn dial_string device
		if [ -z "$device" ]; then
			proto_notify_error "$interface" "NO_PPP_DEVICE"
			return 1
		fi

		json_init

		json_add_string name "${interface}_ppp"
		json_add_string ifname "@$interface"
		json_add_string proto "ppp"

		json_add_string dns "$dns"
		json_add_boolean ipv6 "$ipv6"
		json_add_int metric "$metric"
		json_add_boolean peerdns "$peerdns"
		json_add_boolean defaultroute "$defaultroute"

		json_add_string device "$device"
		json_add_string username "$username"
		json_add_string password "$password"
		json_add_string pppname "${interface}_ppp"
		json_add_string pppd_options "$pppd_options $device"
		json_add_string connect "${apn:+USE_APN='$apn' }DIAL_STRING='${dial_string:-*99***1#}' /usr/sbin/chat -t5 -v -E -f /etc/chatscripts/mobiled.chat"

		ubus call network add_dynamic "$(json_dump)"
		configure_dynamic_interface "${interface}_ppp" "$interface"
#++++++++++++++++++++++++++++++++++++++++++++++++++
# DHCP sub protocol
#++++++++++++++++++++++++++++++++++++++++++++++++++
	elif [ "$proto" = "dhcp" ]; then
		create_dhcp_interfaces "$action"
	fi
#//////////////////////////////////////////////////
# Data session connected
#//////////////////////////////////////////////////
elif [ "$action" = "connected" ]; then
	device=""
	network_get_physdev device "$interface"
	if [ -n "$device" ]; then
		if ! ifconfig "$device" | grep -q "RUNNING"; then
			logger -t "mobiled" "Fixup for \"$device\" not in RUNNING state"
			ifconfig "$device" down
			sleep 1
			ifconfig "$device" up
		fi
	fi

	if ! ubus_call "mobiled.network" "sessions" "{'session_id':$session_id, 'dev_idx':$dev_idx}"; then
		proto_notify_error "$interface" "NO_SESSION_INFO"
		return 1
	fi

	json_get_vars proto
	if [ -z "$proto" ]; then
		proto_notify_error "$interface" "NO_PROTO"
		return 1
	fi

	if [ "$proto" = "dhcp" ]; then
		create_dhcp_interfaces "$action"
	elif [ "$proto" = "ppp" ]; then
		if [ $PPP_SUPPORT -ne 1 ]; then
			proto_notify_error "$interface" "NO_PPP_SUPPORT"
			return 1
		fi
		proto_init_update "${interface}_ppp" 1
		proto_send_update "$interface"
	elif [ "$proto" = "router" ]; then
		json_select "router"
		json_get_vars ipv4_gw ipv4_dns1 ifname
		if [ -z "$ifname" ]; then
			proto_notify_error "$interface" "NO_IFNAME"
			return 1
		fi
		proto_init_update "$ifname" 1
		if [ "$defaultroute" = "1" ]; then
			proto_add_ipv4_route "0.0.0.0" 0 "${ipv4_gw:-0.0.0.0}" "" "$metric"
		fi
		if [ -n "$ipv4_dns1" ]; then
			proto_add_dns_server "$ipv4_dns1"
		fi
		proto_send_update "$interface"
	elif [ "$proto" = "static" ]; then
		json_select "static"
		json_get_vars ifname ipv4_addr ipv4_gw ipv4_subnet ipv4_dns1 ipv4_dns2 ipv6_addr ipv6_gw ipv6_dns1 ipv6_dns2 ipv6_prefix ipv6_prefix_length
		if [ -n "$ipv4_addr" ] || [ -n "$ipv6_addr" ]; then
			ipv4_subnet_bits=$(mask2cidr "$ipv4_subnet")

			# Send an empty update to clear previous routes and DNS addresses
			proto_init_update "$ifname" 1
			proto_send_update "$interface"

			proto_init_update "$ifname" 1
			if [ -n "$ipv4_addr" ] && [ -n "$ipv4_subnet_bits" ]; then
				proto_add_ipv4_address "$ipv4_addr" "$ipv4_subnet_bits"
			fi
			if [ -n "$ipv4_dns1" ]; then
				proto_add_dns_server "$ipv4_dns1"
			fi
			if [ -n "$ipv4_dns2" ]; then
				proto_add_dns_server "$ipv4_dns2"
			fi
			if [ -n "$ipv6_gw" ]; then
				proto_add_ipv6_route "$ipv6_gw" "128"
			fi
			if [ "$defaultroute" = "1" ]; then
				proto_add_ipv4_route "0.0.0.0" 0 "${ipv4_gw:-0.0.0.0}" "" "$metric"
				if [ -n "$ipv6_gw" ] && [ -n "$ipv6_addr" ] && [ -n "$ipv6_prefix_length" ]; then
					proto_add_ipv6_route "::0" 0 "$ipv6_gw" "$metric" "" "${ipv6_addr}/${ipv6_prefix_length}"
				fi
			fi
			if [ -n "$ipv6_addr" ]; then
				proto_add_ipv6_address "$ipv6_addr" 128
			fi
			if [ -n "$ipv6_prefix" ] && [ -n "$ipv6_prefix_length" ]; then
				proto_add_ipv6_prefix "$ipv6_prefix/$ipv6_prefix_length"
			fi
			if [ -n "$ipv6_dns1" ]; then
				proto_add_dns_server "$ipv6_dns1"
			fi
			if [ -n "$ipv6_dns2" ]; then
				proto_add_dns_server "$ipv6_dns2"
			fi
			logger -t mobiled "Update interface $interface ipv4_addr: $ipv4_addr ipv4_gw: $ipv4_gw ipv4_dns1: $ipv4_dns1 ipv4_dns2: $ipv4_dns2"
			proto_send_update "$interface"
		fi
	fi
#//////////////////////////////////////////////////
# Data session disconnected
#//////////////////////////////////////////////////
elif [ "$action" = "disconnected" ]; then
	# This can fail when a device is unplugged so not validating the output
	if ubus_call "mobiled.network" "sessions" "{'session_id':$session_id, 'dev_idx':$dev_idx}"; then
		json_get_vars proto
	fi

	if [ "$pdp_type" = "ipv4" ] && [ "$proto" = "dhcp" ]; then
		check_and_remove "${interface}_4"
	elif [ "$pdp_type" = "ipv6" ] && [ "$proto" = "dhcp" ]; then
		check_and_remove "${interface}_6"
	else
		# Bring down the top level interface
		proto_init_update "*" 0
		proto_send_update "$interface"
	fi
#//////////////////////////////////////////////////
# Data session teardown
#//////////////////////////////////////////////////
elif [ "$action" = "teardown" ]; then
	check_and_remove "${interface}_ppp"
	check_and_remove "${interface}_4"
	check_and_remove "${interface}_6"
#//////////////////////////////////////////////////
# Data session augment
#//////////////////////////////////////////////////
elif [ "$action" = "augment" ]; then
	if ! ubus_call "mobiled.network" "sessions" "{'session_id':$session_id, 'dev_idx':$dev_idx}"; then
		proto_notify_error "$interface" "NO_SESSION_INFO"
		return 1
	fi

	json_get_vars proto
	if [ -z "$proto" ]; then
		proto_notify_error "$interface" "NO_PROTO"
		return 1
	fi

	# Interfaces using DHCP
	if [ "$proto" = "dhcp" ]; then
		json_select "dhcp"
		json_get_vars ipv6_dns1 ipv6_dns2
		if [ -n "$ipv6_dns1" ] || [ -n "$ipv6_dns2" ]; then
			network_get_dnsserver current_dns "${interface}_6"

			proto_init_update "${interface}_6" 1
			proto_set_keep 1
			SEND_UPDATE=0

			if [ -n "$ipv6_dns1" ]; then
				if ! echo "$current_dns" | grep -q "$ipv6_dns1"; then
					proto_add_dns_server "$ipv6_dns1"
					SEND_UPDATE=1
				fi
			fi
			if [ -n "$ipv6_dns2" ]; then
				if ! echo "$current_dns" | grep -q "$ipv6_dns2"; then
					proto_add_dns_server "$ipv6_dns2"
					SEND_UPDATE=1
				fi
			fi

			if [ "$SEND_UPDATE" -eq 1 ]; then
				proto_send_update "${interface}_6"
			fi
		fi
	fi
fi
